
AVR32 Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000324c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80005400  80005400  00005800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000198  80005600  80005600  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005d0  00000008  80005798  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f8  000005d8  000005d8  00000000  2**2
                  ALLOC
  8 .heap         0000e330  00000cd0  00000cd0  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000ba0  00000000  00000000  00006208  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000018f9  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00022a43  00000000  00000000  000086a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f09  00000000  00000000  0002b0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cec1  00000000  00000000  0002efed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ab4  00000000  00000000  0003beb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007a72  00000000  00000000  0003d964  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00004b3a  00000000  00000000  000453d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 010544ba  00000000  00000000  00049f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000c10  00000000  00000000  0109e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cd 9c 	sub	pc,pc,-12900

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ed a0 	sub	pc,pc,-4704

Disassembly of section .text:

80002008 <board_init>:
80002008:	d4 01       	pushm	lr
8000200a:	20 4d       	sub	sp,16



void board_init (void)
{
    gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200c:	30 3b       	mov	r11,3
8000200e:	32 3c       	mov	r12,35
80002010:	f0 1f 00 15 	mcall	80002064 <board_init+0x5c>
    gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002014:	30 3b       	mov	r11,3
80002016:	34 9c       	mov	r12,73
80002018:	f0 1f 00 13 	mcall	80002064 <board_init+0x5c>
    gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201c:	30 3b       	mov	r11,3
8000201e:	32 2c       	mov	r12,34
80002020:	f0 1f 00 11 	mcall	80002064 <board_init+0x5c>
    gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002024:	30 3b       	mov	r11,3
80002026:	32 6c       	mov	r12,38
80002028:	f0 1f 00 0f 	mcall	80002064 <board_init+0x5c>

    gpio_configure_pin(GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000202c:	30 4b       	mov	r11,4
8000202e:	32 1c       	mov	r12,33
80002030:	f0 1f 00 0d 	mcall	80002064 <board_init+0x5c>
    /* TWI Master GPIO pin configuration. */
    const gpio_map_t TWI_GPIO_MAP =
		{
			{TWIMS0_TWD_PIN,  TWIMS0_TWD_FUNCTION  },
			{TWIMS0_TWCK_PIN, TWIMS0_TWCK_FUNCTION }
		};
80002034:	48 d8       	lddpc	r8,80002068 <board_init+0x60>
80002036:	1a 9c       	mov	r12,sp
80002038:	f0 ea 00 00 	ld.d	r10,r8[0]
8000203c:	fa eb 00 00 	st.d	sp[0],r10
80002040:	f0 e8 00 08 	ld.d	r8,r8[8]
80002044:	fa e9 00 08 	st.d	sp[8],r8
    gpio_enable_module(TWI_GPIO_MAP,
80002048:	30 2b       	mov	r11,2
8000204a:	f0 1f 00 09 	mcall	8000206c <board_init+0x64>
	static const gpio_map_t COMPORT_GPIO_MAP =
		{
			{USART_RXD_PIN, USART_RXD_FUNCTION },
			{USART_TXD_PIN, USART_TXD_FUNCTION }
		};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000204e:	30 2b       	mov	r11,2
80002050:	48 8c       	lddpc	r12,80002070 <board_init+0x68>
80002052:	f0 1f 00 07 	mcall	8000206c <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002056:	30 4b       	mov	r11,4
80002058:	48 7c       	lddpc	r12,80002074 <board_init+0x6c>
8000205a:	f0 1f 00 05 	mcall	8000206c <board_init+0x64>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
#endif

}
8000205e:	2f cd       	sub	sp,-16
80002060:	d8 02       	popm	pc
80002062:	00 00       	add	r0,r0
80002064:	80 00       	ld.sh	r0,r0[0x0]
80002066:	21 30       	sub	r0,19
80002068:	80 00       	ld.sh	r0,r0[0x0]
8000206a:	56 20       	stdsp	sp[0x188],r0
8000206c:	80 00       	ld.sh	r0,r0[0x0]
8000206e:	21 00       	sub	r0,16
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	56 30       	stdsp	sp[0x18c],r0
80002074:	80 00       	ld.sh	r0,r0[0x0]
80002076:	56 00       	stdsp	sp[0x180],r0

80002078 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002078:	fe 68 14 00 	mov	r8,-125952
8000207c:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000207e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002082:	91 09       	st.w	r8[0x0],r9
}
80002084:	5e fc       	retal	r12
80002086:	d7 03       	nop

80002088 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002088:	d4 01       	pushm	lr
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
8000208a:	e0 68 50 ff 	mov	r8,20735
8000208e:	ea 18 02 25 	orh	r8,0x225
80002092:	10 3c       	cp.w	r12,r8
80002094:	e0 88 00 06 	brls	800020a0 <flashc_set_bus_freq+0x18>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80002098:	30 1c       	mov	r12,1
8000209a:	f0 1f 00 04 	mcall	800020a8 <flashc_set_bus_freq+0x20>
8000209e:	d8 02       	popm	pc
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
800020a0:	30 0c       	mov	r12,0
800020a2:	f0 1f 00 02 	mcall	800020a8 <flashc_set_bus_freq+0x20>
800020a6:	d8 02       	popm	pc
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	20 78       	sub	r8,7

800020ac <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020ac:	f8 08 16 05 	lsr	r8,r12,0x5
800020b0:	a9 68       	lsl	r8,0x8
800020b2:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800020b6:	58 1b       	cp.w	r11,1
800020b8:	c0 d0       	breq	800020d2 <gpio_enable_module_pin+0x26>
800020ba:	c0 63       	brcs	800020c6 <gpio_enable_module_pin+0x1a>
800020bc:	58 2b       	cp.w	r11,2
800020be:	c1 00       	breq	800020de <gpio_enable_module_pin+0x32>
800020c0:	58 3b       	cp.w	r11,3
800020c2:	c1 40       	breq	800020ea <gpio_enable_module_pin+0x3e>
800020c4:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020c6:	30 19       	mov	r9,1
800020c8:	f2 0c 09 49 	lsl	r9,r9,r12
800020cc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020ce:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800020d0:	c1 28       	rjmp	800020f4 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020d2:	30 19       	mov	r9,1
800020d4:	f2 0c 09 49 	lsl	r9,r9,r12
800020d8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020da:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800020dc:	c0 c8       	rjmp	800020f4 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020de:	30 19       	mov	r9,1
800020e0:	f2 0c 09 49 	lsl	r9,r9,r12
800020e4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800020e6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800020e8:	c0 68       	rjmp	800020f4 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020ea:	30 19       	mov	r9,1
800020ec:	f2 0c 09 49 	lsl	r9,r9,r12
800020f0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800020f2:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800020f4:	30 19       	mov	r9,1
800020f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800020fa:	91 2c       	st.w	r8[0x8],r12
800020fc:	5e fd       	retal	0
800020fe:	d7 03       	nop

80002100 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002100:	d4 21       	pushm	r4-r7,lr
80002102:	18 97       	mov	r7,r12
80002104:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002106:	58 0b       	cp.w	r11,0
80002108:	c0 31       	brne	8000210e <gpio_enable_module+0xe>
8000210a:	30 05       	mov	r5,0
8000210c:	c0 d8       	rjmp	80002126 <gpio_enable_module+0x26>
8000210e:	30 06       	mov	r6,0
80002110:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002112:	6e 1b       	ld.w	r11,r7[0x4]
80002114:	6e 0c       	ld.w	r12,r7[0x0]
80002116:	f0 1f 00 06 	mcall	8000212c <gpio_enable_module+0x2c>
8000211a:	18 45       	or	r5,r12
		gpiomap++;
8000211c:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000211e:	2f f6       	sub	r6,-1
80002120:	0c 34       	cp.w	r4,r6
80002122:	fe 9b ff f8 	brhi	80002112 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002126:	0a 9c       	mov	r12,r5
80002128:	d8 22       	popm	r4-r7,pc
8000212a:	00 00       	add	r0,r0
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	20 ac       	sub	r12,10

80002130 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002130:	f8 08 16 05 	lsr	r8,r12,0x5
80002134:	a9 68       	lsl	r8,0x8
80002136:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000213a:	16 99       	mov	r9,r11
8000213c:	e2 19 00 04 	andl	r9,0x4,COH
80002140:	c0 70       	breq	8000214e <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002142:	30 19       	mov	r9,1
80002144:	f2 0c 09 49 	lsl	r9,r9,r12
80002148:	f1 49 00 74 	st.w	r8[116],r9
8000214c:	c0 68       	rjmp	80002158 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
8000214e:	30 19       	mov	r9,1
80002150:	f2 0c 09 49 	lsl	r9,r9,r12
80002154:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002158:	16 99       	mov	r9,r11
8000215a:	e2 19 00 80 	andl	r9,0x80,COH
8000215e:	c2 40       	breq	800021a6 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002160:	16 99       	mov	r9,r11
80002162:	e2 19 01 80 	andl	r9,0x180,COH
80002166:	c0 90       	breq	80002178 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002168:	30 19       	mov	r9,1
8000216a:	f2 0c 09 49 	lsl	r9,r9,r12
8000216e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002172:	f1 49 00 b8 	st.w	r8[184],r9
80002176:	c1 88       	rjmp	800021a6 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002178:	16 99       	mov	r9,r11
8000217a:	e2 19 02 80 	andl	r9,0x280,COH
8000217e:	c0 90       	breq	80002190 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002180:	30 19       	mov	r9,1
80002182:	f2 0c 09 49 	lsl	r9,r9,r12
80002186:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000218a:	f1 49 00 b8 	st.w	r8[184],r9
8000218e:	c0 c8       	rjmp	800021a6 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002190:	16 99       	mov	r9,r11
80002192:	e2 19 03 80 	andl	r9,0x380,COH
80002196:	c0 80       	breq	800021a6 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002198:	30 19       	mov	r9,1
8000219a:	f2 0c 09 49 	lsl	r9,r9,r12
8000219e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800021a2:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800021a6:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021aa:	c1 50       	breq	800021d4 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800021ac:	e2 1b 00 02 	andl	r11,0x2,COH
800021b0:	c0 70       	breq	800021be <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800021b2:	30 19       	mov	r9,1
800021b4:	f2 0c 09 49 	lsl	r9,r9,r12
800021b8:	f1 49 00 54 	st.w	r8[84],r9
800021bc:	c0 68       	rjmp	800021c8 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800021be:	30 19       	mov	r9,1
800021c0:	f2 0c 09 49 	lsl	r9,r9,r12
800021c4:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800021c8:	30 19       	mov	r9,1
800021ca:	f2 0c 09 49 	lsl	r9,r9,r12
800021ce:	f1 49 00 44 	st.w	r8[68],r9
800021d2:	c0 68       	rjmp	800021de <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800021d4:	30 19       	mov	r9,1
800021d6:	f2 0c 09 49 	lsl	r9,r9,r12
800021da:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800021de:	30 19       	mov	r9,1
800021e0:	f2 0c 09 4c 	lsl	r12,r9,r12
800021e4:	91 1c       	st.w	r8[0x4],r12
}
800021e6:	5e fc       	retal	r12

800021e8 <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021e8:	f8 08 16 05 	lsr	r8,r12,0x5
800021ec:	a9 68       	lsl	r8,0x8
800021ee:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800021f2:	30 19       	mov	r9,1
800021f4:	f2 0c 09 4c 	lsl	r12,r9,r12
800021f8:	f1 4c 00 54 	st.w	r8[84],r12
}
800021fc:	5e fc       	retal	r12

800021fe <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021fe:	f8 08 16 05 	lsr	r8,r12,0x5
80002202:	a9 68       	lsl	r8,0x8
80002204:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002208:	30 19       	mov	r9,1
8000220a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000220e:	f1 4c 00 58 	st.w	r8[88],r12
}
80002212:	5e fc       	retal	r12

80002214 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002214:	f8 08 16 05 	lsr	r8,r12,0x5
80002218:	a9 68       	lsl	r8,0x8
8000221a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000221e:	30 19       	mov	r9,1
80002220:	f2 0c 09 4c 	lsl	r12,r9,r12
80002224:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80002228:	12 3b       	cp.w	r11,r9
8000222a:	c0 a0       	breq	8000223e <gpio_enable_pin_interrupt+0x2a>
8000222c:	c0 43       	brcs	80002234 <gpio_enable_pin_interrupt+0x20>
8000222e:	58 2b       	cp.w	r11,2
80002230:	c1 11       	brne	80002252 <gpio_enable_pin_interrupt+0x3e>
80002232:	c0 b8       	rjmp	80002248 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002234:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002238:	f1 4c 00 b8 	st.w	r8[184],r12
8000223c:	c0 c8       	rjmp	80002254 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
8000223e:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002242:	f1 4c 00 b8 	st.w	r8[184],r12
80002246:	c0 78       	rjmp	80002254 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002248:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000224c:	f1 4c 00 b4 	st.w	r8[180],r12
80002250:	c0 28       	rjmp	80002254 <gpio_enable_pin_interrupt+0x40>
80002252:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002254:	f1 4c 00 94 	st.w	r8[148],r12
80002258:	5e fd       	retal	0

8000225a <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000225a:	f8 08 16 05 	lsr	r8,r12,0x5
8000225e:	a9 68       	lsl	r8,0x8
80002260:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80002264:	f0 f8 00 d0 	ld.w	r8,r8[208]
80002268:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000226c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002270:	5e fc       	retal	r12

80002272 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002272:	f8 08 16 05 	lsr	r8,r12,0x5
80002276:	a9 68       	lsl	r8,0x8
80002278:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000227c:	30 19       	mov	r9,1
8000227e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002282:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80002286:	5e fc       	retal	r12

80002288 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002288:	c0 08       	rjmp	80002288 <_unhandled_interrupt>
8000228a:	d7 03       	nop

8000228c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000228c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002290:	49 99       	lddpc	r9,800022f4 <INTC_register_interrupt+0x68>
80002292:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002296:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000229a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000229c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800022a0:	58 0a       	cp.w	r10,0
800022a2:	c0 91       	brne	800022b4 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800022a4:	49 59       	lddpc	r9,800022f8 <INTC_register_interrupt+0x6c>
800022a6:	49 6a       	lddpc	r10,800022fc <INTC_register_interrupt+0x70>
800022a8:	12 1a       	sub	r10,r9
800022aa:	fe 79 08 00 	mov	r9,-63488
800022ae:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800022b2:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800022b4:	58 1a       	cp.w	r10,1
800022b6:	c0 a1       	brne	800022ca <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800022b8:	49 09       	lddpc	r9,800022f8 <INTC_register_interrupt+0x6c>
800022ba:	49 2a       	lddpc	r10,80002300 <INTC_register_interrupt+0x74>
800022bc:	12 1a       	sub	r10,r9
800022be:	bf aa       	sbr	r10,0x1e
800022c0:	fe 79 08 00 	mov	r9,-63488
800022c4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800022c8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800022ca:	58 2a       	cp.w	r10,2
800022cc:	c0 a1       	brne	800022e0 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800022ce:	48 b9       	lddpc	r9,800022f8 <INTC_register_interrupt+0x6c>
800022d0:	48 da       	lddpc	r10,80002304 <INTC_register_interrupt+0x78>
800022d2:	12 1a       	sub	r10,r9
800022d4:	bf ba       	sbr	r10,0x1f
800022d6:	fe 79 08 00 	mov	r9,-63488
800022da:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800022de:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800022e0:	48 69       	lddpc	r9,800022f8 <INTC_register_interrupt+0x6c>
800022e2:	48 aa       	lddpc	r10,80002308 <INTC_register_interrupt+0x7c>
800022e4:	12 1a       	sub	r10,r9
800022e6:	ea 1a c0 00 	orh	r10,0xc000
800022ea:	fe 79 08 00 	mov	r9,-63488
800022ee:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800022f2:	5e fc       	retal	r12
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	56 40       	stdsp	sp[0x190],r0
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	54 00       	stdsp	sp[0x100],r0
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	55 04       	stdsp	sp[0x140],r4
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	55 12       	stdsp	sp[0x144],r2
80002304:	80 00       	ld.sh	r0,r0[0x0]
80002306:	55 20       	stdsp	sp[0x148],r0
80002308:	80 00       	ld.sh	r0,r0[0x0]
8000230a:	55 2e       	stdsp	sp[0x148],lr

8000230c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000230c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000230e:	49 18       	lddpc	r8,80002350 <INTC_init_interrupts+0x44>
80002310:	e3 b8 00 01 	mtsr	0x4,r8
80002314:	49 0e       	lddpc	lr,80002354 <INTC_init_interrupts+0x48>
80002316:	30 07       	mov	r7,0
80002318:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000231a:	49 0c       	lddpc	r12,80002358 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000231c:	49 05       	lddpc	r5,8000235c <INTC_init_interrupts+0x50>
8000231e:	10 15       	sub	r5,r8
80002320:	fe 76 08 00 	mov	r6,-63488
80002324:	c1 08       	rjmp	80002344 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002326:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002328:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000232a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000232c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002330:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002332:	10 3a       	cp.w	r10,r8
80002334:	fe 9b ff fc 	brhi	8000232c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002338:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000233c:	2f f7       	sub	r7,-1
8000233e:	2f 8e       	sub	lr,-8
80002340:	59 e7       	cp.w	r7,30
80002342:	c0 50       	breq	8000234c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002344:	7c 08       	ld.w	r8,lr[0x0]
80002346:	58 08       	cp.w	r8,0
80002348:	ce f1       	brne	80002326 <INTC_init_interrupts+0x1a>
8000234a:	cf 7b       	rjmp	80002338 <INTC_init_interrupts+0x2c>
8000234c:	d8 22       	popm	r4-r7,pc
8000234e:	00 00       	add	r0,r0
80002350:	80 00       	ld.sh	r0,r0[0x0]
80002352:	54 00       	stdsp	sp[0x100],r0
80002354:	80 00       	ld.sh	r0,r0[0x0]
80002356:	56 40       	stdsp	sp[0x190],r0
80002358:	80 00       	ld.sh	r0,r0[0x0]
8000235a:	22 88       	sub	r8,40
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	55 04       	stdsp	sp[0x140],r4

80002360 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002360:	fe 78 08 00 	mov	r8,-63488
80002364:	e0 69 00 83 	mov	r9,131
80002368:	f2 0c 01 0c 	sub	r12,r9,r12
8000236c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002370:	f2 ca ff c0 	sub	r10,r9,-64
80002374:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002378:	58 08       	cp.w	r8,0
8000237a:	c0 21       	brne	8000237e <_get_interrupt_handler+0x1e>
8000237c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000237e:	f0 08 12 00 	clz	r8,r8
80002382:	48 5a       	lddpc	r10,80002394 <_get_interrupt_handler+0x34>
80002384:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002388:	f0 08 11 1f 	rsub	r8,r8,31
8000238c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000238e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002392:	5e fc       	retal	r12
80002394:	80 00       	ld.sh	r0,r0[0x0]
80002396:	56 40       	stdsp	sp[0x190],r0

80002398 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
80002398:	5e ff       	retal	1

8000239a <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
8000239a:	5e fd       	retal	0

8000239c <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
8000239c:	fe 68 00 00 	mov	r8,-131072
800023a0:	70 09       	ld.w	r9,r8[0x0]
800023a2:	a7 d9       	cbr	r9,0x7
800023a4:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023a6:	70 09       	ld.w	r9,r8[0x0]
800023a8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023ac:	e0 19 ff 80 	andl	r9,0xff80
800023b0:	f9 e9 10 09 	or	r9,r12,r9
800023b4:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023b6:	70 09       	ld.w	r9,r8[0x0]
800023b8:	a7 b9       	sbr	r9,0x7
800023ba:	91 09       	st.w	r8[0x0],r9
}
800023bc:	5e fc       	retal	r12

800023be <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023be:	fe 68 00 00 	mov	r8,-131072
800023c2:	70 0c       	ld.w	r12,r8[0x0]
}
800023c4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023c8:	5e fc       	retal	r12

800023ca <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023ca:	fe 68 00 00 	mov	r8,-131072
800023ce:	70 8c       	ld.w	r12,r8[0x20]
}
800023d0:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023d4:	5e fc       	retal	r12

800023d6 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800023d6:	fe 68 00 00 	mov	r8,-131072
800023da:	70 8c       	ld.w	r12,r8[0x20]
}
800023dc:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800023e0:	5e fc       	retal	r12
800023e2:	d7 03       	nop

800023e4 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800023e4:	48 28       	lddpc	r8,800023ec <udd_set_setup_payload+0x8>
800023e6:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800023e8:	b0 6b       	st.h	r8[0xc],r11
}
800023ea:	5e fc       	retal	r12
800023ec:	00 00       	add	r0,r0
800023ee:	0c 98       	mov	r8,r6

800023f0 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800023f0:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800023f4:	a3 68       	lsl	r8,0x2
800023f6:	e0 38 fe 40 	sub	r8,130624
800023fa:	70 0c       	ld.w	r12,r8[0x0]
}
800023fc:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002400:	5e fc       	retal	r12
80002402:	d7 03       	nop

80002404 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002404:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80002408:	30 38       	mov	r8,3
8000240a:	f0 0c 18 00 	cp.b	r12,r8
8000240e:	e0 8b 00 35 	brhi	80002478 <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002412:	18 99       	mov	r9,r12
80002414:	f8 c8 00 01 	sub	r8,r12,1
80002418:	a5 68       	lsl	r8,0x4
8000241a:	49 9a       	lddpc	r10,8000247c <udd_ep_set_halt+0x78>
8000241c:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002420:	70 0a       	ld.w	r10,r8[0x0]
80002422:	58 0a       	cp.w	r10,0
80002424:	c2 a5       	brlt	80002478 <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
80002426:	a3 69       	lsl	r9,0x2
80002428:	fe 6b 01 30 	mov	r11,-130768
8000242c:	f2 0b 00 0a 	add	r10,r9,r11
80002430:	74 0a       	ld.w	r10,r10[0x0]
80002432:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80002436:	c1 10       	breq	80002458 <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
80002438:	70 0b       	ld.w	r11,r8[0x0]
8000243a:	30 1a       	mov	r10,1
8000243c:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002440:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80002442:	e0 39 fe 10 	sub	r9,130576
80002446:	e0 68 10 00 	mov	r8,4096
8000244a:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
8000244c:	f0 0c 09 4c 	lsl	r12,r8,r12
80002450:	fe 69 00 00 	mov	r9,-131072
80002454:	93 6c       	st.w	r9[0x18],r12
80002456:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
80002458:	fe 6a 01 00 	mov	r10,-130816
8000245c:	f2 0a 00 08 	add	r8,r9,r10
80002460:	70 0a       	ld.w	r10,r8[0x0]
80002462:	a9 da       	cbr	r10,0x9
80002464:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
80002466:	e0 39 fe 10 	sub	r9,130576
8000246a:	e8 68 00 00 	mov	r8,524288
8000246e:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80002470:	e4 68 00 00 	mov	r8,262144
80002474:	93 08       	st.w	r9[0x0],r8
80002476:	5e ff       	retal	1
80002478:	5e fd       	retal	0
8000247a:	00 00       	add	r0,r0
8000247c:	00 00       	add	r0,r0
8000247e:	06 e8       	st.h	--r3,r8

80002480 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002480:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002482:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002486:	30 38       	mov	r8,3
80002488:	f0 0c 18 00 	cp.b	r12,r8
8000248c:	e0 88 00 03 	brls	80002492 <udd_ep_clear_halt+0x12>
80002490:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002492:	f8 c8 00 01 	sub	r8,r12,1
80002496:	a5 68       	lsl	r8,0x4
80002498:	49 69       	lddpc	r9,800024f0 <udd_ep_clear_halt+0x70>
8000249a:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
8000249e:	a3 6c       	lsl	r12,0x2
800024a0:	fe 6a 01 c0 	mov	r10,-130624
800024a4:	f8 0a 00 09 	add	r9,r12,r10
800024a8:	72 09       	ld.w	r9,r9[0x0]
800024aa:	e6 19 00 08 	andh	r9,0x8,COH
800024ae:	c0 51       	brne	800024b8 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024b0:	70 09       	ld.w	r9,r8[0x0]
800024b2:	e6 19 10 00 	andh	r9,0x1000,COH
800024b6:	c1 c0       	breq	800024ee <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024b8:	70 09       	ld.w	r9,r8[0x0]
800024ba:	30 0a       	mov	r10,0
800024bc:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024c0:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024c2:	fe 6a 02 20 	mov	r10,-130528
800024c6:	f8 0a 00 09 	add	r9,r12,r10
800024ca:	e8 6a 00 00 	mov	r10,524288
800024ce:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
800024d0:	e0 3c ff 00 	sub	r12,130816
800024d4:	78 09       	ld.w	r9,r12[0x0]
800024d6:	a9 b9       	sbr	r9,0x9
800024d8:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800024da:	70 09       	ld.w	r9,r8[0x0]
800024dc:	58 09       	cp.w	r9,0
800024de:	c0 84       	brge	800024ee <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
800024e0:	30 0a       	mov	r10,0
800024e2:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800024e6:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800024e8:	70 38       	ld.w	r8,r8[0xc]
800024ea:	5d 18       	icall	r8
800024ec:	da 0a       	popm	pc,r12=1
800024ee:	da 0a       	popm	pc,r12=1
800024f0:	00 00       	add	r0,r0
800024f2:	06 e8       	st.h	--r3,r8

800024f4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800024f4:	30 59       	mov	r9,5
800024f6:	48 58       	lddpc	r8,80002508 <udd_ctrl_stall_data+0x14>
800024f8:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
800024fa:	e8 69 00 00 	mov	r9,524288
800024fe:	fe 68 01 f0 	mov	r8,-130576
80002502:	91 09       	st.w	r8[0x0],r9
}
80002504:	5e fc       	retal	r12
80002506:	00 00       	add	r0,r0
80002508:	00 00       	add	r0,r0
8000250a:	07 1c       	ld.sh	r12,r3++

8000250c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
8000250c:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000250e:	48 48       	lddpc	r8,8000251c <udd_ctrl_endofrequest+0x10>
80002510:	70 48       	ld.w	r8,r8[0x10]
80002512:	58 08       	cp.w	r8,0
80002514:	c0 20       	breq	80002518 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80002516:	5d 18       	icall	r8
80002518:	d8 02       	popm	pc
8000251a:	00 00       	add	r0,r0
8000251c:	00 00       	add	r0,r0
8000251e:	0c 98       	mov	r8,r6

80002520 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002520:	d4 01       	pushm	lr
80002522:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002524:	78 08       	ld.w	r8,r12[0x0]
80002526:	58 08       	cp.w	r8,0
80002528:	c0 b4       	brge	8000253e <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
8000252a:	30 0a       	mov	r10,0
8000252c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002530:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
80002532:	78 38       	ld.w	r8,r12[0xc]
80002534:	58 08       	cp.w	r8,0
80002536:	c0 40       	breq	8000253e <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002538:	78 2b       	ld.w	r11,r12[0x8]
8000253a:	12 9c       	mov	r12,r9
8000253c:	5d 18       	icall	r8
8000253e:	d8 02       	popm	pc

80002540 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002540:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002542:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002546:	20 18       	sub	r8,1
80002548:	a5 68       	lsl	r8,0x4
8000254a:	30 1b       	mov	r11,1
8000254c:	48 3c       	lddpc	r12,80002558 <udd_ep_abort_job+0x18>
8000254e:	10 0c       	add	r12,r8
80002550:	f0 1f 00 03 	mcall	8000255c <udd_ep_abort_job+0x1c>
}
80002554:	d8 02       	popm	pc
80002556:	00 00       	add	r0,r0
80002558:	00 00       	add	r0,r0
8000255a:	06 e8       	st.h	--r3,r8
8000255c:	80 00       	ld.sh	r0,r0[0x0]
8000255e:	25 20       	sub	r0,82

80002560 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002560:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80002562:	fe 69 00 00 	mov	r9,-131072
80002566:	72 7b       	ld.w	r11,r9[0x1c]
80002568:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000256c:	30 1a       	mov	r10,1
8000256e:	f4 08 09 4a 	lsl	r10,r10,r8
80002572:	5c da       	com	r10
80002574:	16 6a       	and	r10,r11
80002576:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80002578:	a3 68       	lsl	r8,0x2
8000257a:	e0 38 ff 00 	sub	r8,130816
8000257e:	70 09       	ld.w	r9,r8[0x0]
80002580:	a1 d9       	cbr	r9,0x1
80002582:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002584:	f0 1f 00 02 	mcall	8000258c <udd_ep_free+0x2c>
}
80002588:	d8 02       	popm	pc
8000258a:	00 00       	add	r0,r0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	25 40       	sub	r0,84

80002590 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002590:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80002594:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002598:	30 37       	mov	r7,3
8000259a:	ee 0e 18 00 	cp.b	lr,r7
8000259e:	e0 8b 00 a3 	brhi	800026e4 <udd_ep_run+0x154>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025a2:	fe 67 00 00 	mov	r7,-131072
800025a6:	6e 76       	ld.w	r6,r7[0x1c]
800025a8:	1c 95       	mov	r5,lr
800025aa:	30 17       	mov	r7,1
800025ac:	ee 0e 09 47 	lsl	r7,r7,lr
800025b0:	0c 67       	and	r7,r6
800025b2:	e0 80 00 99 	breq	800026e4 <udd_ep_run+0x154>
			|| Is_udd_endpoint_stall_requested(ep)
800025b6:	fc 06 15 02 	lsl	r6,lr,0x2
800025ba:	fe 64 01 c0 	mov	r4,-130624
800025be:	ec 04 00 07 	add	r7,r6,r4
800025c2:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025c4:	e6 17 00 08 	andh	r7,0x8,COH
800025c8:	e0 81 00 8e 	brne	800026e4 <udd_ep_run+0x154>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800025cc:	fc c7 00 01 	sub	r7,lr,1
800025d0:	a5 67       	lsl	r7,0x4
800025d2:	4c 64       	lddpc	r4,800026e8 <udd_ep_run+0x158>
800025d4:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800025d8:	6e 04       	ld.w	r4,r7[0x0]
800025da:	e6 14 10 00 	andh	r4,0x1000,COH
800025de:	e0 81 00 83 	brne	800026e4 <udd_ep_run+0x154>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025e2:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
800025e6:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800025e8:	6e 03       	ld.w	r3,r7[0x0]
800025ea:	58 03       	cp.w	r3,0
800025ec:	c0 74       	brge	800025fa <udd_ep_run+0x6a>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800025ee:	e6 14 00 01 	andh	r4,0x1,COH
800025f2:	c0 21       	brne	800025f6 <udd_ep_run+0x66>
      cpu_irq_enable();
800025f4:	d5 03       	csrf	0x10
   }

	barrier();
800025f6:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
800025fa:	6e 03       	ld.w	r3,r7[0x0]
800025fc:	30 12       	mov	r2,1
800025fe:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002602:	8f 03       	st.w	r7[0x0],r3
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002604:	e6 14 00 01 	andh	r4,0x1,COH
80002608:	c0 21       	brne	8000260c <udd_ep_run+0x7c>
      cpu_irq_enable();
8000260a:	d5 03       	csrf	0x10
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
8000260c:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
80002610:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
80002612:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
80002614:	6e 08       	ld.w	r8,r7[0x0]
80002616:	30 04       	mov	r4,0
80002618:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
8000261c:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
8000261e:	e0 49 ff ff 	cp.w	r9,65535
80002622:	e0 88 00 07 	brls	80002630 <udd_ep_run+0xa0>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002626:	e0 78 00 00 	mov	r8,65536
8000262a:	8f 28       	st.w	r7[0x8],r8
8000262c:	08 99       	mov	r9,r4
8000262e:	c3 88       	rjmp	8000269e <udd_ep_run+0x10e>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80002630:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
80002632:	58 0c       	cp.w	r12,0
80002634:	c3 50       	breq	8000269e <udd_ep_run+0x10e>
			if (buf_size==0) {
80002636:	58 09       	cp.w	r9,0
80002638:	c1 a1       	brne	8000266c <udd_ep_run+0xdc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
8000263a:	6e 08       	ld.w	r8,r7[0x0]
				ptr_job->b_send_zlp = true;
8000263c:	bd b8       	sbr	r8,0x1d
8000263e:	30 19       	mov	r9,1
80002640:	f1 d9 d3 c1 	bfins	r8,r9,0x1e,0x1
80002644:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002646:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000264a:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
8000264c:	20 15       	sub	r5,1
8000264e:	fc 19 02 00 	movh	r9,0x200
80002652:	f2 05 09 49 	lsl	r9,r9,r5
80002656:	fe 68 00 00 	mov	r8,-131072
8000265a:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
8000265c:	91 39       	st.w	r8[0xc],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000265e:	14 98       	mov	r8,r10
80002660:	e6 18 00 01 	andh	r8,0x1,COH
80002664:	c0 21       	brne	80002668 <udd_ep_run+0xd8>
      cpu_irq_enable();
80002666:	d5 03       	csrf	0x10
   }

	barrier();
80002668:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
				cpu_irq_restore(flags);
				return true;
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
8000266c:	e0 36 ff 00 	sub	r6,130816
80002670:	6c 08       	ld.w	r8,r6[0x0]
80002672:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
80002676:	30 86       	mov	r6,8
80002678:	ec 08 09 48 	lsl	r8,r6,r8
8000267c:	20 18       	sub	r8,1
8000267e:	12 68       	and	r8,r9
80002680:	c0 b0       	breq	80002696 <udd_ep_run+0x106>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
80002682:	6e 08       	ld.w	r8,r7[0x0]
80002684:	30 0b       	mov	r11,0
80002686:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000268a:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
8000268c:	a5 6e       	lsl	lr,0x4
8000268e:	e0 3e fd 00 	sub	lr,130304
80002692:	9d 1a       	st.w	lr[0x4],r10
80002694:	c1 18       	rjmp	800026b6 <udd_ep_run+0x126>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
80002696:	6e 08       	ld.w	r8,r7[0x0]
80002698:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000269c:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
8000269e:	a5 6e       	lsl	lr,0x4
800026a0:	e0 3e fd 00 	sub	lr,130304
800026a4:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
800026a6:	58 0b       	cp.w	r11,0
800026a8:	c0 31       	brne	800026ae <udd_ep_run+0x11e>
800026aa:	30 08       	mov	r8,0
800026ac:	c0 68       	rjmp	800026b8 <udd_ep_run+0x128>
		if (b_dir_in) {
800026ae:	58 0c       	cp.w	r12,0
800026b0:	c0 31       	brne	800026b6 <udd_ep_run+0x126>
800026b2:	31 48       	mov	r8,20
800026b4:	c0 28       	rjmp	800026b8 <udd_ep_run+0x128>
800026b6:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026b8:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026bc:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026c0:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026c2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026c6:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026c8:	20 15       	sub	r5,1
800026ca:	fc 19 02 00 	movh	r9,0x200
800026ce:	f2 05 09 45 	lsl	r5,r9,r5
800026d2:	fe 69 00 00 	mov	r9,-131072
800026d6:	93 65       	st.w	r9[0x18],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800026d8:	e6 18 00 01 	andh	r8,0x1,COH
800026dc:	c0 21       	brne	800026e0 <udd_ep_run+0x150>
      cpu_irq_enable();
800026de:	d5 03       	csrf	0x10
   }

	barrier();
800026e0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
800026e4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800026e8:	00 00       	add	r0,r0
800026ea:	06 e8       	st.h	--r3,r8

800026ec <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800026ec:	58 0c       	cp.w	r12,0
800026ee:	c1 41       	brne	80002716 <udd_sleep_mode+0x2a>
800026f0:	49 48       	lddpc	r8,80002740 <udd_sleep_mode+0x54>
800026f2:	11 89       	ld.ub	r9,r8[0x0]
800026f4:	30 08       	mov	r8,0
800026f6:	f0 09 18 00 	cp.b	r9,r8
800026fa:	c2 00       	breq	8000273a <udd_sleep_mode+0x4e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026fc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002700:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002702:	49 18       	lddpc	r8,80002744 <udd_sleep_mode+0x58>
80002704:	11 9a       	ld.ub	r10,r8[0x1]
80002706:	2f fa       	sub	r10,-1
80002708:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000270a:	12 98       	mov	r8,r9
8000270c:	e6 18 00 01 	andh	r8,0x1,COH
80002710:	c0 21       	brne	80002714 <udd_sleep_mode+0x28>
      cpu_irq_enable();
80002712:	d5 03       	csrf	0x10
   }

	barrier();
80002714:	c1 38       	rjmp	8000273a <udd_sleep_mode+0x4e>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002716:	48 b8       	lddpc	r8,80002740 <udd_sleep_mode+0x54>
80002718:	11 89       	ld.ub	r9,r8[0x0]
8000271a:	30 08       	mov	r8,0
8000271c:	f0 09 18 00 	cp.b	r9,r8
80002720:	c0 d1       	brne	8000273a <udd_sleep_mode+0x4e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002722:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002726:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002728:	48 78       	lddpc	r8,80002744 <udd_sleep_mode+0x58>
8000272a:	11 9a       	ld.ub	r10,r8[0x1]
8000272c:	20 1a       	sub	r10,1
8000272e:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002730:	12 98       	mov	r8,r9
80002732:	e6 18 00 01 	andh	r8,0x1,COH
80002736:	c0 21       	brne	8000273a <udd_sleep_mode+0x4e>
      cpu_irq_enable();
80002738:	d5 03       	csrf	0x10
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000273a:	48 28       	lddpc	r8,80002740 <udd_sleep_mode+0x54>
8000273c:	b0 8c       	st.b	r8[0x0],r12
}
8000273e:	5e fc       	retal	r12
80002740:	00 00       	add	r0,r0
80002742:	07 18       	ld.sh	r8,r3++
80002744:	00 00       	add	r0,r0
80002746:	0c b0       	st.h	r6++,r0

80002748 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002748:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000274a:	fe 68 00 00 	mov	r8,-131072
8000274e:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002752:	af c9       	cbr	r9,0xe
80002754:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
80002758:	70 09       	ld.w	r9,r8[0x0]
8000275a:	a9 a9       	sbr	r9,0x8
8000275c:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000275e:	30 0c       	mov	r12,0
80002760:	f0 1f 00 02 	mcall	80002768 <udd_detach+0x20>
}
80002764:	d8 02       	popm	pc
80002766:	00 00       	add	r0,r0
80002768:	80 00       	ld.sh	r0,r0[0x0]
8000276a:	26 ec       	sub	r12,110

8000276c <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000276c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002770:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002772:	30 1a       	mov	r10,1
80002774:	fe 69 02 20 	mov	r9,-130528
80002778:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000277a:	e6 18 00 01 	andh	r8,0x1,COH
8000277e:	c0 21       	brne	80002782 <udd_ctrl_init+0x16>
      cpu_irq_enable();
80002780:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002782:	30 29       	mov	r9,2
80002784:	fe 68 01 60 	mov	r8,-130720
80002788:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000278a:	48 59       	lddpc	r9,8000279c <udd_ctrl_init+0x30>
8000278c:	30 08       	mov	r8,0
8000278e:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002790:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002792:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002794:	48 39       	lddpc	r9,800027a0 <udd_ctrl_init+0x34>
80002796:	93 08       	st.w	r9[0x0],r8
}
80002798:	5e fc       	retal	r12
8000279a:	00 00       	add	r0,r0
8000279c:	00 00       	add	r0,r0
8000279e:	0c 98       	mov	r8,r6
800027a0:	00 00       	add	r0,r0
800027a2:	07 1c       	ld.sh	r12,r3++

800027a4 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800027a4:	30 39       	mov	r9,3
800027a6:	48 b8       	lddpc	r8,800027d0 <udd_ctrl_send_zlp_in+0x2c>
800027a8:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027aa:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800027ae:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800027b0:	fe 6a 01 60 	mov	r10,-130720
800027b4:	30 19       	mov	r9,1
800027b6:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800027b8:	fe 68 01 f0 	mov	r8,-130576
800027bc:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800027be:	30 89       	mov	r9,8
800027c0:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027c2:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800027c4:	16 98       	mov	r8,r11
800027c6:	e6 18 00 01 	andh	r8,0x1,COH
800027ca:	c0 21       	brne	800027ce <udd_ctrl_send_zlp_in+0x2a>
      cpu_irq_enable();
800027cc:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800027ce:	5e fc       	retal	r12
800027d0:	00 00       	add	r0,r0
800027d2:	07 1c       	ld.sh	r12,r3++

800027d4 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027d4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027d8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027dc:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027de:	30 1a       	mov	r10,1
800027e0:	fe 69 02 20 	mov	r9,-130528
800027e4:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800027e6:	e6 18 00 01 	andh	r8,0x1,COH
800027ea:	c0 21       	brne	800027ee <udd_ctrl_in_sent+0x1a>
      cpu_irq_enable();
800027ec:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027ee:	4c 68       	lddpc	r8,80002904 <udd_ctrl_in_sent+0x130>
800027f0:	70 08       	ld.w	r8,r8[0x0]
800027f2:	58 38       	cp.w	r8,3
800027f4:	c0 71       	brne	80002802 <udd_ctrl_in_sent+0x2e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027f6:	f0 1f 00 45 	mcall	80002908 <udd_ctrl_in_sent+0x134>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800027fa:	f0 1f 00 45 	mcall	8000290c <udd_ctrl_in_sent+0x138>
		return;
800027fe:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002802:	4c 48       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x13c>
80002804:	90 68       	ld.sh	r8,r8[0xc]
80002806:	4c 49       	lddpc	r9,80002914 <udd_ctrl_in_sent+0x140>
80002808:	92 07       	ld.sh	r7,r9[0x0]
8000280a:	f0 07 01 07 	sub	r7,r8,r7
8000280e:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002810:	c3 e1       	brne	8000288c <udd_ctrl_in_sent+0xb8>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
80002812:	4c 29       	lddpc	r9,80002918 <udd_ctrl_in_sent+0x144>
80002814:	13 8a       	ld.ub	r10,r9[0x0]
80002816:	30 09       	mov	r9,0
80002818:	f2 0a 18 00 	cp.b	r10,r9
8000281c:	c1 51       	brne	80002846 <udd_ctrl_in_sent+0x72>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000281e:	30 49       	mov	r9,4
80002820:	4b 98       	lddpc	r8,80002904 <udd_ctrl_in_sent+0x130>
80002822:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002824:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002828:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
8000282a:	31 08       	mov	r8,16
8000282c:	fe 6a 01 60 	mov	r10,-130720
80002830:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002832:	fe 6a 01 f0 	mov	r10,-130576
80002836:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002838:	12 98       	mov	r8,r9
8000283a:	e6 18 00 01 	andh	r8,0x1,COH
8000283e:	c0 21       	brne	80002842 <udd_ctrl_in_sent+0x6e>
      cpu_irq_enable();
80002840:	d5 03       	csrf	0x10
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002842:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002846:	4b 39       	lddpc	r9,80002910 <udd_ctrl_in_sent+0x13c>
80002848:	92 b9       	ld.uh	r9,r9[0x6]
8000284a:	5c 78       	castu.h	r8
8000284c:	4b 4a       	lddpc	r10,8000291c <udd_ctrl_in_sent+0x148>
8000284e:	94 8a       	ld.uh	r10,r10[0x0]
80002850:	14 08       	add	r8,r10
80002852:	10 39       	cp.w	r9,r8
80002854:	e0 89 00 08 	brgt	80002864 <udd_ctrl_in_sent+0x90>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
80002858:	4a e8       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x13c>
8000285a:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000285c:	58 0c       	cp.w	r12,0
8000285e:	c0 30       	breq	80002864 <udd_ctrl_in_sent+0x90>
80002860:	5d 1c       	icall	r12
80002862:	c0 51       	brne	8000286c <udd_ctrl_in_sent+0x98>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002864:	30 09       	mov	r9,0
80002866:	4a d8       	lddpc	r8,80002918 <udd_ctrl_in_sent+0x144>
80002868:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000286a:	c1 18       	rjmp	8000288c <udd_ctrl_in_sent+0xb8>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000286c:	4a c9       	lddpc	r9,8000291c <udd_ctrl_in_sent+0x148>
8000286e:	4a a8       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x140>
80002870:	90 0b       	ld.sh	r11,r8[0x0]
80002872:	92 0a       	ld.sh	r10,r9[0x0]
80002874:	f6 0a 00 0a 	add	r10,r11,r10
80002878:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
8000287a:	30 09       	mov	r9,0
8000287c:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
8000287e:	4a 58       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x13c>
80002880:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002882:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002886:	5f 09       	sreq	r9
80002888:	4a 48       	lddpc	r8,80002918 <udd_ctrl_in_sent+0x144>
8000288a:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000288c:	4a 18       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x13c>
8000288e:	70 2a       	ld.w	r10,r8[0x8]
80002890:	4a 18       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x140>
80002892:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002894:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002898:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000289a:	fe 68 01 30 	mov	r8,-130768
8000289e:	70 08       	ld.w	r8,r8[0x0]
800028a0:	e2 18 00 02 	andl	r8,0x2,COH
800028a4:	c0 91       	brne	800028b6 <udd_ctrl_in_sent+0xe2>
800028a6:	34 08       	mov	r8,64
800028a8:	f0 07 19 00 	cp.h	r7,r8
800028ac:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028b0:	58 07       	cp.w	r7,0
800028b2:	c0 b1       	brne	800028c8 <udd_ctrl_in_sent+0xf4>
800028b4:	c1 68       	rjmp	800028e0 <udd_ctrl_in_sent+0x10c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800028b6:	e6 1b 00 01 	andh	r11,0x1,COH
800028ba:	c0 21       	brne	800028be <udd_ctrl_in_sent+0xea>
      cpu_irq_enable();
800028bc:	d5 03       	csrf	0x10
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800028be:	30 49       	mov	r9,4
800028c0:	49 18       	lddpc	r8,80002904 <udd_ctrl_in_sent+0x130>
800028c2:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
800028c4:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800028c8:	5c 79       	castu.h	r9
800028ca:	f4 09 00 09 	add	r9,r10,r9
800028ce:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028d2:	13 3a       	ld.ub	r10,r9++
800028d4:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028d6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028da:	ee 0a 19 00 	cp.h	r10,r7
800028de:	cf a3       	brcs	800028d2 <udd_ctrl_in_sent+0xfe>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028e0:	48 d8       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x140>
800028e2:	90 09       	ld.sh	r9,r8[0x0]
800028e4:	f2 07 00 07 	add	r7,r9,r7
800028e8:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028ea:	30 18       	mov	r8,1
800028ec:	fe 69 01 60 	mov	r9,-130720
800028f0:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028f2:	fe 69 01 f0 	mov	r9,-130576
800028f6:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800028f8:	e6 1b 00 01 	andh	r11,0x1,COH
800028fc:	c0 21       	brne	80002900 <udd_ctrl_in_sent+0x12c>
      cpu_irq_enable();
800028fe:	d5 03       	csrf	0x10
   }

	barrier();
80002900:	e3 cd 80 80 	ldm	sp++,r7,pc
80002904:	00 00       	add	r0,r0
80002906:	07 1c       	ld.sh	r12,r3++
80002908:	80 00       	ld.sh	r0,r0[0x0]
8000290a:	25 0c       	sub	r12,80
8000290c:	80 00       	ld.sh	r0,r0[0x0]
8000290e:	27 6c       	sub	r12,118
80002910:	00 00       	add	r0,r0
80002912:	0c 98       	mov	r8,r6
80002914:	00 00       	add	r0,r0
80002916:	07 1a       	ld.sh	r10,r3++
80002918:	00 00       	add	r0,r0
8000291a:	07 20       	ld.uh	r0,r3++
8000291c:	00 00       	add	r0,r0
8000291e:	06 e4       	st.h	--r3,r4

80002920 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002920:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80002924:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
80002928:	30 39       	mov	r9,3
8000292a:	f2 08 18 00 	cp.b	r8,r9
8000292e:	e0 8b 00 88 	brhi	80002a3e <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
80002932:	fe 69 00 00 	mov	r9,-131072
80002936:	72 79       	ld.w	r9,r9[0x1c]
80002938:	30 17       	mov	r7,1
8000293a:	ee 08 09 47 	lsl	r7,r7,r8
8000293e:	ef e9 00 09 	and	r9,r7,r9
80002942:	c7 e1       	brne	80002a3e <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002944:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002948:	58 19       	cp.w	r9,1
8000294a:	c7 a5       	brlt	80002a3e <udd_ep_alloc+0x11e>
8000294c:	58 29       	cp.w	r9,2
8000294e:	e0 8a 00 06 	brle	8000295a <udd_ep_alloc+0x3a>
80002952:	58 39       	cp.w	r9,3
80002954:	c7 51       	brne	80002a3e <udd_ep_alloc+0x11e>
80002956:	30 06       	mov	r6,0
80002958:	c0 28       	rjmp	8000295c <udd_ep_alloc+0x3c>
8000295a:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
8000295c:	f0 09 15 02 	lsl	r9,r8,0x2
80002960:	e0 39 ff 00 	sub	r9,130816
80002964:	72 0e       	ld.w	lr,r9[0x0]
80002966:	5c 7a       	castu.h	r10
80002968:	30 85       	mov	r5,8
8000296a:	f4 05 0c 4a 	max	r10,r10,r5
8000296e:	e0 65 04 00 	mov	r5,1024
80002972:	f4 05 0d 4a 	min	r10,r10,r5
80002976:	a1 7a       	lsl	r10,0x1
80002978:	20 1a       	sub	r10,1
8000297a:	f4 0a 12 00 	clz	r10,r10
8000297e:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80002982:	ab 7b       	lsl	r11,0xb
80002984:	e2 1b 18 00 	andl	r11,0x1800,COH
80002988:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
8000298c:	f4 0b 11 1c 	rsub	r11,r10,28
80002990:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002994:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80002998:	e2 1b 19 7c 	andl	r11,0x197c,COH
8000299c:	1c 9a       	mov	r10,lr
8000299e:	e0 1a e6 83 	andl	r10,0xe683
800029a2:	f7 ea 10 0a 	or	r10,r11,r10
800029a6:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800029a8:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029aa:	30 29       	mov	r9,2
800029ac:	f2 08 18 00 	cp.b	r8,r9
800029b0:	e0 8b 00 1d 	brhi	800029ea <udd_ep_alloc+0xca>
800029b4:	fe 6a 01 0c 	mov	r10,-130804
800029b8:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
800029ba:	fe 6c 00 00 	mov	r12,-131072
800029be:	30 16       	mov	r6,1
800029c0:	78 7e       	ld.w	lr,r12[0x1c]
800029c2:	ec 09 09 4b 	lsl	r11,r6,r9
800029c6:	f7 ee 00 0e 	and	lr,r11,lr
800029ca:	c0 b0       	breq	800029e0 <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
800029cc:	f7 e7 10 07 	or	r7,r11,r7
800029d0:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
800029d2:	78 7e       	ld.w	lr,r12[0x1c]
800029d4:	5c db       	com	r11
800029d6:	1c 6b       	and	r11,lr
800029d8:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029da:	74 0b       	ld.w	r11,r10[0x0]
800029dc:	a1 db       	cbr	r11,0x1
800029de:	95 0b       	st.w	r10[0x0],r11
800029e0:	20 19       	sub	r9,1
800029e2:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029e4:	f2 08 18 00 	cp.b	r8,r9
800029e8:	ce c3       	brcs	800029c0 <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029ea:	0e 9c       	mov	r12,r7
800029ec:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029ee:	fe 6e 00 00 	mov	lr,-131072
800029f2:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029f4:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029f6:	f8 08 08 49 	asr	r9,r12,r8
800029fa:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029fe:	c1 80       	breq	80002a2e <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
80002a00:	f0 0b 15 02 	lsl	r11,r8,0x2
80002a04:	fe 65 01 00 	mov	r5,-130816
80002a08:	f6 05 00 09 	add	r9,r11,r5
80002a0c:	72 05       	ld.w	r5,r9[0x0]
80002a0e:	a1 b5       	sbr	r5,0x1
80002a10:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
80002a12:	7c 75       	ld.w	r5,lr[0x1c]
80002a14:	ec 08 09 4a 	lsl	r10,r6,r8
80002a18:	0a 4a       	or	r10,r5
80002a1a:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
80002a1c:	e0 3b fe d0 	sub	r11,130768
80002a20:	76 0a       	ld.w	r10,r11[0x0]
80002a22:	e6 1a 00 04 	andh	r10,0x4,COH
80002a26:	c0 c0       	breq	80002a3e <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002a28:	72 0a       	ld.w	r10,r9[0x0]
80002a2a:	a9 ba       	sbr	r10,0x9
80002a2c:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002a2e:	2f f8       	sub	r8,-1
80002a30:	5c 58       	castu.b	r8
80002a32:	ee 08 18 00 	cp.b	r8,r7
80002a36:	fe 98 ff e0 	brls	800029f6 <udd_ep_alloc+0xd6>
80002a3a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a3e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a42 <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a42:	fe 68 00 00 	mov	r8,-131072
80002a46:	70 09       	ld.w	r9,r8[0x0]
80002a48:	e0 19 ff 80 	andl	r9,0xff80
80002a4c:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a4e:	70 09       	ld.w	r9,r8[0x0]
80002a50:	a7 b9       	sbr	r9,0x7
80002a52:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a54:	fe 69 01 00 	mov	r9,-130816
80002a58:	72 0b       	ld.w	r11,r9[0x0]
80002a5a:	30 8c       	mov	r12,8
80002a5c:	34 0a       	mov	r10,64
80002a5e:	f4 0c 0c 4a 	max	r10,r10,r12
80002a62:	e0 6c 04 00 	mov	r12,1024
80002a66:	f4 0c 0d 4a 	min	r10,r10,r12
80002a6a:	a1 7a       	lsl	r10,0x1
80002a6c:	20 1a       	sub	r10,1
80002a6e:	f4 0a 12 00 	clz	r10,r10
80002a72:	f4 0a 11 1c 	rsub	r10,r10,28
80002a76:	a5 6a       	lsl	r10,0x4
80002a78:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a7c:	e0 1b e6 83 	andl	r11,0xe683
80002a80:	16 4a       	or	r10,r11
80002a82:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a84:	72 0a       	ld.w	r10,r9[0x0]
80002a86:	a1 ba       	sbr	r10,0x1
80002a88:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a8a:	70 79       	ld.w	r9,r8[0x1c]
80002a8c:	a1 a9       	sbr	r9,0x0
80002a8e:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a90:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a94:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a96:	fe 69 01 f0 	mov	r9,-130576
80002a9a:	30 4b       	mov	r11,4
80002a9c:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a9e:	30 2b       	mov	r11,2
80002aa0:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002aa2:	e0 69 10 00 	mov	r9,4096
80002aa6:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002aa8:	14 98       	mov	r8,r10
80002aaa:	e6 18 00 01 	andh	r8,0x1,COH
80002aae:	c0 21       	brne	80002ab2 <udd_reset_ep_ctrl+0x70>
      cpu_irq_enable();
80002ab0:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002ab2:	5e fc       	retal	r12

80002ab4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002ab4:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ab8:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002abc:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002abe:	30 1c       	mov	r12,1
80002ac0:	f0 1f 00 16 	mcall	80002b18 <udd_attach+0x64>
	otg_unfreeze_clock();
80002ac4:	fe 67 00 00 	mov	r7,-131072
80002ac8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002acc:	af c8       	cbr	r8,0xe
80002ace:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002ad2:	6e 08       	ld.w	r8,r7[0x0]
80002ad4:	a9 c8       	cbr	r8,0x8
80002ad6:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002ad8:	f0 1f 00 11 	mcall	80002b1c <udd_attach+0x68>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002adc:	f0 1f 00 11 	mcall	80002b20 <udd_attach+0x6c>
	udd_ctrl_init();	// Reset endpoint control management
80002ae0:	f0 1f 00 11 	mcall	80002b24 <udd_attach+0x70>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002ae4:	30 8b       	mov	r11,8
80002ae6:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ae8:	30 19       	mov	r9,1
80002aea:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002aec:	31 08       	mov	r8,16
80002aee:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002af0:	30 4a       	mov	r10,4
80002af2:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002af4:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002af6:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002af8:	30 2a       	mov	r10,2
80002afa:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002afc:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002afe:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002b00:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b04:	af a8       	sbr	r8,0xe
80002b06:	ef 48 08 00 	st.w	r7[2048],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002b0a:	e6 16 00 01 	andh	r6,0x1,COH
80002b0e:	c0 21       	brne	80002b12 <udd_attach+0x5e>
      cpu_irq_enable();
80002b10:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002b12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b16:	00 00       	add	r0,r0
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	26 ec       	sub	r12,110
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	3b 00       	mov	r0,-80
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	2a 42       	sub	r2,-92
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	27 6c       	sub	r12,118

80002b28 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002b28:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002b2c:	f0 1f 00 3b 	mcall	80002c18 <udd_enable+0xf0>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b30:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002b34:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002b36:	fe 67 00 00 	mov	r7,-131072
80002b3a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3e:	af d8       	cbr	r8,0xf
80002b40:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b44:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b48:	30 0a       	mov	r10,0
80002b4a:	e0 6b 02 20 	mov	r11,544
80002b4e:	4b 4c       	lddpc	r12,80002c1c <udd_enable+0xf4>
80002b50:	f0 1f 00 34 	mcall	80002c20 <udd_enable+0xf8>
	otg_force_device_mode();
80002b54:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b58:	b9 b8       	sbr	r8,0x19
80002b5a:	ef 48 08 00 	st.w	r7[2048],r8
80002b5e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b62:	b9 c8       	cbr	r8,0x18
80002b64:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b68:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b6c:	ad c8       	cbr	r8,0xc
80002b6e:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b72:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b76:	ad a8       	sbr	r8,0xc
80002b78:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b7c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b80:	af b8       	sbr	r8,0xf
80002b82:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b86:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b8a:	af c8       	cbr	r8,0xe
80002b8c:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b90:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b94:	4a 48       	lddpc	r8,80002c24 <udd_enable+0xfc>
80002b96:	70 0a       	ld.w	r10,r8[0x0]
80002b98:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b9a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b9e:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002ba2:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002ba4:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002ba6:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002baa:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002bae:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002bb0:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002bb2:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002bb6:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002bba:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002bbc:	6e 08       	ld.w	r8,r7[0x0]
80002bbe:	ad c8       	cbr	r8,0xc
80002bc0:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002bc2:	6e 08       	ld.w	r8,r7[0x0]
80002bc4:	e8 18 0c 00 	orl	r8,0xc00
80002bc8:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002bca:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bce:	a1 b8       	sbr	r8,0x1
80002bd0:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002bd4:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bd8:	af a8       	sbr	r8,0xe
80002bda:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002bde:	fe 78 0c 00 	mov	r8,-62464
80002be2:	f0 fa 01 44 	ld.w	r10,r8[324]
80002be6:	30 1b       	mov	r11,1
80002be8:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002bec:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bf0:	48 e8       	lddpc	r8,80002c28 <udd_enable+0x100>
80002bf2:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bf4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bf8:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bfa:	48 d8       	lddpc	r8,80002c2c <udd_enable+0x104>
80002bfc:	11 ba       	ld.ub	r10,r8[0x3]
80002bfe:	2f fa       	sub	r10,-1
80002c00:	b0 ba       	st.b	r8[0x3],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c02:	12 98       	mov	r8,r9
80002c04:	e6 18 00 01 	andh	r8,0x1,COH
80002c08:	c0 21       	brne	80002c0c <udd_enable+0xe4>
      cpu_irq_enable();
80002c0a:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c0c:	e6 16 00 01 	andh	r6,0x1,COH
80002c10:	c0 21       	brne	80002c14 <udd_enable+0xec>
      cpu_irq_enable();
80002c12:	d5 03       	csrf	0x10
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002c14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	33 b4       	mov	r4,59
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	2c 30       	sub	r0,-61
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	22 8c       	sub	r12,40
80002c24:	00 00       	add	r0,r0
80002c26:	06 e8       	st.h	--r3,r8
80002c28:	00 00       	add	r0,r0
80002c2a:	07 18       	ld.sh	r8,r3++
80002c2c:	00 00       	add	r0,r0
80002c2e:	0c b0       	st.h	r6++,r0

80002c30 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002c30:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002c34:	fe 68 00 00 	mov	r8,-131072
80002c38:	70 18       	ld.w	r8,r8[0x4]
80002c3a:	e2 18 00 04 	andl	r8,0x4,COH
80002c3e:	c0 f0       	breq	80002c5c <udd_interrupt+0x2c>
		udd_ack_sof();
80002c40:	fe 68 00 00 	mov	r8,-131072
80002c44:	30 49       	mov	r9,4
80002c46:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c48:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c4c:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c50:	e0 81 02 d4 	brne	800031f8 <udd_interrupt+0x5c8>
		udc_sof_notify();
80002c54:	f0 1f 01 72 	mcall	8000321c <udd_interrupt+0x5ec>
80002c58:	e0 8f 02 d0 	bral	800031f8 <udd_interrupt+0x5c8>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c5c:	fe 68 00 00 	mov	r8,-131072
80002c60:	70 18       	ld.w	r8,r8[0x4]
80002c62:	e2 18 00 02 	andl	r8,0x2,COH
80002c66:	c0 90       	breq	80002c78 <udd_interrupt+0x48>
		udd_ack_msof();
80002c68:	30 29       	mov	r9,2
80002c6a:	fe 68 00 00 	mov	r8,-131072
80002c6e:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c70:	f0 1f 01 6b 	mcall	8000321c <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
80002c74:	e0 8f 02 c2 	bral	800031f8 <udd_interrupt+0x5c8>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c78:	fe 68 00 00 	mov	r8,-131072
80002c7c:	70 18       	ld.w	r8,r8[0x4]
80002c7e:	e2 18 10 00 	andl	r8,0x1000,COH
80002c82:	e0 80 01 76 	breq	80002f6e <udd_interrupt+0x33e>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c86:	fe 68 02 20 	mov	r8,-130528
80002c8a:	31 09       	mov	r9,16
80002c8c:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c8e:	30 89       	mov	r9,8
80002c90:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c92:	fe 68 01 30 	mov	r8,-130768
80002c96:	70 08       	ld.w	r8,r8[0x0]
80002c98:	e2 18 00 04 	andl	r8,0x4,COH
80002c9c:	e0 80 00 8a 	breq	80002db0 <udd_interrupt+0x180>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002ca0:	fe f8 05 80 	ld.w	r8,pc[1408]
80002ca4:	70 08       	ld.w	r8,r8[0x0]
80002ca6:	58 08       	cp.w	r8,0
80002ca8:	c0 50       	breq	80002cb2 <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002caa:	f0 1f 01 5f 	mcall	80003224 <udd_interrupt+0x5f4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002cae:	f0 1f 01 5f 	mcall	80003228 <udd_interrupt+0x5f8>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002cb2:	fe 68 01 30 	mov	r8,-130768
80002cb6:	70 08       	ld.w	r8,r8[0x0]
80002cb8:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002cbc:	58 88       	cp.w	r8,8
80002cbe:	c0 90       	breq	80002cd0 <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002cc0:	f0 1f 01 5b 	mcall	8000322c <udd_interrupt+0x5fc>
		udd_ack_setup_received(0);
80002cc4:	30 49       	mov	r9,4
80002cc6:	fe 68 01 60 	mov	r8,-130720
80002cca:	91 09       	st.w	r8[0x0],r9
80002ccc:	e0 8f 02 96 	bral	800031f8 <udd_interrupt+0x5c8>
80002cd0:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002cd4:	fe fc 05 5c 	ld.w	r12,pc[1372]
80002cd8:	fc 1b 20 00 	movh	r11,0x2000
80002cdc:	f0 0c 00 09 	add	r9,r8,r12
80002ce0:	11 3a       	ld.ub	r10,r8++
80002ce2:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002ce6:	30 8a       	mov	r10,8
80002ce8:	ea 1a e0 00 	orh	r10,0xe000
80002cec:	14 38       	cp.w	r8,r10
80002cee:	cf 71       	brne	80002cdc <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cf0:	fe f8 05 40 	ld.w	r8,pc[1344]
80002cf4:	90 19       	ld.sh	r9,r8[0x2]
80002cf6:	5c c9       	swap.bh	r9
80002cf8:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cfa:	90 29       	ld.sh	r9,r8[0x4]
80002cfc:	5c c9       	swap.bh	r9
80002cfe:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002d00:	90 39       	ld.sh	r9,r8[0x6]
80002d02:	5c c9       	swap.bh	r9
80002d04:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002d06:	f0 1f 01 4c 	mcall	80003234 <udd_interrupt+0x604>
80002d0a:	c0 91       	brne	80002d1c <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002d0c:	f0 1f 01 48 	mcall	8000322c <udd_interrupt+0x5fc>
		udd_ack_setup_received(0);
80002d10:	30 49       	mov	r9,4
80002d12:	fe 68 01 60 	mov	r8,-130720
80002d16:	91 09       	st.w	r8[0x0],r9
80002d18:	e0 8f 02 70 	bral	800031f8 <udd_interrupt+0x5c8>
		return;
	}
	udd_ack_setup_received(0);
80002d1c:	30 49       	mov	r9,4
80002d1e:	fe 68 01 60 	mov	r8,-130720
80002d22:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002d24:	fe f8 05 0c 	ld.w	r8,pc[1292]
80002d28:	11 89       	ld.ub	r9,r8[0x0]
80002d2a:	30 08       	mov	r8,0
80002d2c:	f0 09 18 00 	cp.b	r9,r8
80002d30:	c1 94       	brge	80002d62 <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002d32:	fe f8 04 fe 	ld.w	r8,pc[1278]
80002d36:	90 e8       	ld.uh	r8,r8[0xc]
80002d38:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002d3c:	5f 09       	sreq	r9
80002d3e:	fe f8 04 fa 	ld.w	r8,pc[1274]
80002d42:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d44:	30 08       	mov	r8,0
80002d46:	fe f9 04 f6 	ld.w	r9,pc[1270]
80002d4a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d4c:	fe f9 04 f4 	ld.w	r9,pc[1268]
80002d50:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d52:	30 29       	mov	r9,2
80002d54:	fe f8 04 cc 	ld.w	r8,pc[1228]
80002d58:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d5a:	f0 1f 01 3b 	mcall	80003244 <udd_interrupt+0x614>
80002d5e:	e0 8f 02 4d 	bral	800031f8 <udd_interrupt+0x5c8>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d62:	fe f8 04 ce 	ld.w	r8,pc[1230]
80002d66:	90 39       	ld.sh	r9,r8[0x6]
80002d68:	30 08       	mov	r8,0
80002d6a:	f0 09 19 00 	cp.h	r9,r8
80002d6e:	c0 51       	brne	80002d78 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d70:	f0 1f 01 36 	mcall	80003248 <udd_interrupt+0x618>
80002d74:	e0 8f 02 42 	bral	800031f8 <udd_interrupt+0x5c8>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d78:	30 08       	mov	r8,0
80002d7a:	fe f9 04 c2 	ld.w	r9,pc[1218]
80002d7e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d80:	fe f9 04 c0 	ld.w	r9,pc[1216]
80002d84:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d86:	30 19       	mov	r9,1
80002d88:	fe f8 04 98 	ld.w	r8,pc[1176]
80002d8c:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d8e:	31 08       	mov	r8,16
80002d90:	fe 69 01 60 	mov	r9,-130720
80002d94:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d96:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d9a:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d9c:	fe 6a 01 f0 	mov	r10,-130576
80002da0:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002da2:	12 98       	mov	r8,r9
80002da4:	e6 18 00 01 	andh	r8,0x1,COH
80002da8:	c0 21       	brne	80002dac <udd_interrupt+0x17c>
      cpu_irq_enable();
80002daa:	d5 03       	csrf	0x10
   }

	barrier();
80002dac:	e0 8f 02 26 	bral	800031f8 <udd_interrupt+0x5c8>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002db0:	fe 68 01 30 	mov	r8,-130768
80002db4:	70 08       	ld.w	r8,r8[0x0]
80002db6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002dba:	c0 b0       	breq	80002dd0 <udd_interrupt+0x1a0>
80002dbc:	fe 68 01 c0 	mov	r8,-130624
80002dc0:	70 08       	ld.w	r8,r8[0x0]
80002dc2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002dc6:	c0 50       	breq	80002dd0 <udd_interrupt+0x1a0>
		// IN packet sent
		udd_ctrl_in_sent();
80002dc8:	f0 1f 01 1f 	mcall	80003244 <udd_interrupt+0x614>
80002dcc:	e0 8f 02 16 	bral	800031f8 <udd_interrupt+0x5c8>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002dd0:	fe 68 01 30 	mov	r8,-130768
80002dd4:	70 08       	ld.w	r8,r8[0x0]
80002dd6:	e2 18 00 02 	andl	r8,0x2,COH
80002dda:	e0 80 00 a7 	breq	80002f28 <udd_interrupt+0x2f8>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002dde:	fe f8 04 42 	ld.w	r8,pc[1090]
80002de2:	70 08       	ld.w	r8,r8[0x0]
80002de4:	58 18       	cp.w	r8,1
80002de6:	c1 10       	breq	80002e08 <udd_interrupt+0x1d8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002de8:	58 28       	cp.w	r8,2
80002dea:	5f 09       	sreq	r9
80002dec:	58 48       	cp.w	r8,4
80002dee:	5f 08       	sreq	r8
80002df0:	f3 e8 10 08 	or	r8,r9,r8
80002df4:	c0 40       	breq	80002dfc <udd_interrupt+0x1cc>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002df6:	f0 1f 01 0c 	mcall	80003224 <udd_interrupt+0x5f4>
80002dfa:	c0 38       	rjmp	80002e00 <udd_interrupt+0x1d0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002dfc:	f0 1f 01 0c 	mcall	8000322c <udd_interrupt+0x5fc>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002e00:	f0 1f 01 0a 	mcall	80003228 <udd_interrupt+0x5f8>
80002e04:	e0 8f 01 fa 	bral	800031f8 <udd_interrupt+0x5c8>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002e08:	fe 68 01 30 	mov	r8,-130768
80002e0c:	70 0b       	ld.w	r11,r8[0x0]
80002e0e:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002e12:	fe f8 04 1e 	ld.w	r8,pc[1054]
80002e16:	90 69       	ld.sh	r9,r8[0xc]
80002e18:	fe f8 04 28 	ld.w	r8,pc[1064]
80002e1c:	90 08       	ld.sh	r8,r8[0x0]
80002e1e:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002e22:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002e26:	f6 0a 00 0a 	add	r10,r11,r10
80002e2a:	14 3c       	cp.w	r12,r10
80002e2c:	c0 44       	brge	80002e34 <udd_interrupt+0x204>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002e2e:	10 19       	sub	r9,r8
80002e30:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e34:	fe f9 03 fc 	ld.w	r9,pc[1020]
80002e38:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002e3a:	58 0b       	cp.w	r11,0
80002e3c:	e0 80 01 e5 	breq	80003206 <udd_interrupt+0x5d6>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e40:	5c 78       	castu.h	r8
80002e42:	10 09       	add	r9,r8
80002e44:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002e48:	11 3a       	ld.ub	r10,r8++
80002e4a:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e4c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e50:	f6 0a 19 00 	cp.h	r10,r11
80002e54:	cf a3       	brcs	80002e48 <udd_interrupt+0x218>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e56:	fe f9 03 ea 	ld.w	r9,pc[1002]
80002e5a:	92 08       	ld.sh	r8,r9[0x0]
80002e5c:	16 08       	add	r8,r11
80002e5e:	5c 88       	casts.h	r8
80002e60:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e62:	34 09       	mov	r9,64
80002e64:	f2 0b 19 00 	cp.h	r11,r9
80002e68:	c0 e1       	brne	80002e84 <udd_interrupt+0x254>
80002e6a:	fe f9 03 c6 	ld.w	r9,pc[966]
80002e6e:	92 ba       	ld.uh	r10,r9[0x6]
80002e70:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e74:	fe f9 03 c8 	ld.w	r9,pc[968]
80002e78:	92 89       	ld.uh	r9,r9[0x0]
80002e7a:	f6 09 00 09 	add	r9,r11,r9
80002e7e:	12 3a       	cp.w	r10,r9
80002e80:	e0 89 00 1a 	brgt	80002eb4 <udd_interrupt+0x284>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e84:	fe f9 03 ac 	ld.w	r9,pc[940]
80002e88:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e8a:	72 5c       	ld.w	r12,r9[0x14]
80002e8c:	58 0c       	cp.w	r12,0
80002e8e:	c0 b0       	breq	80002ea4 <udd_interrupt+0x274>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e90:	5d 1c       	icall	r12
80002e92:	c0 91       	brne	80002ea4 <udd_interrupt+0x274>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e94:	f0 1f 00 e6 	mcall	8000322c <udd_interrupt+0x5fc>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e98:	30 29       	mov	r9,2
80002e9a:	fe 68 01 60 	mov	r8,-130720
80002e9e:	91 09       	st.w	r8[0x0],r9
80002ea0:	e0 8f 01 ac 	bral	800031f8 <udd_interrupt+0x5c8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002ea4:	30 29       	mov	r9,2
80002ea6:	fe 68 01 60 	mov	r8,-130720
80002eaa:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002eac:	f0 1f 00 e7 	mcall	80003248 <udd_interrupt+0x618>
80002eb0:	e0 8f 01 a4 	bral	800031f8 <udd_interrupt+0x5c8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002eb4:	fe f9 03 7c 	ld.w	r9,pc[892]
80002eb8:	92 69       	ld.sh	r9,r9[0xc]
80002eba:	f0 09 19 00 	cp.h	r9,r8
80002ebe:	c2 31       	brne	80002f04 <udd_interrupt+0x2d4>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002ec0:	fe f8 03 70 	ld.w	r8,pc[880]
80002ec4:	70 5c       	ld.w	r12,r8[0x14]
80002ec6:	58 0c       	cp.w	r12,0
80002ec8:	c0 91       	brne	80002eda <udd_interrupt+0x2aa>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002eca:	f0 1f 00 d9 	mcall	8000322c <udd_interrupt+0x5fc>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002ece:	30 29       	mov	r9,2
80002ed0:	fe 68 01 60 	mov	r8,-130720
80002ed4:	91 09       	st.w	r8[0x0],r9
80002ed6:	e0 8f 01 91 	bral	800031f8 <udd_interrupt+0x5c8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002eda:	5d 1c       	icall	r12
80002edc:	c0 91       	brne	80002eee <udd_interrupt+0x2be>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002ede:	f0 1f 00 d4 	mcall	8000322c <udd_interrupt+0x5fc>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002ee2:	30 29       	mov	r9,2
80002ee4:	fe 68 01 60 	mov	r8,-130720
80002ee8:	91 09       	st.w	r8[0x0],r9
80002eea:	e0 8f 01 87 	bral	800031f8 <udd_interrupt+0x5c8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002eee:	fe f9 03 4e 	ld.w	r9,pc[846]
80002ef2:	fe f8 03 4e 	ld.w	r8,pc[846]
80002ef6:	90 0b       	ld.sh	r11,r8[0x0]
80002ef8:	92 0a       	ld.sh	r10,r9[0x0]
80002efa:	f6 0a 00 0a 	add	r10,r11,r10
80002efe:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002f00:	30 09       	mov	r9,0
80002f02:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002f04:	fe 69 01 60 	mov	r9,-130720
80002f08:	30 28       	mov	r8,2
80002f0a:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002f0c:	31 08       	mov	r8,16
80002f0e:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f10:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002f14:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002f16:	fe 6a 01 f0 	mov	r10,-130576
80002f1a:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f1c:	12 98       	mov	r8,r9
80002f1e:	e6 18 00 01 	andh	r8,0x1,COH
80002f22:	c0 21       	brne	80002f26 <udd_interrupt+0x2f6>
      cpu_irq_enable();
80002f24:	d5 03       	csrf	0x10
   }

	barrier();
80002f26:	c6 99       	rjmp	800031f8 <udd_interrupt+0x5c8>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002f28:	fe 68 01 30 	mov	r8,-130768
80002f2c:	70 08       	ld.w	r8,r8[0x0]
80002f2e:	e2 18 00 08 	andl	r8,0x8,COH
80002f32:	c1 80       	breq	80002f62 <udd_interrupt+0x332>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002f34:	30 89       	mov	r9,8
80002f36:	fe 68 01 60 	mov	r8,-130720
80002f3a:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002f3c:	fe 68 01 30 	mov	r8,-130768
80002f40:	70 08       	ld.w	r8,r8[0x0]
80002f42:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f46:	e0 81 01 59 	brne	800031f8 <udd_interrupt+0x5c8>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002f4a:	fe f8 02 d6 	ld.w	r8,pc[726]
80002f4e:	70 08       	ld.w	r8,r8[0x0]
80002f50:	58 38       	cp.w	r8,3
80002f52:	e0 81 01 53 	brne	800031f8 <udd_interrupt+0x5c8>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f56:	e8 69 00 00 	mov	r9,524288
80002f5a:	fe 68 01 f0 	mov	r8,-130576
80002f5e:	91 09       	st.w	r8[0x0],r9
80002f60:	c4 c9       	rjmp	800031f8 <udd_interrupt+0x5c8>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f62:	fe 68 01 30 	mov	r8,-130768
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	e2 18 00 10 	andl	r8,0x10,COH
80002f6c:	c0 e1       	brne	80002f88 <udd_interrupt+0x358>
80002f6e:	fe f7 02 de 	ld.w	r7,pc[734]
80002f72:	0e 9a       	mov	r10,r7
80002f74:	fe 69 01 34 	mov	r9,-130764
80002f78:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f7a:	fe 66 00 00 	mov	r6,-131072
80002f7e:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f82:	e0 63 10 00 	mov	r3,4096
80002f86:	c1 e8       	rjmp	80002fc2 <udd_interrupt+0x392>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f88:	31 09       	mov	r9,16
80002f8a:	fe 68 01 60 	mov	r8,-130720
80002f8e:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f90:	fe 68 01 30 	mov	r8,-130768
80002f94:	70 08       	ld.w	r8,r8[0x0]
80002f96:	e2 18 00 02 	andl	r8,0x2,COH
80002f9a:	e0 81 01 2f 	brne	800031f8 <udd_interrupt+0x5c8>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f9e:	fe f8 02 82 	ld.w	r8,pc[642]
80002fa2:	70 08       	ld.w	r8,r8[0x0]
80002fa4:	58 18       	cp.w	r8,1
80002fa6:	c0 41       	brne	80002fae <udd_interrupt+0x37e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002fa8:	f0 1f 00 a8 	mcall	80003248 <udd_interrupt+0x618>
80002fac:	c2 69       	rjmp	800031f8 <udd_interrupt+0x5c8>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002fae:	58 48       	cp.w	r8,4
80002fb0:	e0 81 01 24 	brne	800031f8 <udd_interrupt+0x5c8>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002fb4:	e8 69 00 00 	mov	r9,524288
80002fb8:	fe 68 01 f0 	mov	r8,-130576
80002fbc:	91 09       	st.w	r8[0x0],r9
80002fbe:	c1 d9       	rjmp	800031f8 <udd_interrupt+0x5c8>
80002fc0:	10 9b       	mov	r11,r8
80002fc2:	f6 c8 ff ff 	sub	r8,r11,-1
80002fc6:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002fc8:	6c 45       	ld.w	r5,r6[0x10]
80002fca:	10 9e       	mov	lr,r8
80002fcc:	e8 0b 09 4b 	lsl	r11,r4,r11
80002fd0:	f7 e5 00 05 	and	r5,r11,r5
80002fd4:	c4 a0       	breq	80003068 <udd_interrupt+0x438>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002fd6:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002fd8:	f7 e5 00 05 	and	r5,r11,r5
80002fdc:	c4 60       	breq	80003068 <udd_interrupt+0x438>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002fde:	fe 69 00 00 	mov	r9,-131072
80002fe2:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002fe4:	74 09       	ld.w	r9,r10[0x0]
80002fe6:	e6 19 20 00 	andh	r9,0x2000,COH
80002fea:	c0 50       	breq	80002ff4 <udd_interrupt+0x3c4>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002fec:	fe 69 00 00 	mov	r9,-131072
80002ff0:	93 3b       	st.w	r9[0xc],r11
80002ff2:	c0 a8       	rjmp	80003006 <udd_interrupt+0x3d6>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002ff4:	f0 09 15 04 	lsl	r9,r8,0x4
80002ff8:	e0 39 fd 00 	sub	r9,130304
80002ffc:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002ffe:	b1 89       	lsr	r9,0x10
80003000:	74 2a       	ld.w	r10,r10[0x8]
80003002:	12 1a       	sub	r10,r9
80003004:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80003006:	a3 68       	lsl	r8,0x2
80003008:	fe 6b 01 00 	mov	r11,-130816
8000300c:	f0 0b 00 09 	add	r9,r8,r11
80003010:	72 09       	ld.w	r9,r9[0x0]
80003012:	e2 19 01 00 	andl	r9,0x100,COH
80003016:	c2 50       	breq	80003060 <udd_interrupt+0x430>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80003018:	78 09       	ld.w	r9,r12[0x0]
8000301a:	e6 19 40 00 	andh	r9,0x4000,COH
8000301e:	c2 10       	breq	80003060 <udd_interrupt+0x430>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80003020:	fe 6a 01 60 	mov	r10,-130720
80003024:	f0 0a 00 09 	add	r9,r8,r10
80003028:	30 1a       	mov	r10,1
8000302a:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
8000302c:	fe 6b 01 30 	mov	r11,-130768
80003030:	f0 0b 00 09 	add	r9,r8,r11
80003034:	72 09       	ld.w	r9,r9[0x0]
80003036:	e6 19 00 01 	andh	r9,0x1,COH
8000303a:	c0 70       	breq	80003048 <udd_interrupt+0x418>
						udd_raise_in_send(ep);
8000303c:	fe 6a 01 90 	mov	r10,-130672
80003040:	f0 0a 00 09 	add	r9,r8,r10
80003044:	30 1a       	mov	r10,1
80003046:	93 0a       	st.w	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80003048:	e0 38 fe 10 	sub	r8,130576
8000304c:	30 19       	mov	r9,1
8000304e:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003050:	e0 68 10 00 	mov	r8,4096
80003054:	f0 0e 09 4e 	lsl	lr,r8,lr
80003058:	fe 68 00 00 	mov	r8,-131072
8000305c:	91 6e       	st.w	r8[0x18],lr
8000305e:	cc d8       	rjmp	800031f8 <udd_interrupt+0x5c8>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003060:	30 0b       	mov	r11,0
80003062:	f0 1f 00 7c 	mcall	80003250 <udd_interrupt+0x620>
80003066:	cc 98       	rjmp	800031f8 <udd_interrupt+0x5c8>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003068:	6c 4b       	ld.w	r11,r6[0x10]
8000306a:	e6 0e 09 4e 	lsl	lr,r3,lr
8000306e:	fd eb 00 0b 	and	r11,lr,r11
80003072:	c4 60       	breq	800030fe <udd_interrupt+0x4ce>
80003074:	e0 7b fe d0 	mov	r11,130768
80003078:	f2 0b 00 02 	add	r2,r9,r11
8000307c:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003080:	76 05       	ld.w	r5,r11[0x0]
80003082:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003086:	c1 50       	breq	800030b0 <udd_interrupt+0x480>
80003088:	72 05       	ld.w	r5,r9[0x0]
8000308a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000308e:	c1 10       	breq	800030b0 <udd_interrupt+0x480>
				udd_disable_in_send_interrupt(ep);
80003090:	fe 6a 02 20 	mov	r10,-130528
80003094:	e4 0a 00 08 	add	r8,r2,r10
80003098:	30 19       	mov	r9,1
8000309a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000309c:	e0 32 fe a0 	sub	r2,130720
800030a0:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
800030a2:	e0 69 40 00 	mov	r9,16384
800030a6:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
800030a8:	30 0b       	mov	r11,0
800030aa:	f0 1f 00 6a 	mcall	80003250 <udd_interrupt+0x620>
800030ae:	ca 58       	rjmp	800031f8 <udd_interrupt+0x5c8>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
800030b0:	76 0b       	ld.w	r11,r11[0x0]
800030b2:	e2 1b 10 00 	andl	r11,0x1000,COH
800030b6:	c2 40       	breq	800030fe <udd_interrupt+0x4ce>
800030b8:	72 0b       	ld.w	r11,r9[0x0]
800030ba:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
800030be:	c2 01       	brne	800030fe <udd_interrupt+0x4ce>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
800030c0:	fe 69 02 20 	mov	r9,-130528
800030c4:	e4 09 00 08 	add	r8,r2,r9
800030c8:	e0 69 10 00 	mov	r9,4096
800030cc:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
800030ce:	fe 68 00 00 	mov	r8,-131072
800030d2:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
800030d4:	78 08       	ld.w	r8,r12[0x0]
800030d6:	30 09       	mov	r9,0
800030d8:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
800030dc:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
800030de:	fe 6b 01 00 	mov	r11,-130816
800030e2:	e4 0b 00 08 	add	r8,r2,r11
800030e6:	70 09       	ld.w	r9,r8[0x0]
800030e8:	a9 d9       	cbr	r9,0x9
800030ea:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
800030ec:	e0 32 fe 10 	sub	r2,130576
800030f0:	e8 68 00 00 	mov	r8,524288
800030f4:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030f6:	e4 68 00 00 	mov	r8,262144
800030fa:	85 08       	st.w	r2[0x0],r8
800030fc:	c7 e8       	rjmp	800031f8 <udd_interrupt+0x5c8>
800030fe:	2f 0a       	sub	r10,-16
80003100:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80003102:	58 38       	cp.w	r8,3
80003104:	fe 91 ff 5e 	brne	80002fc0 <udd_interrupt+0x390>
80003108:	c8 38       	rjmp	8000320e <udd_interrupt+0x5de>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
8000310a:	30 89       	mov	r9,8
8000310c:	fe 68 00 00 	mov	r8,-131072
80003110:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80003112:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80003116:	30 15       	mov	r5,1
80003118:	0a 9b       	mov	r11,r5
8000311a:	0e 9c       	mov	r12,r7
8000311c:	f0 1f 00 4d 	mcall	80003250 <udd_interrupt+0x620>
80003120:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80003122:	0c 37       	cp.w	r7,r6
80003124:	cf a1       	brne	80003118 <udd_interrupt+0x4e8>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80003126:	f0 1f 00 4c 	mcall	80003254 <udd_interrupt+0x624>
		// Reset endpoint control
		udd_reset_ep_ctrl();
8000312a:	f0 1f 00 4c 	mcall	80003258 <udd_interrupt+0x628>
		// Reset endpoint control management
		udd_ctrl_init();
8000312e:	f0 1f 00 3f 	mcall	80003228 <udd_interrupt+0x5f8>
		goto udd_interrupt_end;
80003132:	c6 38       	rjmp	800031f8 <udd_interrupt+0x5c8>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80003134:	fe 68 00 00 	mov	r8,-131072
80003138:	70 48       	ld.w	r8,r8[0x10]
8000313a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000313e:	c1 b0       	breq	80003174 <udd_interrupt+0x544>
80003140:	fe 68 00 00 	mov	r8,-131072
80003144:	70 18       	ld.w	r8,r8[0x4]
80003146:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000314a:	c1 50       	breq	80003174 <udd_interrupt+0x544>
		otg_unfreeze_clock();
8000314c:	fe 68 00 00 	mov	r8,-131072
80003150:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003154:	af c9       	cbr	r9,0xe
80003156:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000315a:	30 19       	mov	r9,1
8000315c:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
8000315e:	31 09       	mov	r9,16
80003160:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003162:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003166:	af a9       	sbr	r9,0xe
80003168:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
8000316c:	30 0c       	mov	r12,0
8000316e:	f0 1f 00 3c 	mcall	8000325c <udd_interrupt+0x62c>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003172:	c4 38       	rjmp	800031f8 <udd_interrupt+0x5c8>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003174:	fe 68 00 00 	mov	r8,-131072
80003178:	70 48       	ld.w	r8,r8[0x10]
8000317a:	e2 18 00 10 	andl	r8,0x10,COH
8000317e:	c2 10       	breq	800031c0 <udd_interrupt+0x590>
80003180:	fe 68 00 00 	mov	r8,-131072
80003184:	70 18       	ld.w	r8,r8[0x4]
80003186:	e2 18 00 10 	andl	r8,0x10,COH
8000318a:	c1 b0       	breq	800031c0 <udd_interrupt+0x590>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000318c:	fe 68 00 00 	mov	r8,-131072
80003190:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003194:	af c9       	cbr	r9,0xe
80003196:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000319a:	c0 58       	rjmp	800031a4 <udd_interrupt+0x574>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
8000319c:	70 19       	ld.w	r9,r8[0x4]
8000319e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800031a2:	c0 61       	brne	800031ae <udd_interrupt+0x57e>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
800031a4:	f0 f9 08 04 	ld.w	r9,r8[2052]
800031a8:	e2 19 40 00 	andl	r9,0x4000,COH
800031ac:	cf 80       	breq	8000319c <udd_interrupt+0x56c>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
800031ae:	fe 68 00 00 	mov	r8,-131072
800031b2:	31 09       	mov	r9,16
800031b4:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
800031b6:	30 1c       	mov	r12,1
800031b8:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
800031ba:	f0 1f 00 29 	mcall	8000325c <udd_interrupt+0x62c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
800031be:	c1 d8       	rjmp	800031f8 <udd_interrupt+0x5c8>
	}

	if (Is_udd_vbus_transition()) {
800031c0:	fe 68 00 00 	mov	r8,-131072
800031c4:	f0 f8 08 04 	ld.w	r8,r8[2052]
800031c8:	e2 18 00 02 	andl	r8,0x2,COH
800031cc:	c1 60       	breq	800031f8 <udd_interrupt+0x5c8>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
800031ce:	fe 68 00 00 	mov	r8,-131072
800031d2:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031d6:	af c9       	cbr	r9,0xe
800031d8:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
800031dc:	30 29       	mov	r9,2
800031de:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
800031e2:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031e6:	af a9       	sbr	r9,0xe
800031e8:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
800031ec:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031f0:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031f4:	f0 1f 00 1b 	mcall	80003260 <udd_interrupt+0x630>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031f8:	fe 68 00 00 	mov	r8,-131072
800031fc:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
80003200:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
80003204:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80003206:	48 f9       	lddpc	r9,80003240 <udd_interrupt+0x610>
80003208:	b2 08       	st.h	r9[0x0],r8
8000320a:	fe 9f fe 3d 	bral	80002e84 <udd_interrupt+0x254>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
8000320e:	fe 68 00 00 	mov	r8,-131072
80003212:	70 18       	ld.w	r8,r8[0x4]
80003214:	e2 18 00 08 	andl	r8,0x8,COH
80003218:	c8 e0       	breq	80003134 <udd_interrupt+0x504>
8000321a:	c7 8b       	rjmp	8000310a <udd_interrupt+0x4da>
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	38 e0       	mov	r0,-114
80003220:	00 00       	add	r0,r0
80003222:	07 1c       	ld.sh	r12,r3++
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	25 0c       	sub	r12,80
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	27 6c       	sub	r12,118
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	24 f4       	sub	r4,79
80003230:	00 00       	add	r0,r0
80003232:	0c 98       	mov	r8,r6
80003234:	80 00       	ld.sh	r0,r0[0x0]
80003236:	3b 60       	mov	r0,-74
80003238:	00 00       	add	r0,r0
8000323a:	07 20       	ld.uh	r0,r3++
8000323c:	00 00       	add	r0,r0
8000323e:	06 e4       	st.h	--r3,r4
80003240:	00 00       	add	r0,r0
80003242:	07 1a       	ld.sh	r10,r3++
80003244:	80 00       	ld.sh	r0,r0[0x0]
80003246:	27 d4       	sub	r4,125
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	27 a4       	sub	r4,122
8000324c:	00 00       	add	r0,r0
8000324e:	06 e8       	st.h	--r3,r8
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	25 20       	sub	r0,82
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	3b 00       	mov	r0,-80
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	2a 42       	sub	r2,-92
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	26 ec       	sub	r12,110
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	40 60       	lddsp	r0,sp[0x18]

80003264 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003264:	48 dd       	lddpc	sp,80003298 <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
80003266:	fe c0 de 66 	sub	r0,pc,-8602
  mtsr    AVR32_EVBA, r0
8000326a:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8000326e:	d5 53       	csrf	0x15
  lda.w   r1, _edata
80003270:	48 b0       	lddpc	r0,8000329c <udata_clear_loop_end+0x8>
  cp      r0, r1
80003272:	48 c1       	lddpc	r1,800032a0 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
80003274:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
80003276:	c0 62       	brcc	80003282 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
80003278:	48 b2       	lddpc	r2,800032a4 <udata_clear_loop_end+0x10>

8000327a <idata_load_loop>:
  st.d    r0++, r4
8000327a:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8000327c:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8000327e:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003280:	cf d3       	brcs	8000327a <idata_load_loop>

80003282 <idata_load_loop_end>:
  lda.w   r1, _end
80003282:	48 a0       	lddpc	r0,800032a8 <udata_clear_loop_end+0x14>
  cp      r0, r1
80003284:	48 a1       	lddpc	r1,800032ac <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
80003286:	02 30       	cp.w	r0,r1
  mov     r2, 0
80003288:	c0 62       	brcc	80003294 <udata_clear_loop_end>
  mov     r3, 0
8000328a:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8000328c:	30 03       	mov	r3,0

8000328e <udata_clear_loop>:
  cp      r0, r1
8000328e:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
80003290:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003292:	cf e3       	brcs	8000328e <udata_clear_loop>

80003294 <udata_clear_loop_end>:
80003294:	fe cf f0 6c 	sub	pc,pc,-3988
80003298:	00 01       	add	r1,r0
8000329a:	00 00       	add	r0,r0
8000329c:	00 00       	add	r0,r0
8000329e:	00 08       	add	r8,r0
800032a0:	00 00       	add	r0,r0
800032a2:	05 d8       	ld.ub	r8,r2[0x5]
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	57 98       	stdsp	sp[0x1e4],r8
800032a8:	00 00       	add	r0,r0
800032aa:	05 d8       	ld.ub	r8,r2[0x5]
800032ac:	00 00       	add	r0,r0
800032ae:	0c d0       	st.w	--r6,r0

800032b0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800032b0:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032b2:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032b6:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032b8:	fe 78 0c 00 	mov	r8,-62464
800032bc:	e0 6a 03 07 	mov	r10,775
800032c0:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032c2:	70 0a       	ld.w	r10,r8[0x0]
800032c4:	a3 aa       	sbr	r10,0x2
800032c6:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800032c8:	12 98       	mov	r8,r9
800032ca:	e6 18 00 01 	andh	r8,0x1,COH
800032ce:	c0 21       	brne	800032d2 <sysclk_init+0x22>
      cpu_irq_enable();
800032d0:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032d2:	fe 78 0c 00 	mov	r8,-62464
800032d6:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032d8:	e2 19 00 80 	andl	r9,0x80,COH
800032dc:	cf d0       	breq	800032d6 <sysclk_init+0x26>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
800032de:	e0 6c 1b 00 	mov	r12,6912
800032e2:	ea 1c 00 b7 	orh	r12,0xb7
800032e6:	f0 1f 00 11 	mcall	80003328 <sysclk_init+0x78>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032ea:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032ee:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800032f0:	fe 78 0c 00 	mov	r8,-62464
800032f4:	70 0a       	ld.w	r10,r8[0x0]
800032f6:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800032fa:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
800032fc:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800032fe:	12 98       	mov	r8,r9
80003300:	e6 18 00 01 	andh	r8,0x1,COH
80003304:	c0 21       	brne	80003308 <sysclk_init+0x58>
      cpu_irq_enable();
80003306:	d5 03       	csrf	0x10
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
80003308:	fe 78 0c 00 	mov	r8,-62464
8000330c:	e0 79 00 02 	mov	r9,65538
80003310:	91 29       	st.w	r8[0x8],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80003312:	30 b9       	mov	r9,11
80003314:	ea 19 00 18 	orh	r9,0x18
80003318:	91 49       	st.w	r8[0x10],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
8000331a:	30 09       	mov	r9,0
8000331c:	91 59       	st.w	r8[0x14],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
8000331e:	e0 69 0e 03 	mov	r9,3587
80003322:	91 39       	st.w	r8[0xc],r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003324:	d8 02       	popm	pc
80003326:	00 00       	add	r0,r0
80003328:	80 00       	ld.sh	r0,r0[0x0]
8000332a:	20 88       	sub	r8,8

8000332c <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000332c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003330:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003332:	fe 78 0c 00 	mov	r8,-62464
80003336:	71 59       	ld.w	r9,r8[0x54]
80003338:	e2 19 00 40 	andl	r9,0x40,COH
8000333c:	cf d0       	breq	80003336 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000333e:	a3 6c       	lsl	r12,0x2
80003340:	e0 2c f3 f8 	sub	r12,62456
80003344:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80003346:	30 19       	mov	r9,1
80003348:	f2 0b 09 4b 	lsl	r11,r9,r11
8000334c:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000334e:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003350:	14 98       	mov	r8,r10
80003352:	e6 18 00 01 	andh	r8,0x1,COH
80003356:	c0 21       	brne	8000335a <sysclk_priv_enable_module+0x2e>
      cpu_irq_enable();
80003358:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000335a:	5e fc       	retal	r12

8000335c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000335c:	eb cd 40 e0 	pushm	r5-r7,lr
80003360:	18 96       	mov	r6,r12
80003362:	58 9c       	cp.w	r12,9
80003364:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003366:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000336a:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
8000336c:	49 08       	lddpc	r8,800033ac <sysclk_enable_pbb_module+0x50>
8000336e:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003372:	30 08       	mov	r8,0
80003374:	f0 09 18 00 	cp.b	r9,r8
80003378:	c0 a1       	brne	8000338c <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000337a:	ee 0b 15 01 	lsl	r11,r7,0x1
8000337e:	f9 bb 01 06 	movne	r11,6
80003382:	f9 bb 00 02 	moveq	r11,2
80003386:	30 1c       	mov	r12,1
80003388:	f0 1f 00 0a 	mcall	800033b0 <sysclk_enable_pbb_module+0x54>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
8000338c:	48 88       	lddpc	r8,800033ac <sysclk_enable_pbb_module+0x50>
8000338e:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003392:	2f f9       	sub	r9,-1
80003394:	f0 07 0b 09 	st.b	r8[r7],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003398:	e6 15 00 01 	andh	r5,0x1,COH
8000339c:	c0 21       	brne	800033a0 <sysclk_enable_pbb_module+0x44>
      cpu_irq_enable();
8000339e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800033a0:	0c 9b       	mov	r11,r6
800033a2:	30 3c       	mov	r12,3
800033a4:	f0 1f 00 03 	mcall	800033b0 <sysclk_enable_pbb_module+0x54>
}
800033a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800033ac:	00 00       	add	r0,r0
800033ae:	07 24       	ld.uh	r4,r3++
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	33 2c       	mov	r12,50

800033b4 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800033b4:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800033b6:	30 1c       	mov	r12,1
800033b8:	f0 1f 00 11 	mcall	800033fc <sysclk_enable_usb+0x48>
800033bc:	30 3b       	mov	r11,3
800033be:	30 1c       	mov	r12,1
800033c0:	f0 1f 00 10 	mcall	80003400 <sysclk_enable_usb+0x4c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033c4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800033c8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800033ca:	fe 78 0c 00 	mov	r8,-62464
800033ce:	e0 6a 03 07 	mov	r10,775
800033d2:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800033d4:	70 0a       	ld.w	r10,r8[0x0]
800033d6:	a3 aa       	sbr	r10,0x2
800033d8:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800033da:	12 98       	mov	r8,r9
800033dc:	e6 18 00 01 	andh	r8,0x1,COH
800033e0:	c0 21       	brne	800033e4 <sysclk_enable_usb+0x30>
      cpu_irq_enable();
800033e2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800033e4:	fe 78 0c 00 	mov	r8,-62464
800033e8:	71 59       	ld.w	r9,r8[0x54]
800033ea:	e2 19 00 80 	andl	r9,0x80,COH
800033ee:	cf d0       	breq	800033e8 <sysclk_enable_usb+0x34>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800033f0:	30 49       	mov	r9,4
800033f2:	fe 78 0c 00 	mov	r8,-62464
800033f6:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800033fa:	d8 02       	popm	pc
800033fc:	80 00       	ld.sh	r0,r0[0x0]
800033fe:	33 5c       	mov	r12,53
80003400:	80 00       	ld.sh	r0,r0[0x0]
80003402:	33 2c       	mov	r12,50

80003404 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
80003404:	5e fc       	retal	r12
80003406:	d7 03       	nop

80003408 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
80003408:	49 e8       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
8000340a:	11 88       	ld.ub	r8,r8[0x0]
8000340c:	30 09       	mov	r9,0
8000340e:	f2 08 18 00 	cp.b	r8,r9
80003412:	c1 84       	brge	80003442 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003414:	e2 18 00 60 	andl	r8,0x60,COH
80003418:	e0 48 00 20 	cp.w	r8,32
8000341c:	c3 11       	brne	8000347e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000341e:	49 98       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
80003420:	11 99       	ld.ub	r9,r8[0x1]
80003422:	32 18       	mov	r8,33
80003424:	f0 09 18 00 	cp.b	r9,r8
80003428:	c2 b1       	brne	8000347e <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000342a:	49 68       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
8000342c:	90 39       	ld.sh	r9,r8[0x6]
8000342e:	30 78       	mov	r8,7
80003430:	f0 09 19 00 	cp.h	r9,r8
80003434:	c2 51       	brne	8000347e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
80003436:	49 38       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
80003438:	49 39       	lddpc	r9,80003484 <udi_cdc_comm_setup+0x7c>
8000343a:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000343c:	30 79       	mov	r9,7
8000343e:	b0 69       	st.h	r8[0xc],r9
80003440:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003442:	e2 18 00 60 	andl	r8,0x60,COH
80003446:	e0 48 00 20 	cp.w	r8,32
8000344a:	c1 a1       	brne	8000347e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000344c:	48 d8       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
8000344e:	11 98       	ld.ub	r8,r8[0x1]
80003450:	32 09       	mov	r9,32
80003452:	f2 08 18 00 	cp.b	r8,r9
80003456:	c0 60       	breq	80003462 <udi_cdc_comm_setup+0x5a>
80003458:	32 29       	mov	r9,34
8000345a:	f2 08 18 00 	cp.b	r8,r9
8000345e:	c1 01       	brne	8000347e <udi_cdc_comm_setup+0x76>
80003460:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003462:	48 88       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
80003464:	90 39       	ld.sh	r9,r8[0x6]
80003466:	30 78       	mov	r8,7
80003468:	f0 09 19 00 	cp.h	r9,r8
8000346c:	c0 91       	brne	8000347e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
8000346e:	48 58       	lddpc	r8,80003480 <udi_cdc_comm_setup+0x78>
80003470:	48 69       	lddpc	r9,80003488 <udi_cdc_comm_setup+0x80>
80003472:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003474:	48 49       	lddpc	r9,80003484 <udi_cdc_comm_setup+0x7c>
80003476:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003478:	30 79       	mov	r9,7
8000347a:	b0 69       	st.h	r8[0xc],r9
8000347c:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
8000347e:	5e fd       	retal	0
80003480:	00 00       	add	r0,r0
80003482:	0c 98       	mov	r8,r6
80003484:	00 00       	add	r0,r0
80003486:	07 28       	ld.uh	r8,r3++
80003488:	80 00       	ld.sh	r0,r0[0x0]
8000348a:	34 90       	mov	r0,73

8000348c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
8000348c:	5e fd       	retal	0

8000348e <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
8000348e:	5e fd       	retal	0

80003490 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003490:	5e fc       	retal	r12
80003492:	d7 03       	nop

80003494 <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
80003494:	48 68       	lddpc	r8,800034ac <udi_cdc_is_rx_ready+0x18>
80003496:	11 8a       	ld.ub	r10,r8[0x0]
80003498:	48 68       	lddpc	r8,800034b0 <udi_cdc_is_rx_ready+0x1c>
8000349a:	90 08       	ld.sh	r8,r8[0x0]
8000349c:	48 69       	lddpc	r9,800034b4 <udi_cdc_is_rx_ready+0x20>
8000349e:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
800034a2:	f0 09 19 00 	cp.h	r9,r8
}
800034a6:	5f bc       	srhi	r12
800034a8:	5e fc       	retal	r12
800034aa:	00 00       	add	r0,r0
800034ac:	00 00       	add	r0,r0
800034ae:	09 bc       	ld.ub	r12,r4[0x3]
800034b0:	00 00       	add	r0,r0
800034b2:	09 b8       	ld.ub	r8,r4[0x3]
800034b4:	00 00       	add	r0,r0
800034b6:	09 b4       	ld.ub	r4,r4[0x3]

800034b8 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
800034b8:	49 78       	lddpc	r8,80003514 <udi_cdc_is_tx_ready+0x5c>
800034ba:	11 89       	ld.ub	r9,r8[0x0]
800034bc:	49 78       	lddpc	r8,80003518 <udi_cdc_is_tx_ready+0x60>
800034be:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800034c2:	e0 68 01 40 	mov	r8,320
800034c6:	f0 09 19 00 	cp.h	r9,r8
800034ca:	c0 20       	breq	800034ce <udi_cdc_is_tx_ready+0x16>
800034cc:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800034ce:	49 48       	lddpc	r8,8000351c <udi_cdc_is_tx_ready+0x64>
800034d0:	11 88       	ld.ub	r8,r8[0x0]
800034d2:	58 08       	cp.w	r8,0
800034d4:	c1 41       	brne	800034fc <udi_cdc_is_tx_ready+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034d6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800034da:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800034dc:	49 19       	lddpc	r9,80003520 <udi_cdc_is_tx_ready+0x68>
800034de:	13 89       	ld.ub	r9,r9[0x0]
800034e0:	58 09       	cp.w	r9,0
800034e2:	c0 91       	brne	800034f4 <udi_cdc_is_tx_ready+0x3c>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800034e4:	30 1a       	mov	r10,1
800034e6:	48 e9       	lddpc	r9,8000351c <udi_cdc_is_tx_ready+0x64>
800034e8:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800034ea:	48 b9       	lddpc	r9,80003514 <udi_cdc_is_tx_ready+0x5c>
800034ec:	13 8a       	ld.ub	r10,r9[0x0]
800034ee:	58 0a       	cp.w	r10,0
800034f0:	5f 0a       	sreq	r10
800034f2:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800034f4:	e6 18 00 01 	andh	r8,0x1,COH
800034f8:	c0 21       	brne	800034fc <udi_cdc_is_tx_ready+0x44>
      cpu_irq_enable();
800034fa:	d5 03       	csrf	0x10
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800034fc:	48 68       	lddpc	r8,80003514 <udi_cdc_is_tx_ready+0x5c>
800034fe:	11 89       	ld.ub	r9,r8[0x0]
80003500:	48 68       	lddpc	r8,80003518 <udi_cdc_is_tx_ready+0x60>
80003502:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80003506:	e0 68 01 40 	mov	r8,320
8000350a:	f0 09 19 00 	cp.h	r9,r8
8000350e:	5f 1c       	srne	r12
}
80003510:	5e fc       	retal	r12
80003512:	00 00       	add	r0,r0
80003514:	00 00       	add	r0,r0
80003516:	07 2f       	ld.uh	pc,r3++
80003518:	00 00       	add	r0,r0
8000351a:	07 30       	ld.ub	r0,r3++
8000351c:	00 00       	add	r0,r0
8000351e:	0c 41       	or	r1,r6
80003520:	00 00       	add	r0,r0
80003522:	09 be       	ld.ub	lr,r4[0x3]

80003524 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
80003524:	eb cd 40 fe 	pushm	r1-r7,lr
80003528:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000352a:	49 98       	lddpc	r8,8000358c <udi_cdc_putc+0x68>
8000352c:	11 e9       	ld.ub	r9,r8[0x6]
8000352e:	30 98       	mov	r8,9
80003530:	f0 09 18 00 	cp.b	r9,r8
80003534:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003536:	49 76       	lddpc	r6,80003590 <udi_cdc_putc+0x6c>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003538:	49 73       	lddpc	r3,80003594 <udi_cdc_putc+0x70>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000353a:	49 85       	lddpc	r5,80003598 <udi_cdc_putc+0x74>
8000353c:	49 82       	lddpc	r2,8000359c <udi_cdc_putc+0x78>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000353e:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003540:	f0 1f 00 18 	mcall	800035a0 <udi_cdc_putc+0x7c>
80003544:	c0 51       	brne	8000354e <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003546:	0d 88       	ld.ub	r8,r6[0x0]
80003548:	58 08       	cp.w	r8,0
8000354a:	cf b1       	brne	80003540 <udi_cdc_putc+0x1c>
8000354c:	c1 e8       	rjmp	80003588 <udi_cdc_putc+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000354e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003552:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003554:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003556:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
8000355a:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
8000355e:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80003562:	a7 6b       	lsl	r11,0x6
80003564:	18 0b       	add	r11,r12
80003566:	e4 0b 0b 07 	st.b	r2[r11],r7
8000356a:	2f f9       	sub	r9,-1
8000356c:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003570:	14 98       	mov	r8,r10
80003572:	e6 18 00 01 	andh	r8,0x1,COH
80003576:	c0 21       	brne	8000357a <udi_cdc_putc+0x56>
      cpu_irq_enable();
80003578:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (b_databit_9) {
8000357a:	58 04       	cp.w	r4,0
8000357c:	c0 31       	brne	80003582 <udi_cdc_putc+0x5e>
8000357e:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003582:	a9 47       	asr	r7,0x8
80003584:	02 94       	mov	r4,r1
80003586:	cd db       	rjmp	80003540 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80003588:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000358c:	00 00       	add	r0,r0
8000358e:	07 28       	ld.uh	r8,r3++
80003590:	00 00       	add	r0,r0
80003592:	09 bd       	ld.ub	sp,r4[0x3]
80003594:	00 00       	add	r0,r0
80003596:	07 2f       	ld.uh	pc,r3++
80003598:	00 00       	add	r0,r0
8000359a:	07 30       	ld.ub	r0,r3++
8000359c:	00 00       	add	r0,r0
8000359e:	07 34       	ld.ub	r4,r3++
800035a0:	80 00       	ld.sh	r0,r0[0x0]
800035a2:	34 b8       	mov	r8,75

800035a4 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
800035a4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035a8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035ac:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
800035ae:	49 a9       	lddpc	r9,80003614 <udi_cdc_rx_start+0x70>
800035b0:	13 87       	ld.ub	r7,r9[0x0]
	if (udi_cdc_rx_trans_ongoing ||
800035b2:	49 a9       	lddpc	r9,80003618 <udi_cdc_rx_start+0x74>
800035b4:	13 89       	ld.ub	r9,r9[0x0]
800035b6:	58 09       	cp.w	r9,0
800035b8:	c0 a1       	brne	800035cc <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
800035ba:	49 99       	lddpc	r9,8000361c <udi_cdc_rx_start+0x78>
800035bc:	92 09       	ld.sh	r9,r9[0x0]
800035be:	49 9a       	lddpc	r10,80003620 <udi_cdc_rx_start+0x7c>
800035c0:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
800035c4:	f2 0a 19 00 	cp.h	r10,r9
800035c8:	e0 88 00 08 	brls	800035d8 <udi_cdc_rx_start+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800035cc:	e6 18 00 01 	andh	r8,0x1,COH
800035d0:	c0 21       	brne	800035d4 <udi_cdc_rx_start+0x30>
      cpu_irq_enable();
800035d2:	d5 03       	csrf	0x10
   }

	barrier();
800035d4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800035d8:	30 0a       	mov	r10,0
800035da:	49 19       	lddpc	r9,8000361c <udi_cdc_rx_start+0x78>
800035dc:	b2 0a       	st.h	r9[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800035de:	58 07       	cp.w	r7,0
800035e0:	5f 0a       	sreq	r10
800035e2:	48 d9       	lddpc	r9,80003614 <udi_cdc_rx_start+0x70>
800035e4:	b2 8a       	st.b	r9[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800035e6:	30 1a       	mov	r10,1
800035e8:	48 c9       	lddpc	r9,80003618 <udi_cdc_rx_start+0x74>
800035ea:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800035ec:	e6 18 00 01 	andh	r8,0x1,COH
800035f0:	c0 21       	brne	800035f4 <udi_cdc_rx_start+0x50>
      cpu_irq_enable();
800035f2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800035f4:	f0 1f 00 0c 	mcall	80003624 <udi_cdc_rx_start+0x80>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800035f8:	ee 07 00 27 	add	r7,r7,r7<<0x2
800035fc:	a7 67       	lsl	r7,0x6
800035fe:	48 b8       	lddpc	r8,80003628 <udi_cdc_rx_start+0x84>
80003600:	e0 69 01 40 	mov	r9,320
80003604:	48 aa       	lddpc	r10,8000362c <udi_cdc_rx_start+0x88>
80003606:	0e 0a       	add	r10,r7
80003608:	30 1b       	mov	r11,1
8000360a:	30 2c       	mov	r12,2
8000360c:	f0 1f 00 09 	mcall	80003630 <udi_cdc_rx_start+0x8c>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
80003610:	e3 cd 80 80 	ldm	sp++,r7,pc
80003614:	00 00       	add	r0,r0
80003616:	09 bc       	ld.ub	r12,r4[0x3]
80003618:	00 00       	add	r0,r0
8000361a:	0c 40       	or	r0,r6
8000361c:	00 00       	add	r0,r0
8000361e:	09 b8       	ld.ub	r8,r4[0x3]
80003620:	00 00       	add	r0,r0
80003622:	09 b4       	ld.ub	r4,r4[0x3]
80003624:	80 00       	ld.sh	r0,r0[0x0]
80003626:	34 94       	mov	r4,73
80003628:	80 00       	ld.sh	r0,r0[0x0]
8000362a:	36 b4       	mov	r4,107
8000362c:	00 00       	add	r0,r0
8000362e:	09 c0       	ld.ub	r0,r4[0x4]
80003630:	80 00       	ld.sh	r0,r0[0x0]
80003632:	25 90       	sub	r0,89

80003634 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
80003634:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003636:	49 98       	lddpc	r8,80003698 <udi_cdc_getc+0x64>
80003638:	11 e9       	ld.ub	r9,r8[0x6]
8000363a:	30 98       	mov	r8,9
8000363c:	f0 09 18 00 	cp.b	r9,r8
80003640:	5f 02       	sreq	r2
80003642:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003644:	49 66       	lddpc	r6,8000369c <udi_cdc_getc+0x68>
80003646:	49 77       	lddpc	r7,800036a0 <udi_cdc_getc+0x6c>
80003648:	49 75       	lddpc	r5,800036a4 <udi_cdc_getc+0x70>
		if (!udi_cdc_running) {
8000364a:	49 84       	lddpc	r4,800036a8 <udi_cdc_getc+0x74>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000364c:	49 81       	lddpc	r1,800036ac <udi_cdc_getc+0x78>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000364e:	06 90       	mov	r0,r3
80003650:	c0 48       	rjmp	80003658 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003652:	09 88       	ld.ub	r8,r4[0x0]
80003654:	58 08       	cp.w	r8,0
80003656:	c1 d0       	breq	80003690 <udi_cdc_getc+0x5c>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003658:	0d 89       	ld.ub	r9,r6[0x0]
8000365a:	8e 08       	ld.sh	r8,r7[0x0]
8000365c:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003660:	f0 09 19 00 	cp.h	r9,r8
80003664:	fe 98 ff f7 	brls	80003652 <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003668:	0d 88       	ld.ub	r8,r6[0x0]
8000366a:	8e 09       	ld.sh	r9,r7[0x0]
8000366c:	5c 79       	castu.h	r9
8000366e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003672:	a7 68       	lsl	r8,0x6
80003674:	12 08       	add	r8,r9
80003676:	e2 08 07 08 	ld.ub	r8,r1[r8]
8000367a:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
8000367c:	8e 08       	ld.sh	r8,r7[0x0]
8000367e:	2f f8       	sub	r8,-1
80003680:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
80003682:	f0 1f 00 0c 	mcall	800036b0 <udi_cdc_getc+0x7c>

	if (b_databit_9) {
80003686:	58 02       	cp.w	r2,0
80003688:	c0 50       	breq	80003692 <udi_cdc_getc+0x5e>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000368a:	a9 63       	lsl	r3,0x8
8000368c:	00 92       	mov	r2,r0
8000368e:	ce 5b       	rjmp	80003658 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
80003690:	30 03       	mov	r3,0
	}
	return rx_data;
}
80003692:	06 9c       	mov	r12,r3
80003694:	d8 32       	popm	r0-r7,pc
80003696:	00 00       	add	r0,r0
80003698:	00 00       	add	r0,r0
8000369a:	07 28       	ld.uh	r8,r3++
8000369c:	00 00       	add	r0,r0
8000369e:	09 bc       	ld.ub	r12,r4[0x3]
800036a0:	00 00       	add	r0,r0
800036a2:	09 b8       	ld.ub	r8,r4[0x3]
800036a4:	00 00       	add	r0,r0
800036a6:	09 b4       	ld.ub	r4,r4[0x3]
800036a8:	00 00       	add	r0,r0
800036aa:	09 bd       	ld.ub	sp,r4[0x3]
800036ac:	00 00       	add	r0,r0
800036ae:	09 c0       	ld.ub	r0,r4[0x4]
800036b0:	80 00       	ld.sh	r0,r0[0x0]
800036b2:	35 a4       	mov	r4,90

800036b4 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
800036b4:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
800036b6:	58 0c       	cp.w	r12,0
800036b8:	c1 01       	brne	800036d8 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
800036ba:	48 98       	lddpc	r8,800036dc <udi_cdc_data_recevied+0x28>
800036bc:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
800036be:	58 08       	cp.w	r8,0
800036c0:	f9 b8 01 00 	movne	r8,0
800036c4:	f9 b8 00 02 	moveq	r8,2
800036c8:	48 69       	lddpc	r9,800036e0 <udi_cdc_data_recevied+0x2c>
800036ca:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
800036ce:	30 09       	mov	r9,0
800036d0:	48 58       	lddpc	r8,800036e4 <udi_cdc_data_recevied+0x30>
800036d2:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
800036d4:	f0 1f 00 05 	mcall	800036e8 <udi_cdc_data_recevied+0x34>
800036d8:	d8 02       	popm	pc
800036da:	00 00       	add	r0,r0
800036dc:	00 00       	add	r0,r0
800036de:	09 bc       	ld.ub	r12,r4[0x3]
800036e0:	00 00       	add	r0,r0
800036e2:	09 b4       	ld.ub	r4,r4[0x3]
800036e4:	00 00       	add	r0,r0
800036e6:	0c 40       	or	r0,r6
800036e8:	80 00       	ld.sh	r0,r0[0x0]
800036ea:	35 a4       	mov	r4,90

800036ec <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800036ec:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800036f0:	4a d8       	lddpc	r8,800037a4 <udi_cdc_tx_send+0xb8>
800036f2:	11 88       	ld.ub	r8,r8[0x0]
800036f4:	58 08       	cp.w	r8,0
800036f6:	c5 41       	brne	8000379e <udi_cdc_tx_send+0xb2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800036f8:	f0 1f 00 2c 	mcall	800037a8 <udi_cdc_tx_send+0xbc>
800036fc:	c0 a0       	breq	80003710 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800036fe:	f0 1f 00 2c 	mcall	800037ac <udi_cdc_tx_send+0xc0>
80003702:	4a c8       	lddpc	r8,800037b0 <udi_cdc_tx_send+0xc4>
80003704:	90 08       	ld.sh	r8,r8[0x0]
80003706:	f8 08 19 00 	cp.h	r8,r12
8000370a:	c0 a1       	brne	8000371e <udi_cdc_tx_send+0x32>
8000370c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
80003710:	f0 1f 00 29 	mcall	800037b4 <udi_cdc_tx_send+0xc8>
80003714:	4a 78       	lddpc	r8,800037b0 <udi_cdc_tx_send+0xc4>
80003716:	90 08       	ld.sh	r8,r8[0x0]
80003718:	f8 08 19 00 	cp.h	r8,r12
8000371c:	c4 10       	breq	8000379e <udi_cdc_tx_send+0xb2>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000371e:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003722:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
80003724:	4a 59       	lddpc	r9,800037b8 <udi_cdc_tx_send+0xcc>
80003726:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
80003728:	4a 59       	lddpc	r9,800037bc <udi_cdc_tx_send+0xd0>
8000372a:	13 89       	ld.ub	r9,r9[0x0]
8000372c:	58 09       	cp.w	r9,0
8000372e:	c0 61       	brne	8000373a <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
80003730:	58 07       	cp.w	r7,0
80003732:	5f 0a       	sreq	r10
80003734:	4a 19       	lddpc	r9,800037b8 <udi_cdc_tx_send+0xcc>
80003736:	b2 8a       	st.b	r9[0x0],r10
80003738:	c0 38       	rjmp	8000373e <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000373a:	58 07       	cp.w	r7,0
8000373c:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
8000373e:	30 1a       	mov	r10,1
80003740:	49 99       	lddpc	r9,800037a4 <udi_cdc_tx_send+0xb8>
80003742:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003744:	e6 18 00 01 	andh	r8,0x1,COH
80003748:	c0 21       	brne	8000374c <udi_cdc_tx_send+0x60>
      cpu_irq_enable();
8000374a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
8000374c:	0e 95       	mov	r5,r7
8000374e:	49 d8       	lddpc	r8,800037c0 <udi_cdc_tx_send+0xd4>
80003750:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003754:	e0 68 01 40 	mov	r8,320
80003758:	f0 09 19 00 	cp.h	r9,r8
8000375c:	5f 16       	srne	r6
	if (b_short_packet) {
8000375e:	58 06       	cp.w	r6,0
80003760:	c0 e0       	breq	8000377c <udi_cdc_tx_send+0x90>
		if (udd_is_high_speed()) {
80003762:	f0 1f 00 12 	mcall	800037a8 <udi_cdc_tx_send+0xbc>
80003766:	c0 60       	breq	80003772 <udi_cdc_tx_send+0x86>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
80003768:	f0 1f 00 11 	mcall	800037ac <udi_cdc_tx_send+0xc0>
8000376c:	49 18       	lddpc	r8,800037b0 <udi_cdc_tx_send+0xc4>
8000376e:	b0 0c       	st.h	r8[0x0],r12
80003770:	c0 98       	rjmp	80003782 <udi_cdc_tx_send+0x96>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003772:	f0 1f 00 11 	mcall	800037b4 <udi_cdc_tx_send+0xc8>
80003776:	48 f8       	lddpc	r8,800037b0 <udi_cdc_tx_send+0xc4>
80003778:	b0 0c       	st.h	r8[0x0],r12
8000377a:	c0 48       	rjmp	80003782 <udi_cdc_tx_send+0x96>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
8000377c:	30 09       	mov	r9,0
8000377e:	48 d8       	lddpc	r8,800037b0 <udi_cdc_tx_send+0xc4>
80003780:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003782:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003786:	a7 67       	lsl	r7,0x6
80003788:	48 f8       	lddpc	r8,800037c4 <udi_cdc_tx_send+0xd8>
8000378a:	48 e9       	lddpc	r9,800037c0 <udi_cdc_tx_send+0xd4>
8000378c:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003790:	48 ea       	lddpc	r10,800037c8 <udi_cdc_tx_send+0xdc>
80003792:	0e 0a       	add	r10,r7
80003794:	0c 9b       	mov	r11,r6
80003796:	e0 6c 00 81 	mov	r12,129
8000379a:	f0 1f 00 0d 	mcall	800037cc <udi_cdc_tx_send+0xe0>
8000379e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800037a2:	00 00       	add	r0,r0
800037a4:	00 00       	add	r0,r0
800037a6:	09 be       	ld.ub	lr,r4[0x3]
800037a8:	80 00       	ld.sh	r0,r0[0x0]
800037aa:	23 9a       	sub	r10,57
800037ac:	80 00       	ld.sh	r0,r0[0x0]
800037ae:	23 d6       	sub	r6,61
800037b0:	00 00       	add	r0,r0
800037b2:	09 ba       	ld.ub	r10,r4[0x3]
800037b4:	80 00       	ld.sh	r0,r0[0x0]
800037b6:	23 ca       	sub	r10,60
800037b8:	00 00       	add	r0,r0
800037ba:	07 2f       	ld.uh	pc,r3++
800037bc:	00 00       	add	r0,r0
800037be:	0c 41       	or	r1,r6
800037c0:	00 00       	add	r0,r0
800037c2:	07 30       	ld.ub	r0,r3++
800037c4:	80 00       	ld.sh	r0,r0[0x0]
800037c6:	37 d0       	mov	r0,125
800037c8:	00 00       	add	r0,r0
800037ca:	07 34       	ld.ub	r4,r3++
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	25 90       	sub	r0,89

800037d0 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
800037d0:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
800037d2:	58 0c       	cp.w	r12,0
800037d4:	c1 21       	brne	800037f8 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
800037d6:	48 a8       	lddpc	r8,800037fc <udi_cdc_data_sent+0x2c>
800037d8:	11 88       	ld.ub	r8,r8[0x0]
800037da:	58 08       	cp.w	r8,0
800037dc:	f9 b9 01 00 	movne	r9,0
800037e0:	f9 b9 00 02 	moveq	r9,2
800037e4:	30 08       	mov	r8,0
800037e6:	48 7a       	lddpc	r10,80003800 <udi_cdc_data_sent+0x30>
800037e8:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
800037ec:	48 69       	lddpc	r9,80003804 <udi_cdc_data_sent+0x34>
800037ee:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800037f0:	48 69       	lddpc	r9,80003808 <udi_cdc_data_sent+0x38>
800037f2:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800037f4:	f0 1f 00 06 	mcall	8000380c <udi_cdc_data_sent+0x3c>
800037f8:	d8 02       	popm	pc
800037fa:	00 00       	add	r0,r0
800037fc:	00 00       	add	r0,r0
800037fe:	07 2f       	ld.uh	pc,r3++
80003800:	00 00       	add	r0,r0
80003802:	07 30       	ld.ub	r0,r3++
80003804:	00 00       	add	r0,r0
80003806:	0c 41       	or	r1,r6
80003808:	00 00       	add	r0,r0
8000380a:	09 be       	ld.ub	lr,r4[0x3]
8000380c:	80 00       	ld.sh	r0,r0[0x0]
8000380e:	36 ec       	mov	r12,110

80003810 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
80003810:	d4 01       	pushm	lr
	udi_cdc_tx_send();
80003812:	f0 1f 00 02 	mcall	80003818 <udi_cdc_data_sof_notify+0x8>
}
80003816:	d8 02       	popm	pc
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	36 ec       	mov	r12,110

8000381c <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
8000381c:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
80003820:	30 06       	mov	r6,0
80003822:	48 f8       	lddpc	r8,8000385c <udi_cdc_data_enable+0x40>
80003824:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
80003826:	48 f8       	lddpc	r8,80003860 <udi_cdc_data_enable+0x44>
80003828:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
8000382a:	48 f8       	lddpc	r8,80003864 <udi_cdc_data_enable+0x48>
8000382c:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
8000382e:	48 f8       	lddpc	r8,80003868 <udi_cdc_data_enable+0x4c>
80003830:	30 07       	mov	r7,0
80003832:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
80003834:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
80003836:	48 e8       	lddpc	r8,8000386c <udi_cdc_data_enable+0x50>
80003838:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
8000383a:	f0 1f 00 0e 	mcall	80003870 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
8000383e:	48 e8       	lddpc	r8,80003874 <udi_cdc_data_enable+0x58>
80003840:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
80003842:	48 e8       	lddpc	r8,80003878 <udi_cdc_data_enable+0x5c>
80003844:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
80003846:	48 e8       	lddpc	r8,8000387c <udi_cdc_data_enable+0x60>
80003848:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
8000384a:	48 e8       	lddpc	r8,80003880 <udi_cdc_data_enable+0x64>
8000384c:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
8000384e:	f0 1f 00 0e 	mcall	80003884 <udi_cdc_data_enable+0x68>
80003852:	48 e8       	lddpc	r8,80003888 <udi_cdc_data_enable+0x6c>
80003854:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003856:	11 8c       	ld.ub	r12,r8[0x0]
}
80003858:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000385c:	00 00       	add	r0,r0
8000385e:	09 be       	ld.ub	lr,r4[0x3]
80003860:	00 00       	add	r0,r0
80003862:	0c 41       	or	r1,r6
80003864:	00 00       	add	r0,r0
80003866:	07 2f       	ld.uh	pc,r3++
80003868:	00 00       	add	r0,r0
8000386a:	07 30       	ld.ub	r0,r3++
8000386c:	00 00       	add	r0,r0
8000386e:	09 ba       	ld.ub	r10,r4[0x3]
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	36 ec       	mov	r12,110
80003874:	00 00       	add	r0,r0
80003876:	0c 40       	or	r0,r6
80003878:	00 00       	add	r0,r0
8000387a:	09 bc       	ld.ub	r12,r4[0x3]
8000387c:	00 00       	add	r0,r0
8000387e:	09 b4       	ld.ub	r4,r4[0x3]
80003880:	00 00       	add	r0,r0
80003882:	09 b8       	ld.ub	r8,r4[0x3]
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	35 a4       	mov	r4,90
80003888:	00 00       	add	r0,r0
8000388a:	09 bd       	ld.ub	sp,r4[0x3]

8000388c <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
8000388c:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000388e:	30 09       	mov	r9,0
80003890:	48 38       	lddpc	r8,8000389c <udi_cdc_comm_disable+0x10>
80003892:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003894:	f0 1f 00 03 	mcall	800038a0 <udi_cdc_comm_disable+0x14>
}
80003898:	d8 02       	popm	pc
8000389a:	00 00       	add	r0,r0
8000389c:	00 00       	add	r0,r0
8000389e:	09 bd       	ld.ub	sp,r4[0x3]
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	40 54       	lddsp	r4,sp[0x14]

800038a4 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
800038a4:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
800038a6:	30 0a       	mov	r10,0
800038a8:	48 a8       	lddpc	r8,800038d0 <udi_cdc_comm_enable+0x2c>
800038aa:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
800038ac:	48 a8       	lddpc	r8,800038d4 <udi_cdc_comm_enable+0x30>
800038ae:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
800038b0:	48 a8       	lddpc	r8,800038d8 <udi_cdc_comm_enable+0x34>
800038b2:	30 09       	mov	r9,0
800038b4:	b0 8a       	st.b	r8[0x0],r10
800038b6:	3c 2a       	mov	r10,-62
800038b8:	b0 9a       	st.b	r8[0x1],r10
800038ba:	30 1a       	mov	r10,1
800038bc:	b0 aa       	st.b	r8[0x2],r10
800038be:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
800038c0:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
800038c2:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
800038c4:	30 89       	mov	r9,8
800038c6:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
800038c8:	f0 1f 00 05 	mcall	800038dc <udi_cdc_comm_enable+0x38>
}
800038cc:	d8 02       	popm	pc
800038ce:	00 00       	add	r0,r0
800038d0:	00 00       	add	r0,r0
800038d2:	0c 42       	or	r2,r6
800038d4:	00 00       	add	r0,r0
800038d6:	00 30       	cp.w	r0,r0
800038d8:	00 00       	add	r0,r0
800038da:	07 28       	ld.uh	r8,r3++
800038dc:	80 00       	ld.sh	r0,r0[0x0]
800038de:	40 48       	lddsp	r8,sp[0x10]

800038e0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800038e0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800038e4:	49 18       	lddpc	r8,80003928 <udc_sof_notify+0x48>
800038e6:	11 89       	ld.ub	r9,r8[0x0]
800038e8:	30 08       	mov	r8,0
800038ea:	f0 09 18 00 	cp.b	r9,r8
800038ee:	c1 b0       	breq	80003924 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800038f0:	48 f8       	lddpc	r8,8000392c <udc_sof_notify+0x4c>
800038f2:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800038f4:	70 09       	ld.w	r9,r8[0x0]
800038f6:	13 ca       	ld.ub	r10,r9[0x4]
800038f8:	30 09       	mov	r9,0
800038fa:	f2 0a 18 00 	cp.b	r10,r9
800038fe:	c1 30       	breq	80003924 <udc_sof_notify+0x44>
80003900:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003902:	48 b6       	lddpc	r6,8000392c <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80003904:	70 18       	ld.w	r8,r8[0x4]
80003906:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
8000390a:	70 48       	ld.w	r8,r8[0x10]
8000390c:	58 08       	cp.w	r8,0
8000390e:	c0 20       	breq	80003912 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80003910:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003912:	2f f7       	sub	r7,-1
80003914:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003916:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80003918:	70 09       	ld.w	r9,r8[0x0]
8000391a:	13 c9       	ld.ub	r9,r9[0x4]
8000391c:	ee 09 18 00 	cp.b	r9,r7
80003920:	fe 9b ff f2 	brhi	80003904 <udc_sof_notify+0x24>
80003924:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003928:	00 00       	add	r0,r0
8000392a:	0c 50       	eor	r0,r6
8000392c:	00 00       	add	r0,r0
8000392e:	0c 48       	or	r8,r6

80003930 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003930:	48 78       	lddpc	r8,8000394c <udc_get_eof_conf+0x1c>
80003932:	70 08       	ld.w	r8,r8[0x0]
80003934:	70 08       	ld.w	r8,r8[0x0]
80003936:	11 aa       	ld.ub	r10,r8[0x2]
80003938:	11 b9       	ld.ub	r9,r8[0x3]
8000393a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000393e:	5c c9       	swap.bh	r9
80003940:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80003944:	f0 0c 00 0c 	add	r12,r8,r12
80003948:	5e fc       	retal	r12
8000394a:	00 00       	add	r0,r0
8000394c:	00 00       	add	r0,r0
8000394e:	0c 48       	or	r8,r6

80003950 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003950:	eb cd 40 e0 	pushm	r5-r7,lr
80003954:	18 97       	mov	r7,r12
80003956:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003958:	49 b8       	lddpc	r8,800039c4 <udc_update_iface_desc+0x74>
8000395a:	11 89       	ld.ub	r9,r8[0x0]
8000395c:	30 08       	mov	r8,0
8000395e:	f0 09 18 00 	cp.b	r9,r8
80003962:	c2 f0       	breq	800039c0 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003964:	49 98       	lddpc	r8,800039c8 <udc_update_iface_desc+0x78>
80003966:	70 08       	ld.w	r8,r8[0x0]
80003968:	70 08       	ld.w	r8,r8[0x0]
8000396a:	11 c9       	ld.ub	r9,r8[0x4]
8000396c:	18 9e       	mov	lr,r12
8000396e:	f8 09 18 00 	cp.b	r9,r12
80003972:	e0 88 00 27 	brls	800039c0 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003976:	49 65       	lddpc	r5,800039cc <udc_update_iface_desc+0x7c>
80003978:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000397a:	f0 1f 00 16 	mcall	800039d0 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000397e:	6a 08       	ld.w	r8,r5[0x0]
80003980:	10 3c       	cp.w	r12,r8
80003982:	e0 88 00 1f 	brls	800039c0 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003986:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003988:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000398a:	11 9a       	ld.ub	r10,r8[0x1]
8000398c:	f6 0a 18 00 	cp.b	r10,r11
80003990:	c0 a1       	brne	800039a4 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003992:	11 aa       	ld.ub	r10,r8[0x2]
80003994:	0e 9e       	mov	lr,r7
80003996:	ee 0a 18 00 	cp.b	r10,r7
8000399a:	c0 51       	brne	800039a4 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
8000399c:	11 ba       	ld.ub	r10,r8[0x3]
8000399e:	ec 0a 18 00 	cp.b	r10,r6
800039a2:	c0 b0       	breq	800039b8 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
800039a4:	13 88       	ld.ub	r8,r9[0x0]
800039a6:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800039aa:	10 3c       	cp.w	r12,r8
800039ac:	fe 9b ff ee 	brhi	80003988 <udc_update_iface_desc+0x38>
800039b0:	48 79       	lddpc	r9,800039cc <udc_update_iface_desc+0x7c>
800039b2:	93 08       	st.w	r9[0x0],r8
800039b4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039b8:	48 59       	lddpc	r9,800039cc <udc_update_iface_desc+0x7c>
800039ba:	93 08       	st.w	r9[0x0],r8
800039bc:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800039c0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039c4:	00 00       	add	r0,r0
800039c6:	0c 50       	eor	r0,r6
800039c8:	00 00       	add	r0,r0
800039ca:	0c 48       	or	r8,r6
800039cc:	00 00       	add	r0,r0
800039ce:	0c 54       	eor	r4,r6
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	39 30       	mov	r0,-109

800039d4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800039d4:	eb cd 40 c0 	pushm	r6-r7,lr
800039d8:	18 96       	mov	r6,r12
800039da:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800039dc:	f0 1f 00 11 	mcall	80003a20 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800039e0:	0d 88       	ld.ub	r8,r6[0x0]
800039e2:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800039e4:	0c 3c       	cp.w	r12,r6
800039e6:	e0 88 00 19 	brls	80003a18 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800039ea:	0d 98       	ld.ub	r8,r6[0x1]
800039ec:	30 49       	mov	r9,4
800039ee:	f2 08 18 00 	cp.b	r8,r9
800039f2:	c1 30       	breq	80003a18 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800039f4:	ee 08 18 00 	cp.b	r8,r7
800039f8:	c0 a1       	brne	80003a0c <udc_next_desc_in_iface+0x38>
800039fa:	c1 08       	rjmp	80003a1a <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800039fc:	0d 98       	ld.ub	r8,r6[0x1]
800039fe:	f2 08 18 00 	cp.b	r8,r9
80003a02:	c0 b0       	breq	80003a18 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80003a04:	ee 08 18 00 	cp.b	r8,r7
80003a08:	c0 31       	brne	80003a0e <udc_next_desc_in_iface+0x3a>
80003a0a:	c0 88       	rjmp	80003a1a <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80003a0c:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003a0e:	0d 88       	ld.ub	r8,r6[0x0]
80003a10:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003a12:	0c 3c       	cp.w	r12,r6
80003a14:	fe 9b ff f4 	brhi	800039fc <udc_next_desc_in_iface+0x28>
80003a18:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
80003a1a:	0c 9c       	mov	r12,r6
80003a1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a20:	80 00       	ld.sh	r0,r0[0x0]
80003a22:	39 30       	mov	r0,-109

80003a24 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80003a24:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80003a26:	48 48       	lddpc	r8,80003a34 <udc_valid_address+0x10>
80003a28:	11 bc       	ld.ub	r12,r8[0x3]
80003a2a:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003a2e:	f0 1f 00 03 	mcall	80003a38 <udc_valid_address+0x14>
}
80003a32:	d8 02       	popm	pc
80003a34:	00 00       	add	r0,r0
80003a36:	0c 98       	mov	r8,r6
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	23 9c       	sub	r12,57

80003a3c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80003a3c:	eb cd 40 e0 	pushm	r5-r7,lr
80003a40:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
80003a42:	f0 1f 00 12 	mcall	80003a88 <udc_iface_enable+0x4c>
80003a46:	c1 f0       	breq	80003a84 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003a48:	49 18       	lddpc	r8,80003a8c <udc_iface_enable+0x50>
80003a4a:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003a4c:	30 56       	mov	r6,5
80003a4e:	0c 9b       	mov	r11,r6
80003a50:	0e 9c       	mov	r12,r7
80003a52:	f0 1f 00 10 	mcall	80003a90 <udc_iface_enable+0x54>
80003a56:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003a58:	c0 d0       	breq	80003a72 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003a5a:	19 ca       	ld.ub	r10,r12[0x4]
80003a5c:	19 d8       	ld.ub	r8,r12[0x5]
80003a5e:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80003a62:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003a64:	5c 7a       	castu.h	r10
80003a66:	19 bb       	ld.ub	r11,r12[0x3]
80003a68:	19 ac       	ld.ub	r12,r12[0x2]
80003a6a:	f0 1f 00 0b 	mcall	80003a94 <udc_iface_enable+0x58>
80003a6e:	cf 01       	brne	80003a4e <udc_iface_enable+0x12>
80003a70:	c0 a8       	rjmp	80003a84 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003a72:	48 a8       	lddpc	r8,80003a98 <udc_iface_enable+0x5c>
80003a74:	70 08       	ld.w	r8,r8[0x0]
80003a76:	70 18       	ld.w	r8,r8[0x4]
80003a78:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80003a7c:	70 0c       	ld.w	r12,r8[0x0]
80003a7e:	5d 1c       	icall	r12
80003a80:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003a84:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	39 50       	mov	r0,-107
80003a8c:	00 00       	add	r0,r0
80003a8e:	0c 54       	eor	r4,r6
80003a90:	80 00       	ld.sh	r0,r0[0x0]
80003a92:	39 d4       	mov	r4,-99
80003a94:	80 00       	ld.sh	r0,r0[0x0]
80003a96:	29 20       	sub	r0,-110
80003a98:	00 00       	add	r0,r0
80003a9a:	0c 48       	or	r8,r6

80003a9c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80003a9c:	eb cd 40 e0 	pushm	r5-r7,lr
80003aa0:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003aa2:	18 97       	mov	r7,r12
80003aa4:	30 0b       	mov	r11,0
80003aa6:	f0 1f 00 12 	mcall	80003aec <udc_iface_disable+0x50>
80003aaa:	c1 e0       	breq	80003ae6 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003aac:	49 18       	lddpc	r8,80003af0 <udc_iface_disable+0x54>
80003aae:	70 08       	ld.w	r8,r8[0x0]
80003ab0:	70 18       	ld.w	r8,r8[0x4]
80003ab2:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003ab6:	6a 3c       	ld.w	r12,r5[0xc]
80003ab8:	5d 1c       	icall	r12
80003aba:	18 9b       	mov	r11,r12
80003abc:	0c 9c       	mov	r12,r6
80003abe:	f0 1f 00 0c 	mcall	80003aec <udc_iface_disable+0x50>
80003ac2:	c1 20       	breq	80003ae6 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003ac4:	48 c8       	lddpc	r8,80003af4 <udc_iface_disable+0x58>
80003ac6:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003ac8:	30 56       	mov	r6,5
80003aca:	0c 9b       	mov	r11,r6
80003acc:	0e 9c       	mov	r12,r7
80003ace:	f0 1f 00 0b 	mcall	80003af8 <udc_iface_disable+0x5c>
80003ad2:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003ad4:	c0 50       	breq	80003ade <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003ad6:	19 ac       	ld.ub	r12,r12[0x2]
80003ad8:	f0 1f 00 09 	mcall	80003afc <udc_iface_disable+0x60>
		}
80003adc:	cf 7b       	rjmp	80003aca <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80003ade:	6a 18       	ld.w	r8,r5[0x4]
80003ae0:	5d 18       	icall	r8
80003ae2:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80003ae6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003aea:	00 00       	add	r0,r0
80003aec:	80 00       	ld.sh	r0,r0[0x0]
80003aee:	39 50       	mov	r0,-107
80003af0:	00 00       	add	r0,r0
80003af2:	0c 48       	or	r8,r6
80003af4:	00 00       	add	r0,r0
80003af6:	0c 54       	eor	r4,r6
80003af8:	80 00       	ld.sh	r0,r0[0x0]
80003afa:	39 d4       	mov	r4,-99
80003afc:	80 00       	ld.sh	r0,r0[0x0]
80003afe:	25 60       	sub	r0,86

80003b00 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80003b00:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003b04:	49 38       	lddpc	r8,80003b50 <udc_reset+0x50>
80003b06:	11 89       	ld.ub	r9,r8[0x0]
80003b08:	30 08       	mov	r8,0
80003b0a:	f0 09 18 00 	cp.b	r9,r8
80003b0e:	c1 70       	breq	80003b3c <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003b10:	49 18       	lddpc	r8,80003b54 <udc_reset+0x54>
80003b12:	70 08       	ld.w	r8,r8[0x0]
80003b14:	70 08       	ld.w	r8,r8[0x0]
80003b16:	11 c9       	ld.ub	r9,r8[0x4]
80003b18:	30 08       	mov	r8,0
80003b1a:	f0 09 18 00 	cp.b	r9,r8
80003b1e:	c0 f0       	breq	80003b3c <udc_reset+0x3c>
80003b20:	30 07       	mov	r7,0
80003b22:	48 d6       	lddpc	r6,80003b54 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
80003b24:	0e 9c       	mov	r12,r7
80003b26:	f0 1f 00 0d 	mcall	80003b58 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003b2a:	2f f7       	sub	r7,-1
80003b2c:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003b2e:	6c 08       	ld.w	r8,r6[0x0]
80003b30:	70 08       	ld.w	r8,r8[0x0]
80003b32:	11 c8       	ld.ub	r8,r8[0x4]
80003b34:	ee 08 18 00 	cp.b	r8,r7
80003b38:	fe 9b ff f6 	brhi	80003b24 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003b3c:	30 09       	mov	r9,0
80003b3e:	48 58       	lddpc	r8,80003b50 <udc_reset+0x50>
80003b40:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003b42:	e0 69 01 00 	mov	r9,256
80003b46:	48 68       	lddpc	r8,80003b5c <udc_reset+0x5c>
80003b48:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003b4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003b4e:	00 00       	add	r0,r0
80003b50:	00 00       	add	r0,r0
80003b52:	0c 50       	eor	r0,r6
80003b54:	00 00       	add	r0,r0
80003b56:	0c 48       	or	r8,r6
80003b58:	80 00       	ld.sh	r0,r0[0x0]
80003b5a:	3a 9c       	mov	r12,-87
80003b5c:	00 00       	add	r0,r0
80003b5e:	0c 4e       	or	lr,r6

80003b60 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003b60:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003b64:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003b68:	30 09       	mov	r9,0
80003b6a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003b6c:	30 0a       	mov	r10,0
80003b6e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003b70:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003b72:	11 88       	ld.ub	r8,r8[0x0]
80003b74:	10 9a       	mov	r10,r8
80003b76:	f2 08 18 00 	cp.b	r8,r9
80003b7a:	c0 94       	brge	80003b8c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003b7c:	fe f9 04 24 	ld.w	r9,pc[1060]
80003b80:	92 3b       	ld.sh	r11,r9[0x6]
80003b82:	30 09       	mov	r9,0
80003b84:	f2 0b 19 00 	cp.h	r11,r9
80003b88:	e0 80 02 0a 	breq	80003f9c <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003b8c:	10 99       	mov	r9,r8
80003b8e:	e2 19 00 60 	andl	r9,0x60,COH
80003b92:	e0 81 01 d9 	brne	80003f44 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003b96:	f2 0a 18 00 	cp.b	r10,r9
80003b9a:	e0 84 01 01 	brge	80003d9c <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003b9e:	fe f9 04 02 	ld.w	r9,pc[1026]
80003ba2:	92 39       	ld.sh	r9,r9[0x6]
80003ba4:	58 09       	cp.w	r9,0
80003ba6:	e0 80 01 cf 	breq	80003f44 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003baa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003bae:	e0 81 00 9e 	brne	80003cea <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003bb2:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003bb6:	15 9a       	ld.ub	r10,r10[0x1]
80003bb8:	30 6b       	mov	r11,6
80003bba:	f6 0a 18 00 	cp.b	r10,r11
80003bbe:	c1 a0       	breq	80003bf2 <udc_process_setup+0x92>
80003bc0:	30 8b       	mov	r11,8
80003bc2:	f6 0a 18 00 	cp.b	r10,r11
80003bc6:	e0 80 00 85 	breq	80003cd0 <udc_process_setup+0x170>
80003bca:	30 0b       	mov	r11,0
80003bcc:	f6 0a 18 00 	cp.b	r10,r11
80003bd0:	e0 81 00 8d 	brne	80003cea <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003bd4:	30 28       	mov	r8,2
80003bd6:	f0 09 19 00 	cp.h	r9,r8
80003bda:	c0 40       	breq	80003be2 <udc_process_setup+0x82>
80003bdc:	30 0c       	mov	r12,0
80003bde:	e0 8f 01 af 	bral	80003f3c <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003be2:	30 2b       	mov	r11,2
80003be4:	fe fc 03 c0 	ld.w	r12,pc[960]
80003be8:	f0 1f 00 f0 	mcall	80003fa8 <udc_process_setup+0x448>
80003bec:	30 1c       	mov	r12,1
80003bee:	e0 8f 01 a7 	bral	80003f3c <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003bf2:	fe f8 03 ae 	ld.w	r8,pc[942]
80003bf6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003bf8:	f2 08 16 08 	lsr	r8,r9,0x8
80003bfc:	30 2a       	mov	r10,2
80003bfe:	f4 08 18 00 	cp.b	r8,r10
80003c02:	c1 00       	breq	80003c22 <udc_process_setup+0xc2>
80003c04:	30 3a       	mov	r10,3
80003c06:	f4 08 18 00 	cp.b	r8,r10
80003c0a:	c2 a0       	breq	80003c5e <udc_process_setup+0xfe>
80003c0c:	30 19       	mov	r9,1
80003c0e:	f2 08 18 00 	cp.b	r8,r9
80003c12:	c5 d1       	brne	80003ccc <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003c14:	fe f8 03 98 	ld.w	r8,pc[920]
80003c18:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003c1a:	19 8b       	ld.ub	r11,r12[0x0]
80003c1c:	f0 1f 00 e3 	mcall	80003fa8 <udc_process_setup+0x448>
80003c20:	c4 78       	rjmp	80003cae <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003c22:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003c24:	fe f8 03 88 	ld.w	r8,pc[904]
80003c28:	70 08       	ld.w	r8,r8[0x0]
80003c2a:	f1 38 00 11 	ld.ub	r8,r8[17]
80003c2e:	f2 08 18 00 	cp.b	r8,r9
80003c32:	e0 88 00 4d 	brls	80003ccc <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003c36:	fe f8 03 76 	ld.w	r8,pc[886]
80003c3a:	70 18       	ld.w	r8,r8[0x4]
80003c3c:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003c40:	19 a9       	ld.ub	r9,r12[0x2]
80003c42:	19 b8       	ld.ub	r8,r12[0x3]
80003c44:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003c48:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003c4a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003c4e:	f0 1f 00 d7 	mcall	80003fa8 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003c52:	fe f8 03 4e 	ld.w	r8,pc[846]
80003c56:	70 28       	ld.w	r8,r8[0x8]
80003c58:	30 29       	mov	r9,2
80003c5a:	b0 99       	st.b	r8[0x1],r9
80003c5c:	c2 98       	rjmp	80003cae <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003c5e:	5c 59       	castu.b	r9
80003c60:	58 19       	cp.w	r9,1
80003c62:	c1 00       	breq	80003c82 <udc_process_setup+0x122>
80003c64:	58 29       	cp.w	r9,2
80003c66:	c0 40       	breq	80003c6e <udc_process_setup+0x10e>
80003c68:	58 09       	cp.w	r9,0
80003c6a:	c0 60       	breq	80003c76 <udc_process_setup+0x116>
80003c6c:	c3 08       	rjmp	80003ccc <udc_process_setup+0x16c>
80003c6e:	fe fc 03 42 	ld.w	r12,pc[834]
80003c72:	30 3b       	mov	r11,3
80003c74:	c0 a8       	rjmp	80003c88 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003c76:	30 4b       	mov	r11,4
80003c78:	fe fc 03 3c 	ld.w	r12,pc[828]
80003c7c:	f0 1f 00 cb 	mcall	80003fa8 <udc_process_setup+0x448>
80003c80:	c1 78       	rjmp	80003cae <udc_process_setup+0x14e>
80003c82:	fe fc 03 36 	ld.w	r12,pc[822]
80003c86:	30 9b       	mov	r11,9
80003c88:	fe fa 03 34 	ld.w	r10,pc[820]
80003c8c:	2f ea       	sub	r10,-2
80003c8e:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003c90:	11 39       	ld.ub	r9,r8++
80003c92:	5c c9       	swap.bh	r9
80003c94:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003c96:	f0 0c 01 09 	sub	r9,r8,r12
80003c9a:	f6 09 18 00 	cp.b	r9,r11
80003c9e:	cf 93       	brcs	80003c90 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003ca0:	a1 7b       	lsl	r11,0x1
80003ca2:	2f eb       	sub	r11,-2
80003ca4:	fe fc 03 18 	ld.w	r12,pc[792]
80003ca8:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003caa:	f0 1f 00 c0 	mcall	80003fa8 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003cae:	fe f8 02 f2 	ld.w	r8,pc[754]
80003cb2:	90 39       	ld.sh	r9,r8[0x6]
80003cb4:	90 68       	ld.sh	r8,r8[0xc]
80003cb6:	f2 08 19 00 	cp.h	r8,r9
80003cba:	e0 8b 00 04 	brhi	80003cc2 <udc_process_setup+0x162>
80003cbe:	30 1c       	mov	r12,1
80003cc0:	c3 e9       	rjmp	80003f3c <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003cc2:	fe f8 02 de 	ld.w	r8,pc[734]
80003cc6:	b0 69       	st.h	r8[0xc],r9
80003cc8:	30 1c       	mov	r12,1
80003cca:	c3 99       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003ccc:	30 0c       	mov	r12,0
80003cce:	c3 79       	rjmp	80003f3c <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003cd0:	30 18       	mov	r8,1
80003cd2:	f0 09 19 00 	cp.h	r9,r8
80003cd6:	c0 30       	breq	80003cdc <udc_process_setup+0x17c>
80003cd8:	30 0c       	mov	r12,0
80003cda:	c3 19       	rjmp	80003f3c <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003cdc:	30 1b       	mov	r11,1
80003cde:	fe fc 02 e2 	ld.w	r12,pc[738]
80003ce2:	f0 1f 00 b2 	mcall	80003fa8 <udc_process_setup+0x448>
80003ce6:	30 1c       	mov	r12,1
80003ce8:	c2 a9       	rjmp	80003f3c <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003cea:	58 18       	cp.w	r8,1
80003cec:	c3 61       	brne	80003d58 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003cee:	fe fa 02 b2 	ld.w	r10,pc[690]
80003cf2:	15 9b       	ld.ub	r11,r10[0x1]
80003cf4:	30 aa       	mov	r10,10
80003cf6:	f4 0b 18 00 	cp.b	r11,r10
80003cfa:	c2 f1       	brne	80003d58 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003cfc:	f0 09 19 00 	cp.h	r9,r8
80003d00:	c2 a1       	brne	80003d54 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d02:	fe f8 02 be 	ld.w	r8,pc[702]
80003d06:	11 89       	ld.ub	r9,r8[0x0]
80003d08:	30 08       	mov	r8,0
80003d0a:	f0 09 18 00 	cp.b	r9,r8
80003d0e:	c2 30       	breq	80003d54 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003d10:	fe f8 02 90 	ld.w	r8,pc[656]
80003d14:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003d16:	fe f8 02 ae 	ld.w	r8,pc[686]
80003d1a:	70 08       	ld.w	r8,r8[0x0]
80003d1c:	70 08       	ld.w	r8,r8[0x0]
80003d1e:	11 c8       	ld.ub	r8,r8[0x4]
80003d20:	ee 08 18 00 	cp.b	r8,r7
80003d24:	e0 88 00 18 	brls	80003d54 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003d28:	30 0b       	mov	r11,0
80003d2a:	0e 9c       	mov	r12,r7
80003d2c:	f0 1f 00 a7 	mcall	80003fc8 <udc_process_setup+0x468>
80003d30:	c1 20       	breq	80003d54 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003d32:	fe f8 02 92 	ld.w	r8,pc[658]
80003d36:	70 08       	ld.w	r8,r8[0x0]
80003d38:	70 18       	ld.w	r8,r8[0x4]
80003d3a:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003d3e:	70 3c       	ld.w	r12,r8[0xc]
80003d40:	5d 1c       	icall	r12
80003d42:	fe f8 02 8a 	ld.w	r8,pc[650]
80003d46:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003d48:	30 1b       	mov	r11,1
80003d4a:	10 9c       	mov	r12,r8
80003d4c:	f0 1f 00 97 	mcall	80003fa8 <udc_process_setup+0x448>
80003d50:	30 1c       	mov	r12,1
80003d52:	cf 58       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003d54:	30 0c       	mov	r12,0
80003d56:	cf 38       	rjmp	80003f3c <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003d58:	58 28       	cp.w	r8,2
80003d5a:	e0 81 00 f5 	brne	80003f44 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d5e:	fe f8 02 42 	ld.w	r8,pc[578]
80003d62:	11 9a       	ld.ub	r10,r8[0x1]
80003d64:	30 08       	mov	r8,0
80003d66:	f0 0a 18 00 	cp.b	r10,r8
80003d6a:	e0 81 00 e8 	brne	80003f3a <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003d6e:	30 28       	mov	r8,2
80003d70:	f0 09 19 00 	cp.h	r9,r8
80003d74:	c0 30       	breq	80003d7a <udc_process_setup+0x21a>
80003d76:	30 0c       	mov	r12,0
80003d78:	ce 28       	rjmp	80003f3c <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003d7a:	fe f8 02 26 	ld.w	r8,pc[550]
80003d7e:	11 dc       	ld.ub	r12,r8[0x5]
80003d80:	f0 1f 00 94 	mcall	80003fd0 <udc_process_setup+0x470>
80003d84:	e0 68 01 00 	mov	r8,256
80003d88:	f9 b8 00 00 	moveq	r8,0
80003d8c:	fe fc 02 48 	ld.w	r12,pc[584]
80003d90:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003d92:	30 2b       	mov	r11,2
80003d94:	f0 1f 00 85 	mcall	80003fa8 <udc_process_setup+0x448>
80003d98:	30 1c       	mov	r12,1
80003d9a:	cd 18       	rjmp	80003f3c <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003d9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003da0:	c7 71       	brne	80003e8e <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003da2:	fe f9 01 fe 	ld.w	r9,pc[510]
80003da6:	13 99       	ld.ub	r9,r9[0x1]
80003da8:	30 3a       	mov	r10,3
80003daa:	f4 09 18 00 	cp.b	r9,r10
80003dae:	e0 80 00 c6 	breq	80003f3a <udc_process_setup+0x3da>
80003db2:	e0 8b 00 07 	brhi	80003dc0 <udc_process_setup+0x260>
80003db6:	30 1a       	mov	r10,1
80003db8:	f4 09 18 00 	cp.b	r9,r10
80003dbc:	c6 91       	brne	80003e8e <udc_process_setup+0x32e>
80003dbe:	c1 78       	rjmp	80003dec <udc_process_setup+0x28c>
80003dc0:	30 5a       	mov	r10,5
80003dc2:	f4 09 18 00 	cp.b	r9,r10
80003dc6:	c0 60       	breq	80003dd2 <udc_process_setup+0x272>
80003dc8:	30 9a       	mov	r10,9
80003dca:	f4 09 18 00 	cp.b	r9,r10
80003dce:	c6 01       	brne	80003e8e <udc_process_setup+0x32e>
80003dd0:	c2 28       	rjmp	80003e14 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dd2:	4f 48       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003dd4:	90 39       	ld.sh	r9,r8[0x6]
80003dd6:	30 08       	mov	r8,0
80003dd8:	f0 09 19 00 	cp.h	r9,r8
80003ddc:	c0 30       	breq	80003de2 <udc_process_setup+0x282>
80003dde:	30 0c       	mov	r12,0
80003de0:	ca e8       	rjmp	80003f3c <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003de2:	4f e9       	lddpc	r9,80003fd8 <udc_process_setup+0x478>
80003de4:	4e f8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003de6:	91 49       	st.w	r8[0x10],r9
80003de8:	30 1c       	mov	r12,1
80003dea:	ca 98       	rjmp	80003f3c <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dec:	4e d8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003dee:	90 39       	ld.sh	r9,r8[0x6]
80003df0:	30 08       	mov	r8,0
80003df2:	f0 09 19 00 	cp.h	r9,r8
80003df6:	c0 d1       	brne	80003e10 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003df8:	4e a8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003dfa:	90 19       	ld.sh	r9,r8[0x2]
80003dfc:	30 18       	mov	r8,1
80003dfe:	f0 09 19 00 	cp.h	r9,r8
80003e02:	c0 71       	brne	80003e10 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003e04:	4e 88       	lddpc	r8,80003fa4 <udc_process_setup+0x444>
80003e06:	90 09       	ld.sh	r9,r8[0x0]
80003e08:	a9 d9       	cbr	r9,0x9
80003e0a:	b0 09       	st.h	r8[0x0],r9
80003e0c:	30 1c       	mov	r12,1
80003e0e:	c9 78       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003e10:	30 0c       	mov	r12,0
80003e12:	c9 58       	rjmp	80003f3c <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003e14:	4e 38       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003e16:	90 39       	ld.sh	r9,r8[0x6]
80003e18:	30 08       	mov	r8,0
80003e1a:	f0 09 19 00 	cp.h	r9,r8
80003e1e:	c3 41       	brne	80003e86 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003e20:	f0 1f 00 6f 	mcall	80003fdc <udc_process_setup+0x47c>
80003e24:	c3 10       	breq	80003e86 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003e26:	4d f8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003e28:	11 b9       	ld.ub	r9,r8[0x3]
80003e2a:	4e 18       	lddpc	r8,80003fac <udc_process_setup+0x44c>
80003e2c:	70 08       	ld.w	r8,r8[0x0]
80003e2e:	f1 38 00 11 	ld.ub	r8,r8[17]
80003e32:	10 39       	cp.w	r9,r8
80003e34:	e0 89 00 29 	brgt	80003e86 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003e38:	f0 1f 00 6a 	mcall	80003fe0 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003e3c:	4d 98       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003e3e:	11 b8       	ld.ub	r8,r8[0x3]
80003e40:	4e 09       	lddpc	r9,80003fc0 <udc_process_setup+0x460>
80003e42:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003e44:	58 08       	cp.w	r8,0
80003e46:	c2 20       	breq	80003e8a <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003e48:	20 18       	sub	r8,1
80003e4a:	4d 99       	lddpc	r9,80003fac <udc_process_setup+0x44c>
80003e4c:	72 19       	ld.w	r9,r9[0x4]
80003e4e:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003e52:	4d d9       	lddpc	r9,80003fc4 <udc_process_setup+0x464>
80003e54:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003e56:	70 08       	ld.w	r8,r8[0x0]
80003e58:	11 c9       	ld.ub	r9,r8[0x4]
80003e5a:	30 08       	mov	r8,0
80003e5c:	f0 09 18 00 	cp.b	r9,r8
80003e60:	c1 50       	breq	80003e8a <udc_process_setup+0x32a>
80003e62:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003e64:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003e66:	4d 86       	lddpc	r6,80003fc4 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003e68:	0a 9b       	mov	r11,r5
80003e6a:	0e 9c       	mov	r12,r7
80003e6c:	f0 1f 00 5e 	mcall	80003fe4 <udc_process_setup+0x484>
80003e70:	c0 b0       	breq	80003e86 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003e72:	2f f7       	sub	r7,-1
80003e74:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003e76:	6c 08       	ld.w	r8,r6[0x0]
80003e78:	70 08       	ld.w	r8,r8[0x0]
80003e7a:	11 c8       	ld.ub	r8,r8[0x4]
80003e7c:	ee 08 18 00 	cp.b	r8,r7
80003e80:	fe 9b ff f4 	brhi	80003e68 <udc_process_setup+0x308>
80003e84:	c0 38       	rjmp	80003e8a <udc_process_setup+0x32a>
80003e86:	30 0c       	mov	r12,0
80003e88:	c5 a8       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003e8a:	30 1c       	mov	r12,1
80003e8c:	c5 88       	rjmp	80003f3c <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003e8e:	58 18       	cp.w	r8,1
80003e90:	c2 21       	brne	80003ed4 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003e92:	4c 49       	lddpc	r9,80003fa0 <udc_process_setup+0x440>
80003e94:	13 9a       	ld.ub	r10,r9[0x1]
80003e96:	30 b9       	mov	r9,11
80003e98:	f2 0a 18 00 	cp.b	r10,r9
80003e9c:	c1 c1       	brne	80003ed4 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003e9e:	4c 18       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003ea0:	90 39       	ld.sh	r9,r8[0x6]
80003ea2:	30 08       	mov	r8,0
80003ea4:	f0 09 19 00 	cp.h	r9,r8
80003ea8:	c1 41       	brne	80003ed0 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003eaa:	4c 68       	lddpc	r8,80003fc0 <udc_process_setup+0x460>
80003eac:	11 89       	ld.ub	r9,r8[0x0]
80003eae:	30 08       	mov	r8,0
80003eb0:	f0 09 18 00 	cp.b	r9,r8
80003eb4:	c0 e0       	breq	80003ed0 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003eb6:	4b b8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003eb8:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003eba:	11 d7       	ld.ub	r7,r8[0x5]
80003ebc:	0e 9c       	mov	r12,r7
80003ebe:	f0 1f 00 4b 	mcall	80003fe8 <udc_process_setup+0x488>
80003ec2:	c0 70       	breq	80003ed0 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003ec4:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003ec8:	0e 9c       	mov	r12,r7
80003eca:	f0 1f 00 47 	mcall	80003fe4 <udc_process_setup+0x484>
80003ece:	c3 78       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003ed0:	30 0c       	mov	r12,0
80003ed2:	c3 58       	rjmp	80003f3c <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003ed4:	58 28       	cp.w	r8,2
80003ed6:	c3 71       	brne	80003f44 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003ed8:	4b 28       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003eda:	11 98       	ld.ub	r8,r8[0x1]
80003edc:	30 19       	mov	r9,1
80003ede:	f2 08 18 00 	cp.b	r8,r9
80003ee2:	c0 60       	breq	80003eee <udc_process_setup+0x38e>
80003ee4:	30 39       	mov	r9,3
80003ee6:	f2 08 18 00 	cp.b	r8,r9
80003eea:	c2 81       	brne	80003f3a <udc_process_setup+0x3da>
80003eec:	c1 48       	rjmp	80003f14 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003eee:	4a d8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003ef0:	90 39       	ld.sh	r9,r8[0x6]
80003ef2:	30 08       	mov	r8,0
80003ef4:	f0 09 19 00 	cp.h	r9,r8
80003ef8:	c0 c1       	brne	80003f10 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003efa:	4a a8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003efc:	90 19       	ld.sh	r9,r8[0x2]
80003efe:	30 08       	mov	r8,0
80003f00:	f0 09 19 00 	cp.h	r9,r8
80003f04:	c0 61       	brne	80003f10 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003f06:	4a 78       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003f08:	11 dc       	ld.ub	r12,r8[0x5]
80003f0a:	f0 1f 00 39 	mcall	80003fec <udc_process_setup+0x48c>
80003f0e:	c1 78       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003f10:	30 0c       	mov	r12,0
80003f12:	c1 58       	rjmp	80003f3c <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003f14:	4a 38       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003f16:	90 39       	ld.sh	r9,r8[0x6]
80003f18:	30 08       	mov	r8,0
80003f1a:	f0 09 19 00 	cp.h	r9,r8
80003f1e:	c0 c1       	brne	80003f36 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003f20:	4a 08       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003f22:	90 19       	ld.sh	r9,r8[0x2]
80003f24:	30 08       	mov	r8,0
80003f26:	f0 09 19 00 	cp.h	r9,r8
80003f2a:	c0 61       	brne	80003f36 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003f2c:	49 d8       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003f2e:	11 dc       	ld.ub	r12,r8[0x5]
80003f30:	f0 1f 00 30 	mcall	80003ff0 <udc_process_setup+0x490>
80003f34:	c0 48       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003f36:	30 0c       	mov	r12,0
80003f38:	c0 28       	rjmp	80003f3c <udc_process_setup+0x3dc>
80003f3a:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003f3c:	58 0c       	cp.w	r12,0
80003f3e:	c0 30       	breq	80003f44 <udc_process_setup+0x3e4>
80003f40:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003f44:	49 78       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003f46:	11 88       	ld.ub	r8,r8[0x0]
80003f48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f4c:	58 18       	cp.w	r8,1
80003f4e:	c2 71       	brne	80003f9c <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003f50:	49 c8       	lddpc	r8,80003fc0 <udc_process_setup+0x460>
80003f52:	11 89       	ld.ub	r9,r8[0x0]
80003f54:	30 08       	mov	r8,0
80003f56:	f0 09 18 00 	cp.b	r9,r8
80003f5a:	c2 10       	breq	80003f9c <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003f5c:	49 18       	lddpc	r8,80003fa0 <udc_process_setup+0x440>
80003f5e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003f60:	49 98       	lddpc	r8,80003fc4 <udc_process_setup+0x464>
80003f62:	70 08       	ld.w	r8,r8[0x0]
80003f64:	70 08       	ld.w	r8,r8[0x0]
80003f66:	11 c8       	ld.ub	r8,r8[0x4]
80003f68:	ee 08 18 00 	cp.b	r8,r7
80003f6c:	e0 88 00 18 	brls	80003f9c <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003f70:	0e 96       	mov	r6,r7
80003f72:	30 0b       	mov	r11,0
80003f74:	0e 9c       	mov	r12,r7
80003f76:	f0 1f 00 15 	mcall	80003fc8 <udc_process_setup+0x468>
80003f7a:	c1 10       	breq	80003f9c <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003f7c:	49 28       	lddpc	r8,80003fc4 <udc_process_setup+0x464>
80003f7e:	70 08       	ld.w	r8,r8[0x0]
80003f80:	70 18       	ld.w	r8,r8[0x4]
80003f82:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003f86:	6e 3c       	ld.w	r12,r7[0xc]
80003f88:	5d 1c       	icall	r12
80003f8a:	18 9b       	mov	r11,r12
80003f8c:	0c 9c       	mov	r12,r6
80003f8e:	f0 1f 00 0f 	mcall	80003fc8 <udc_process_setup+0x468>
80003f92:	c0 50       	breq	80003f9c <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003f94:	6e 2c       	ld.w	r12,r7[0x8]
80003f96:	5d 1c       	icall	r12
80003f98:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003f9c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003fa0:	00 00       	add	r0,r0
80003fa2:	0c 98       	mov	r8,r6
80003fa4:	00 00       	add	r0,r0
80003fa6:	0c 4e       	or	lr,r6
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	23 e4       	sub	r4,62
80003fac:	00 00       	add	r0,r0
80003fae:	00 90       	mov	r0,r0
80003fb0:	00 00       	add	r0,r0
80003fb2:	00 ac       	st.w	r0++,r12
80003fb4:	00 00       	add	r0,r0
80003fb6:	00 d0       	st.w	--r0,r0
80003fb8:	00 00       	add	r0,r0
80003fba:	00 b0       	st.h	r0++,r0
80003fbc:	00 00       	add	r0,r0
80003fbe:	00 bc       	st.h	r0++,r12
80003fc0:	00 00       	add	r0,r0
80003fc2:	0c 50       	eor	r0,r6
80003fc4:	00 00       	add	r0,r0
80003fc6:	0c 48       	or	r8,r6
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	39 50       	mov	r0,-107
80003fcc:	00 00       	add	r0,r0
80003fce:	0c 44       	or	r4,r6
80003fd0:	80 00       	ld.sh	r0,r0[0x0]
80003fd2:	23 f0       	sub	r0,63
80003fd4:	00 00       	add	r0,r0
80003fd6:	0c 4c       	or	r12,r6
80003fd8:	80 00       	ld.sh	r0,r0[0x0]
80003fda:	3a 24       	mov	r4,-94
80003fdc:	80 00       	ld.sh	r0,r0[0x0]
80003fde:	23 be       	sub	lr,59
80003fe0:	80 00       	ld.sh	r0,r0[0x0]
80003fe2:	3b 00       	mov	r0,-80
80003fe4:	80 00       	ld.sh	r0,r0[0x0]
80003fe6:	3a 3c       	mov	r12,-93
80003fe8:	80 00       	ld.sh	r0,r0[0x0]
80003fea:	3a 9c       	mov	r12,-87
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	24 80       	sub	r0,72
80003ff0:	80 00       	ld.sh	r0,r0[0x0]
80003ff2:	24 04       	sub	r4,64

80003ff4 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ff4:	eb cd 40 fc 	pushm	r2-r7,lr
80003ff8:	20 1d       	sub	sp,4
80003ffa:	16 94       	mov	r4,r11
80003ffc:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003ffe:	58 0c       	cp.w	r12,0
80004000:	c0 30       	breq	80004006 <_read+0x12>
80004002:	3f f7       	mov	r7,-1
80004004:	c1 98       	rjmp	80004036 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80004006:	58 0a       	cp.w	r10,0
80004008:	e0 89 00 04 	brgt	80004010 <_read+0x1c>
8000400c:	30 07       	mov	r7,0
8000400e:	c1 48       	rjmp	80004036 <_read+0x42>
80004010:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80004012:	48 c3       	lddpc	r3,80004040 <_read+0x4c>
80004014:	48 c6       	lddpc	r6,80004044 <_read+0x50>
80004016:	1a 92       	mov	r2,sp
80004018:	66 0c       	ld.w	r12,r3[0x0]
8000401a:	6c 08       	ld.w	r8,r6[0x0]
8000401c:	1a 9b       	mov	r11,sp
8000401e:	5d 18       	icall	r8
		if (c < 0)
80004020:	40 08       	lddsp	r8,sp[0x0]
80004022:	58 08       	cp.w	r8,0
80004024:	c0 95       	brlt	80004036 <_read+0x42>
		break;
		*ptr++ = c;
80004026:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
8000402a:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
8000402c:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80004030:	58 08       	cp.w	r8,0
80004032:	fe 99 ff f3 	brgt	80004018 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80004036:	0e 9c       	mov	r12,r7
80004038:	2f fd       	sub	sp,-4
8000403a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000403e:	00 00       	add	r0,r0
80004040:	00 00       	add	r0,r0
80004042:	0c c0       	st.b	r6++,r0
80004044:	00 00       	add	r0,r0
80004046:	0c b8       	st.h	r6++,r8

80004048 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80004048:	30 19       	mov	r9,1
8000404a:	48 28       	lddpc	r8,80004050 <stdio_usb_enable+0x8>
8000404c:	b0 89       	st.b	r8[0x0],r9
	return true;
}
8000404e:	5e ff       	retal	1
80004050:	00 00       	add	r0,r0
80004052:	0c 58       	eor	r8,r6

80004054 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80004054:	30 09       	mov	r9,0
80004056:	48 28       	lddpc	r8,8000405c <stdio_usb_disable+0x8>
80004058:	b0 89       	st.b	r8[0x0],r9
}
8000405a:	5e fc       	retal	r12
8000405c:	00 00       	add	r0,r0
8000405e:	0c 58       	eor	r8,r6

80004060 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80004060:	d4 01       	pushm	lr
	if (b_high) {
80004062:	58 0c       	cp.w	r12,0
80004064:	c0 40       	breq	8000406c <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80004066:	f0 1f 00 04 	mcall	80004074 <stdio_usb_vbus_event+0x14>
8000406a:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
8000406c:	f0 1f 00 03 	mcall	80004078 <stdio_usb_vbus_event+0x18>
80004070:	d8 02       	popm	pc
80004072:	00 00       	add	r0,r0
80004074:	80 00       	ld.sh	r0,r0[0x0]
80004076:	2a b4       	sub	r4,-85
80004078:	80 00       	ld.sh	r0,r0[0x0]
8000407a:	27 48       	sub	r8,116

8000407c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
8000407c:	d4 01       	pushm	lr
	stdio_base = usart;
8000407e:	48 98       	lddpc	r8,800040a0 <stdio_usb_init+0x24>
80004080:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80004082:	48 99       	lddpc	r9,800040a4 <stdio_usb_init+0x28>
80004084:	48 98       	lddpc	r8,800040a8 <stdio_usb_init+0x2c>
80004086:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80004088:	48 99       	lddpc	r9,800040ac <stdio_usb_init+0x30>
8000408a:	48 a8       	lddpc	r8,800040b0 <stdio_usb_init+0x34>
8000408c:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
8000408e:	f0 1f 00 0a 	mcall	800040b4 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80004092:	f0 1f 00 0a 	mcall	800040b8 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80004096:	c0 41       	brne	8000409e <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80004098:	30 1c       	mov	r12,1
8000409a:	f0 1f 00 09 	mcall	800040bc <stdio_usb_init+0x40>
8000409e:	d8 02       	popm	pc
800040a0:	00 00       	add	r0,r0
800040a2:	0c c0       	st.b	r6++,r0
800040a4:	80 00       	ld.sh	r0,r0[0x0]
800040a6:	40 ec       	lddsp	r12,sp[0x38]
800040a8:	00 00       	add	r0,r0
800040aa:	0c bc       	st.h	r6++,r12
800040ac:	80 00       	ld.sh	r0,r0[0x0]
800040ae:	40 c0       	lddsp	r0,sp[0x30]
800040b0:	00 00       	add	r0,r0
800040b2:	0c b8       	st.h	r6++,r8
800040b4:	80 00       	ld.sh	r0,r0[0x0]
800040b6:	2b 28       	sub	r8,-78
800040b8:	80 00       	ld.sh	r0,r0[0x0]
800040ba:	23 98       	sub	r8,57
800040bc:	80 00       	ld.sh	r0,r0[0x0]
800040be:	40 60       	lddsp	r0,sp[0x18]

800040c0 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
800040c0:	eb cd 40 80 	pushm	r7,lr
800040c4:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
800040c6:	48 88       	lddpc	r8,800040e4 <stdio_usb_getchar+0x24>
800040c8:	11 89       	ld.ub	r9,r8[0x0]
800040ca:	30 08       	mov	r8,0
800040cc:	f0 09 18 00 	cp.b	r9,r8
800040d0:	c0 51       	brne	800040da <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
800040d2:	30 08       	mov	r8,0
800040d4:	97 08       	st.w	r11[0x0],r8
		return;
800040d6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
800040da:	f0 1f 00 04 	mcall	800040e8 <stdio_usb_getchar+0x28>
800040de:	8f 0c       	st.w	r7[0x0],r12
800040e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800040e4:	00 00       	add	r0,r0
800040e6:	0c 58       	eor	r8,r6
800040e8:	80 00       	ld.sh	r0,r0[0x0]
800040ea:	36 34       	mov	r4,99

800040ec <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
800040ec:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
800040ee:	48 78       	lddpc	r8,80004108 <stdio_usb_putchar+0x1c>
800040f0:	11 89       	ld.ub	r9,r8[0x0]
800040f2:	30 08       	mov	r8,0
800040f4:	f0 09 18 00 	cp.b	r9,r8
800040f8:	c0 60       	breq	80004104 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
800040fa:	16 9c       	mov	r12,r11
800040fc:	f0 1f 00 04 	mcall	8000410c <stdio_usb_putchar+0x20>
80004100:	c0 21       	brne	80004104 <stdio_usb_putchar+0x18>
80004102:	dc 0a       	popm	pc,r12=-1
80004104:	d8 0a       	popm	pc,r12=0
80004106:	00 00       	add	r0,r0
80004108:	00 00       	add	r0,r0
8000410a:	0c 58       	eor	r8,r6
8000410c:	80 00       	ld.sh	r0,r0[0x0]
8000410e:	35 24       	mov	r4,82

80004110 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80004110:	eb cd 40 f8 	pushm	r3-r7,lr
80004114:	16 94       	mov	r4,r11
80004116:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80004118:	20 1c       	sub	r12,1
8000411a:	58 2c       	cp.w	r12,2
8000411c:	e0 8b 00 13 	brhi	80004142 <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80004120:	58 0a       	cp.w	r10,0
80004122:	c0 31       	brne	80004128 <_write+0x18>
80004124:	30 07       	mov	r7,0
80004126:	c0 f8       	rjmp	80004144 <_write+0x34>
80004128:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
8000412a:	48 93       	lddpc	r3,8000414c <_write+0x3c>
8000412c:	48 96       	lddpc	r6,80004150 <_write+0x40>
8000412e:	66 0c       	ld.w	r12,r3[0x0]
80004130:	6c 08       	ld.w	r8,r6[0x0]
80004132:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80004136:	5d 18       	icall	r8
80004138:	c0 55       	brlt	80004142 <_write+0x32>
				return -1;
			}
			++nChars;
8000413a:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
8000413c:	0e 35       	cp.w	r5,r7
8000413e:	cf 81       	brne	8000412e <_write+0x1e>
80004140:	c0 28       	rjmp	80004144 <_write+0x34>
80004142:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80004144:	0e 9c       	mov	r12,r7
80004146:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000414a:	00 00       	add	r0,r0
8000414c:	00 00       	add	r0,r0
8000414e:	0c c0       	st.b	r6++,r0
80004150:	00 00       	add	r0,r0
80004152:	0c bc       	st.h	r6++,r12

80004154 <busy_delay_init>:

//_____ D E C L A R A T I O N S ____________________________________________

void busy_delay_init(unsigned long fcpu_hz)
{
	s_fcpu_hz = fcpu_hz;
80004154:	48 28       	lddpc	r8,8000415c <busy_delay_init+0x8>
80004156:	91 0c       	st.w	r8[0x0],r12
}
80004158:	5e fc       	retal	r12
8000415a:	00 00       	add	r0,r0
8000415c:	00 00       	add	r0,r0
8000415e:	0c 5c       	eor	r12,r6

80004160 <busy_delay_us>:
{
	cpu_delay_ms(delay, s_fcpu_hz);
}

void busy_delay_us(unsigned long delay)
{
80004160:	eb cd 40 c0 	pushm	r6-r7,lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004164:	49 38       	lddpc	r8,800041b0 <busy_delay_us+0x50>
80004166:	70 07       	ld.w	r7,r8[0x0]
80004168:	f8 07 06 46 	mulu.d	r6,r12,r7
8000416c:	ee 78 42 40 	mov	r8,1000000
80004170:	30 09       	mov	r9,0
80004172:	ee 7a 42 3f 	mov	r10,999999
80004176:	30 0b       	mov	r11,0
80004178:	ec 0a 00 0a 	add	r10,r6,r10
8000417c:	ee 0b 00 4b 	adc	r11,r7,r11
80004180:	f0 1f 00 0d 	mcall	800041b4 <busy_delay_us+0x54>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004184:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004188:	f0 0a 00 0a 	add	r10,r8,r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000418c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004190:	14 38       	cp.w	r8,r10
80004192:	e0 88 00 08 	brls	800041a2 <busy_delay_us+0x42>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004196:	12 38       	cp.w	r8,r9
80004198:	fe 98 ff fa 	brls	8000418c <busy_delay_us+0x2c>
8000419c:	12 3a       	cp.w	r10,r9
8000419e:	c0 73       	brcs	800041ac <busy_delay_us+0x4c>
800041a0:	cf 6b       	rjmp	8000418c <busy_delay_us+0x2c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800041a2:	12 38       	cp.w	r8,r9
800041a4:	e0 8b 00 04 	brhi	800041ac <busy_delay_us+0x4c>
800041a8:	12 3a       	cp.w	r10,r9
800041aa:	cf 12       	brcc	8000418c <busy_delay_us+0x2c>
800041ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800041b0:	00 00       	add	r0,r0
800041b2:	0c 5c       	eor	r12,r6
800041b4:	80 00       	ld.sh	r0,r0[0x0]
800041b6:	43 54       	lddsp	r4,sp[0xd4]

800041b8 <init>:
// declare interrupts
__attribute__((__interrupt__)) 
static void interrupt_J3(void);

void init()
{
800041b8:	eb cd 40 80 	pushm	r7,lr
	// board init
	sysclk_init();
800041bc:	f0 1f 00 12 	mcall	80004204 <init+0x4c>
	board_init();
800041c0:	f0 1f 00 12 	mcall	80004208 <init+0x50>
	busy_delay_init(BOARD_OSC0_HZ);
800041c4:	e0 6c 1b 00 	mov	r12,6912
800041c8:	ea 1c 00 b7 	orh	r12,0xb7
800041cc:	f0 1f 00 10 	mcall	8000420c <init+0x54>
	
	// interrupts init
	cpu_irq_disable();
800041d0:	d3 03       	ssrf	0x10
    INTC_init_interrupts();
800041d2:	f0 1f 00 10 	mcall	80004210 <init+0x58>
	INTC_register_interrupt(&interrupt_J3,   AVR32_GPIO_IRQ_3, AVR32_INTC_INT1);
800041d6:	30 1a       	mov	r10,1
800041d8:	34 3b       	mov	r11,67
800041da:	48 fc       	lddpc	r12,80004214 <init+0x5c>
800041dc:	f0 1f 00 0f 	mcall	80004218 <init+0x60>
	cpu_irq_enable();
800041e0:	d5 03       	csrf	0x10

	//  stdio init
	stdio_usb_init(&CONFIG_USART_IF);
800041e2:	fe 7c 1c 00 	mov	r12,-58368
800041e6:	f0 1f 00 0e 	mcall	8000421c <init+0x64>

	// Specify that stdout and stdin should not be buffered.

#if defined(__GNUC__) && defined(__AVR32__)
	setbuf(stdout, NULL);
800041ea:	48 e7       	lddpc	r7,80004220 <init+0x68>
800041ec:	6e 08       	ld.w	r8,r7[0x0]
800041ee:	30 0b       	mov	r11,0
800041f0:	70 1c       	ld.w	r12,r8[0x4]
800041f2:	f0 1f 00 0d 	mcall	80004224 <init+0x6c>
	setbuf(stdin,  NULL);
800041f6:	6e 08       	ld.w	r8,r7[0x0]
800041f8:	30 0b       	mov	r11,0
800041fa:	70 0c       	ld.w	r12,r8[0x0]
800041fc:	f0 1f 00 0a 	mcall	80004224 <init+0x6c>
#endif
}
80004200:	e3 cd 80 80 	ldm	sp++,r7,pc
80004204:	80 00       	ld.sh	r0,r0[0x0]
80004206:	32 b0       	mov	r0,43
80004208:	80 00       	ld.sh	r0,r0[0x0]
8000420a:	20 08       	sub	r8,0
8000420c:	80 00       	ld.sh	r0,r0[0x0]
8000420e:	41 54       	lddsp	r4,sp[0x54]
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	23 0c       	sub	r12,48
80004214:	80 00       	ld.sh	r0,r0[0x0]
80004216:	42 fc       	lddsp	r12,sp[0xbc]
80004218:	80 00       	ld.sh	r0,r0[0x0]
8000421a:	22 8c       	sub	r12,40
8000421c:	80 00       	ld.sh	r0,r0[0x0]
8000421e:	40 7c       	lddsp	r12,sp[0x1c]
80004220:	00 00       	add	r0,r0
80004222:	01 c4       	ld.ub	r4,r0[0x4]
80004224:	80 00       	ld.sh	r0,r0[0x0]
80004226:	45 b8       	lddsp	r8,sp[0x16c]

80004228 <main>:
Functions
*********************************************************************/



int main(){
80004228:	d4 31       	pushm	r0-r7,lr
	init();
8000422a:	f0 1f 00 2c 	mcall	800042d8 <main+0xb0>
	gpio_configure_pin(TEST_A, GPIO_DIR_INPUT);
8000422e:	30 0b       	mov	r11,0
80004230:	31 fc       	mov	r12,31
80004232:	f0 1f 00 2b 	mcall	800042dc <main+0xb4>
	gpio_configure_pin(RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004236:	30 3b       	mov	r11,3
80004238:	31 ec       	mov	r12,30
8000423a:	f0 1f 00 29 	mcall	800042dc <main+0xb4>
	gpio_configure_pin(TEST_B, GPIO_DIR_INPUT);
8000423e:	30 0b       	mov	r11,0
80004240:	31 dc       	mov	r12,29
80004242:	f0 1f 00 27 	mcall	800042dc <main+0xb4>
	gpio_configure_pin(RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004246:	30 3b       	mov	r11,3
80004248:	31 cc       	mov	r12,28
8000424a:	f0 1f 00 25 	mcall	800042dc <main+0xb4>
	gpio_configure_pin(TEST_C, GPIO_DIR_INPUT);
8000424e:	30 0b       	mov	r11,0
80004250:	31 bc       	mov	r12,27
80004252:	f0 1f 00 23 	mcall	800042dc <main+0xb4>
	gpio_configure_pin(RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004256:	30 3b       	mov	r11,3
80004258:	32 0c       	mov	r12,32
8000425a:	f0 1f 00 21 	mcall	800042dc <main+0xb4>
	
	gpio_enable_pin_interrupt(TEST_A, GPIO_FALLING_EDGE );
8000425e:	30 2b       	mov	r11,2
80004260:	31 fc       	mov	r12,31
80004262:	f0 1f 00 20 	mcall	800042e0 <main+0xb8>
	gpio_enable_pin_interrupt(TEST_B, GPIO_FALLING_EDGE );
80004266:	30 2b       	mov	r11,2
80004268:	31 dc       	mov	r12,29
8000426a:	f0 1f 00 1e 	mcall	800042e0 <main+0xb8>
	gpio_enable_pin_interrupt(TEST_C, GPIO_FALLING_EDGE );
8000426e:	30 2b       	mov	r11,2
80004270:	31 bc       	mov	r12,27
80004272:	f0 1f 00 1c 	mcall	800042e0 <main+0xb8>
	
	while(1){
		
			
		if (A){
80004276:	49 c6       	lddpc	r6,800042e4 <main+0xbc>
			A = false;
80004278:	30 04       	mov	r4,0
			gpio_set_pin_low(RESPONSE_A);
8000427a:	31 e2       	mov	r2,30
			busy_delay_us(5);
8000427c:	30 53       	mov	r3,5
			gpio_set_pin_high(RESPONSE_A);
		}
		if (B){
8000427e:	49 b7       	lddpc	r7,800042e8 <main+0xc0>
			B = false;
			gpio_set_pin_low(RESPONSE_B);
80004280:	31 c1       	mov	r1,28
			busy_delay_us(5);
			gpio_set_pin_high(RESPONSE_B);
		}
		if (C){
80004282:	49 b5       	lddpc	r5,800042ec <main+0xc4>
			C = false;
			gpio_set_pin_low(RESPONSE_C);
80004284:	32 00       	mov	r0,32
	gpio_enable_pin_interrupt(TEST_C, GPIO_FALLING_EDGE );
	
	while(1){
		
			
		if (A){
80004286:	0d 88       	ld.ub	r8,r6[0x0]
80004288:	58 08       	cp.w	r8,0
8000428a:	c0 b0       	breq	800042a0 <main+0x78>
			A = false;
8000428c:	ac 84       	st.b	r6[0x0],r4
			gpio_set_pin_low(RESPONSE_A);
8000428e:	04 9c       	mov	r12,r2
80004290:	f0 1f 00 18 	mcall	800042f0 <main+0xc8>
			busy_delay_us(5);
80004294:	06 9c       	mov	r12,r3
80004296:	f0 1f 00 18 	mcall	800042f4 <main+0xcc>
			gpio_set_pin_high(RESPONSE_A);
8000429a:	04 9c       	mov	r12,r2
8000429c:	f0 1f 00 17 	mcall	800042f8 <main+0xd0>
		}
		if (B){
800042a0:	0f 88       	ld.ub	r8,r7[0x0]
800042a2:	58 08       	cp.w	r8,0
800042a4:	c0 b0       	breq	800042ba <main+0x92>
			B = false;
800042a6:	ae 84       	st.b	r7[0x0],r4
			gpio_set_pin_low(RESPONSE_B);
800042a8:	02 9c       	mov	r12,r1
800042aa:	f0 1f 00 12 	mcall	800042f0 <main+0xc8>
			busy_delay_us(5);
800042ae:	06 9c       	mov	r12,r3
800042b0:	f0 1f 00 11 	mcall	800042f4 <main+0xcc>
			gpio_set_pin_high(RESPONSE_B);
800042b4:	02 9c       	mov	r12,r1
800042b6:	f0 1f 00 11 	mcall	800042f8 <main+0xd0>
		}
		if (C){
800042ba:	0b 88       	ld.ub	r8,r5[0x0]
800042bc:	58 08       	cp.w	r8,0
800042be:	ce 40       	breq	80004286 <main+0x5e>
			C = false;
800042c0:	aa 84       	st.b	r5[0x0],r4
			gpio_set_pin_low(RESPONSE_C);
800042c2:	00 9c       	mov	r12,r0
800042c4:	f0 1f 00 0b 	mcall	800042f0 <main+0xc8>
			busy_delay_us(5);
800042c8:	06 9c       	mov	r12,r3
800042ca:	f0 1f 00 0b 	mcall	800042f4 <main+0xcc>
			gpio_set_pin_high(RESPONSE_C);
800042ce:	00 9c       	mov	r12,r0
800042d0:	f0 1f 00 0a 	mcall	800042f8 <main+0xd0>
800042d4:	cd 9b       	rjmp	80004286 <main+0x5e>
800042d6:	00 00       	add	r0,r0
800042d8:	80 00       	ld.sh	r0,r0[0x0]
800042da:	41 b8       	lddsp	r8,sp[0x6c]
800042dc:	80 00       	ld.sh	r0,r0[0x0]
800042de:	21 30       	sub	r0,19
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	22 14       	sub	r4,33
800042e4:	00 00       	add	r0,r0
800042e6:	0c c4       	st.b	r6++,r4
800042e8:	00 00       	add	r0,r0
800042ea:	0c c5       	st.b	r6++,r5
800042ec:	00 00       	add	r0,r0
800042ee:	0c c6       	st.b	r6++,r6
800042f0:	80 00       	ld.sh	r0,r0[0x0]
800042f2:	21 fe       	sub	lr,31
800042f4:	80 00       	ld.sh	r0,r0[0x0]
800042f6:	41 60       	lddsp	r0,sp[0x58]
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	21 e8       	sub	r8,30

800042fc <interrupt_J3>:
/*********************************************************************
Interrupt routines
*********************************************************************/
__attribute__((__interrupt__)) 
static void interrupt_J3(void) 
{ 
800042fc:	d4 01       	pushm	lr
		

		if ((gpio_get_pin_interrupt_flag(TEST_A))){
800042fe:	31 fc       	mov	r12,31
80004300:	f0 1f 00 10 	mcall	80004340 <interrupt_J3+0x44>
80004304:	c0 70       	breq	80004312 <interrupt_J3+0x16>
			gpio_clear_pin_interrupt_flag(TEST_A);
80004306:	31 fc       	mov	r12,31
80004308:	f0 1f 00 0f 	mcall	80004344 <interrupt_J3+0x48>
			A = true;
8000430c:	30 19       	mov	r9,1
8000430e:	48 f8       	lddpc	r8,80004348 <interrupt_J3+0x4c>
80004310:	b0 89       	st.b	r8[0x0],r9
		}
		if ((gpio_get_pin_interrupt_flag(TEST_B))){
80004312:	31 dc       	mov	r12,29
80004314:	f0 1f 00 0b 	mcall	80004340 <interrupt_J3+0x44>
80004318:	c0 70       	breq	80004326 <interrupt_J3+0x2a>
			gpio_clear_pin_interrupt_flag(TEST_B);
8000431a:	31 dc       	mov	r12,29
8000431c:	f0 1f 00 0a 	mcall	80004344 <interrupt_J3+0x48>
			B = true;
80004320:	30 19       	mov	r9,1
80004322:	48 b8       	lddpc	r8,8000434c <interrupt_J3+0x50>
80004324:	b0 89       	st.b	r8[0x0],r9
		}
		if ((gpio_get_pin_interrupt_flag(TEST_C))){
80004326:	31 bc       	mov	r12,27
80004328:	f0 1f 00 06 	mcall	80004340 <interrupt_J3+0x44>
8000432c:	c0 70       	breq	8000433a <interrupt_J3+0x3e>
			gpio_clear_pin_interrupt_flag(TEST_C);
8000432e:	31 bc       	mov	r12,27
80004330:	f0 1f 00 05 	mcall	80004344 <interrupt_J3+0x48>
			C = true;
80004334:	30 19       	mov	r9,1
80004336:	48 78       	lddpc	r8,80004350 <interrupt_J3+0x54>
80004338:	b0 89       	st.b	r8[0x0],r9
			
		}
}
8000433a:	d4 02       	popm	lr
8000433c:	d6 03       	rete
8000433e:	00 00       	add	r0,r0
80004340:	80 00       	ld.sh	r0,r0[0x0]
80004342:	22 5a       	sub	r10,37
80004344:	80 00       	ld.sh	r0,r0[0x0]
80004346:	22 72       	sub	r2,39
80004348:	00 00       	add	r0,r0
8000434a:	0c c4       	st.b	r6++,r4
8000434c:	00 00       	add	r0,r0
8000434e:	0c c5       	st.b	r6++,r5
80004350:	00 00       	add	r0,r0
80004352:	0c c6       	st.b	r6++,r6

80004354 <__avr32_udiv64>:
80004354:	d4 31       	pushm	r0-r7,lr
80004356:	1a 97       	mov	r7,sp
80004358:	20 3d       	sub	sp,12
8000435a:	10 9c       	mov	r12,r8
8000435c:	12 9e       	mov	lr,r9
8000435e:	14 93       	mov	r3,r10
80004360:	58 09       	cp.w	r9,0
80004362:	e0 81 00 bd 	brne	800044dc <__avr32_udiv64+0x188>
80004366:	16 38       	cp.w	r8,r11
80004368:	e0 88 00 40 	brls	800043e8 <__avr32_udiv64+0x94>
8000436c:	f0 08 12 00 	clz	r8,r8
80004370:	c0 d0       	breq	8000438a <__avr32_udiv64+0x36>
80004372:	f6 08 09 4b 	lsl	r11,r11,r8
80004376:	f0 09 11 20 	rsub	r9,r8,32
8000437a:	f8 08 09 4c 	lsl	r12,r12,r8
8000437e:	f4 09 0a 49 	lsr	r9,r10,r9
80004382:	f4 08 09 43 	lsl	r3,r10,r8
80004386:	f3 eb 10 0b 	or	r11,r9,r11
8000438a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000438e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80004392:	f6 0e 0d 00 	divu	r0,r11,lr
80004396:	e6 0b 16 10 	lsr	r11,r3,0x10
8000439a:	00 99       	mov	r9,r0
8000439c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800043a0:	e0 0a 02 48 	mul	r8,r0,r10
800043a4:	10 3b       	cp.w	r11,r8
800043a6:	c0 a2       	brcc	800043ba <__avr32_udiv64+0x66>
800043a8:	20 19       	sub	r9,1
800043aa:	18 0b       	add	r11,r12
800043ac:	18 3b       	cp.w	r11,r12
800043ae:	c0 63       	brcs	800043ba <__avr32_udiv64+0x66>
800043b0:	10 3b       	cp.w	r11,r8
800043b2:	f7 b9 03 01 	sublo	r9,1
800043b6:	f7 dc e3 0b 	addcs	r11,r11,r12
800043ba:	f6 08 01 01 	sub	r1,r11,r8
800043be:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800043c2:	e2 0e 0d 00 	divu	r0,r1,lr
800043c6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800043ca:	00 98       	mov	r8,r0
800043cc:	e0 0a 02 4a 	mul	r10,r0,r10
800043d0:	14 33       	cp.w	r3,r10
800043d2:	c0 82       	brcc	800043e2 <__avr32_udiv64+0x8e>
800043d4:	20 18       	sub	r8,1
800043d6:	18 03       	add	r3,r12
800043d8:	18 33       	cp.w	r3,r12
800043da:	c0 43       	brcs	800043e2 <__avr32_udiv64+0x8e>
800043dc:	14 33       	cp.w	r3,r10
800043de:	f7 b8 03 01 	sublo	r8,1
800043e2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800043e6:	cd f8       	rjmp	800045a4 <__avr32_udiv64+0x250>
800043e8:	58 08       	cp.w	r8,0
800043ea:	c0 51       	brne	800043f4 <__avr32_udiv64+0xa0>
800043ec:	30 19       	mov	r9,1
800043ee:	f2 08 0d 08 	divu	r8,r9,r8
800043f2:	10 9c       	mov	r12,r8
800043f4:	f8 06 12 00 	clz	r6,r12
800043f8:	c0 41       	brne	80004400 <__avr32_udiv64+0xac>
800043fa:	18 1b       	sub	r11,r12
800043fc:	30 19       	mov	r9,1
800043fe:	c4 08       	rjmp	8000447e <__avr32_udiv64+0x12a>
80004400:	ec 01 11 20 	rsub	r1,r6,32
80004404:	f4 01 0a 49 	lsr	r9,r10,r1
80004408:	f8 06 09 4c 	lsl	r12,r12,r6
8000440c:	f6 06 09 48 	lsl	r8,r11,r6
80004410:	f6 01 0a 41 	lsr	r1,r11,r1
80004414:	f3 e8 10 08 	or	r8,r9,r8
80004418:	f8 03 16 10 	lsr	r3,r12,0x10
8000441c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80004420:	e2 03 0d 00 	divu	r0,r1,r3
80004424:	f0 0b 16 10 	lsr	r11,r8,0x10
80004428:	00 9e       	mov	lr,r0
8000442a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000442e:	e0 05 02 49 	mul	r9,r0,r5
80004432:	12 3b       	cp.w	r11,r9
80004434:	c0 a2       	brcc	80004448 <__avr32_udiv64+0xf4>
80004436:	20 1e       	sub	lr,1
80004438:	18 0b       	add	r11,r12
8000443a:	18 3b       	cp.w	r11,r12
8000443c:	c0 63       	brcs	80004448 <__avr32_udiv64+0xf4>
8000443e:	12 3b       	cp.w	r11,r9
80004440:	f7 be 03 01 	sublo	lr,1
80004444:	f7 dc e3 0b 	addcs	r11,r11,r12
80004448:	12 1b       	sub	r11,r9
8000444a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000444e:	f6 03 0d 02 	divu	r2,r11,r3
80004452:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80004456:	04 99       	mov	r9,r2
80004458:	e4 05 02 4b 	mul	r11,r2,r5
8000445c:	16 38       	cp.w	r8,r11
8000445e:	c0 a2       	brcc	80004472 <__avr32_udiv64+0x11e>
80004460:	20 19       	sub	r9,1
80004462:	18 08       	add	r8,r12
80004464:	18 38       	cp.w	r8,r12
80004466:	c0 63       	brcs	80004472 <__avr32_udiv64+0x11e>
80004468:	16 38       	cp.w	r8,r11
8000446a:	f7 b9 03 01 	sublo	r9,1
8000446e:	f1 dc e3 08 	addcs	r8,r8,r12
80004472:	f4 06 09 43 	lsl	r3,r10,r6
80004476:	f0 0b 01 0b 	sub	r11,r8,r11
8000447a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000447e:	f8 06 16 10 	lsr	r6,r12,0x10
80004482:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80004486:	f6 06 0d 00 	divu	r0,r11,r6
8000448a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000448e:	00 9a       	mov	r10,r0
80004490:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004494:	e0 0e 02 48 	mul	r8,r0,lr
80004498:	10 3b       	cp.w	r11,r8
8000449a:	c0 a2       	brcc	800044ae <__avr32_udiv64+0x15a>
8000449c:	20 1a       	sub	r10,1
8000449e:	18 0b       	add	r11,r12
800044a0:	18 3b       	cp.w	r11,r12
800044a2:	c0 63       	brcs	800044ae <__avr32_udiv64+0x15a>
800044a4:	10 3b       	cp.w	r11,r8
800044a6:	f7 ba 03 01 	sublo	r10,1
800044aa:	f7 dc e3 0b 	addcs	r11,r11,r12
800044ae:	f6 08 01 01 	sub	r1,r11,r8
800044b2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800044b6:	e2 06 0d 00 	divu	r0,r1,r6
800044ba:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800044be:	00 98       	mov	r8,r0
800044c0:	e0 0e 02 4b 	mul	r11,r0,lr
800044c4:	16 33       	cp.w	r3,r11
800044c6:	c0 82       	brcc	800044d6 <__avr32_udiv64+0x182>
800044c8:	20 18       	sub	r8,1
800044ca:	18 03       	add	r3,r12
800044cc:	18 33       	cp.w	r3,r12
800044ce:	c0 43       	brcs	800044d6 <__avr32_udiv64+0x182>
800044d0:	16 33       	cp.w	r3,r11
800044d2:	f7 b8 03 01 	sublo	r8,1
800044d6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800044da:	c6 98       	rjmp	800045ac <__avr32_udiv64+0x258>
800044dc:	16 39       	cp.w	r9,r11
800044de:	e0 8b 00 65 	brhi	800045a8 <__avr32_udiv64+0x254>
800044e2:	f2 09 12 00 	clz	r9,r9
800044e6:	c0 b1       	brne	800044fc <__avr32_udiv64+0x1a8>
800044e8:	10 3a       	cp.w	r10,r8
800044ea:	5f 2a       	srhs	r10
800044ec:	1c 3b       	cp.w	r11,lr
800044ee:	5f b8       	srhi	r8
800044f0:	10 4a       	or	r10,r8
800044f2:	f2 0a 18 00 	cp.b	r10,r9
800044f6:	c5 90       	breq	800045a8 <__avr32_udiv64+0x254>
800044f8:	30 18       	mov	r8,1
800044fa:	c5 98       	rjmp	800045ac <__avr32_udiv64+0x258>
800044fc:	f0 09 09 46 	lsl	r6,r8,r9
80004500:	f2 03 11 20 	rsub	r3,r9,32
80004504:	fc 09 09 4e 	lsl	lr,lr,r9
80004508:	f0 03 0a 48 	lsr	r8,r8,r3
8000450c:	f6 09 09 4c 	lsl	r12,r11,r9
80004510:	f4 03 0a 42 	lsr	r2,r10,r3
80004514:	ef 46 ff f4 	st.w	r7[-12],r6
80004518:	f6 03 0a 43 	lsr	r3,r11,r3
8000451c:	18 42       	or	r2,r12
8000451e:	f1 ee 10 0c 	or	r12,r8,lr
80004522:	f8 01 16 10 	lsr	r1,r12,0x10
80004526:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000452a:	e6 01 0d 04 	divu	r4,r3,r1
8000452e:	e4 03 16 10 	lsr	r3,r2,0x10
80004532:	08 9e       	mov	lr,r4
80004534:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80004538:	e8 06 02 48 	mul	r8,r4,r6
8000453c:	10 33       	cp.w	r3,r8
8000453e:	c0 a2       	brcc	80004552 <__avr32_udiv64+0x1fe>
80004540:	20 1e       	sub	lr,1
80004542:	18 03       	add	r3,r12
80004544:	18 33       	cp.w	r3,r12
80004546:	c0 63       	brcs	80004552 <__avr32_udiv64+0x1fe>
80004548:	10 33       	cp.w	r3,r8
8000454a:	f7 be 03 01 	sublo	lr,1
8000454e:	e7 dc e3 03 	addcs	r3,r3,r12
80004552:	10 13       	sub	r3,r8
80004554:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80004558:	e6 01 0d 00 	divu	r0,r3,r1
8000455c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004560:	00 98       	mov	r8,r0
80004562:	e0 06 02 46 	mul	r6,r0,r6
80004566:	0c 3b       	cp.w	r11,r6
80004568:	c0 a2       	brcc	8000457c <__avr32_udiv64+0x228>
8000456a:	20 18       	sub	r8,1
8000456c:	18 0b       	add	r11,r12
8000456e:	18 3b       	cp.w	r11,r12
80004570:	c0 63       	brcs	8000457c <__avr32_udiv64+0x228>
80004572:	0c 3b       	cp.w	r11,r6
80004574:	f7 dc e3 0b 	addcs	r11,r11,r12
80004578:	f7 b8 03 01 	sublo	r8,1
8000457c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80004580:	ee f4 ff f4 	ld.w	r4,r7[-12]
80004584:	0c 1b       	sub	r11,r6
80004586:	f0 04 06 42 	mulu.d	r2,r8,r4
8000458a:	06 95       	mov	r5,r3
8000458c:	16 35       	cp.w	r5,r11
8000458e:	e0 8b 00 0a 	brhi	800045a2 <__avr32_udiv64+0x24e>
80004592:	5f 0b       	sreq	r11
80004594:	f4 09 09 49 	lsl	r9,r10,r9
80004598:	12 32       	cp.w	r2,r9
8000459a:	5f b9       	srhi	r9
8000459c:	f7 e9 00 09 	and	r9,r11,r9
800045a0:	c0 60       	breq	800045ac <__avr32_udiv64+0x258>
800045a2:	20 18       	sub	r8,1
800045a4:	30 09       	mov	r9,0
800045a6:	c0 38       	rjmp	800045ac <__avr32_udiv64+0x258>
800045a8:	30 09       	mov	r9,0
800045aa:	12 98       	mov	r8,r9
800045ac:	10 9a       	mov	r10,r8
800045ae:	12 93       	mov	r3,r9
800045b0:	10 92       	mov	r2,r8
800045b2:	12 9b       	mov	r11,r9
800045b4:	2f dd       	sub	sp,-12
800045b6:	d8 32       	popm	r0-r7,pc

800045b8 <setbuf>:
800045b8:	d4 01       	pushm	lr
800045ba:	e0 69 04 00 	mov	r9,1024
800045be:	58 0b       	cp.w	r11,0
800045c0:	f9 ba 00 02 	moveq	r10,2
800045c4:	f9 ba 01 00 	movne	r10,0
800045c8:	c0 2c       	rcall	800045cc <setvbuf>
800045ca:	d8 02       	popm	pc

800045cc <setvbuf>:
800045cc:	d4 31       	pushm	r0-r7,lr
800045ce:	4b e8       	lddpc	r8,800046c4 <setvbuf+0xf8>
800045d0:	18 97       	mov	r7,r12
800045d2:	16 96       	mov	r6,r11
800045d4:	14 95       	mov	r5,r10
800045d6:	12 94       	mov	r4,r9
800045d8:	70 0c       	ld.w	r12,r8[0x0]
800045da:	58 0c       	cp.w	r12,0
800045dc:	c0 50       	breq	800045e6 <setvbuf+0x1a>
800045de:	78 68       	ld.w	r8,r12[0x18]
800045e0:	58 08       	cp.w	r8,0
800045e2:	c0 21       	brne	800045e6 <setvbuf+0x1a>
800045e4:	c5 4d       	rcall	8000488c <__sinit>
800045e6:	4b 98       	lddpc	r8,800046c8 <setvbuf+0xfc>
800045e8:	10 37       	cp.w	r7,r8
800045ea:	c0 51       	brne	800045f4 <setvbuf+0x28>
800045ec:	4b 68       	lddpc	r8,800046c4 <setvbuf+0xf8>
800045ee:	70 08       	ld.w	r8,r8[0x0]
800045f0:	70 07       	ld.w	r7,r8[0x0]
800045f2:	c0 e8       	rjmp	8000460e <setvbuf+0x42>
800045f4:	4b 68       	lddpc	r8,800046cc <setvbuf+0x100>
800045f6:	10 37       	cp.w	r7,r8
800045f8:	c0 51       	brne	80004602 <setvbuf+0x36>
800045fa:	4b 38       	lddpc	r8,800046c4 <setvbuf+0xf8>
800045fc:	70 08       	ld.w	r8,r8[0x0]
800045fe:	70 17       	ld.w	r7,r8[0x4]
80004600:	c0 78       	rjmp	8000460e <setvbuf+0x42>
80004602:	4b 48       	lddpc	r8,800046d0 <setvbuf+0x104>
80004604:	10 37       	cp.w	r7,r8
80004606:	c0 41       	brne	8000460e <setvbuf+0x42>
80004608:	4a f8       	lddpc	r8,800046c4 <setvbuf+0xf8>
8000460a:	70 08       	ld.w	r8,r8[0x0]
8000460c:	70 27       	ld.w	r7,r8[0x8]
8000460e:	58 25       	cp.w	r5,2
80004610:	5f b8       	srhi	r8
80004612:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80004616:	c0 20       	breq	8000461a <setvbuf+0x4e>
80004618:	dc 3a       	popm	r0-r7,pc,r12=-1
8000461a:	4a b3       	lddpc	r3,800046c4 <setvbuf+0xf8>
8000461c:	0e 9b       	mov	r11,r7
8000461e:	66 0c       	ld.w	r12,r3[0x0]
80004620:	c5 ac       	rcall	800046d4 <_fflush_r>
80004622:	30 08       	mov	r8,0
80004624:	8f 68       	st.w	r7[0x18],r8
80004626:	8f 18       	st.w	r7[0x4],r8
80004628:	8e 68       	ld.sh	r8,r7[0xc]
8000462a:	ed b8 00 07 	bld	r8,0x7
8000462e:	c0 41       	brne	80004636 <setvbuf+0x6a>
80004630:	66 0c       	ld.w	r12,r3[0x0]
80004632:	6e 4b       	ld.w	r11,r7[0x10]
80004634:	cc 8d       	rcall	800049c4 <_free_r>
80004636:	8e 68       	ld.sh	r8,r7[0xc]
80004638:	e0 18 ff 7c 	andl	r8,0xff7c
8000463c:	ae 68       	st.h	r7[0xc],r8
8000463e:	58 25       	cp.w	r5,2
80004640:	c0 31       	brne	80004646 <setvbuf+0x7a>
80004642:	30 0c       	mov	r12,0
80004644:	c1 38       	rjmp	8000466a <setvbuf+0x9e>
80004646:	58 06       	cp.w	r6,0
80004648:	c2 11       	brne	8000468a <setvbuf+0xbe>
8000464a:	e0 63 04 00 	mov	r3,1024
8000464e:	58 04       	cp.w	r4,0
80004650:	e6 04 17 00 	moveq	r4,r3
80004654:	08 9c       	mov	r12,r4
80004656:	e0 a0 02 a3 	rcall	80004b9c <malloc>
8000465a:	18 96       	mov	r6,r12
8000465c:	c1 41       	brne	80004684 <setvbuf+0xb8>
8000465e:	06 9c       	mov	r12,r3
80004660:	e0 a0 02 9e 	rcall	80004b9c <malloc>
80004664:	18 96       	mov	r6,r12
80004666:	c0 e1       	brne	80004682 <setvbuf+0xb6>
80004668:	3f fc       	mov	r12,-1
8000466a:	8e 68       	ld.sh	r8,r7[0xc]
8000466c:	a1 b8       	sbr	r8,0x1
8000466e:	ae 68       	st.h	r7[0xc],r8
80004670:	ee c8 ff b9 	sub	r8,r7,-71
80004674:	8f 48       	st.w	r7[0x10],r8
80004676:	8f 08       	st.w	r7[0x0],r8
80004678:	30 08       	mov	r8,0
8000467a:	8f 28       	st.w	r7[0x8],r8
8000467c:	30 18       	mov	r8,1
8000467e:	8f 58       	st.w	r7[0x14],r8
80004680:	d8 32       	popm	r0-r7,pc
80004682:	06 94       	mov	r4,r3
80004684:	8e 68       	ld.sh	r8,r7[0xc]
80004686:	a7 b8       	sbr	r8,0x7
80004688:	ae 68       	st.h	r7[0xc],r8
8000468a:	58 15       	cp.w	r5,1
8000468c:	c0 71       	brne	8000469a <setvbuf+0xce>
8000468e:	8e 68       	ld.sh	r8,r7[0xc]
80004690:	a1 a8       	sbr	r8,0x0
80004692:	ae 68       	st.h	r7[0xc],r8
80004694:	e8 08 11 00 	rsub	r8,r4,0
80004698:	8f 68       	st.w	r7[0x18],r8
8000469a:	48 b8       	lddpc	r8,800046c4 <setvbuf+0xf8>
8000469c:	fe c9 fe b4 	sub	r9,pc,-332
800046a0:	70 08       	ld.w	r8,r8[0x0]
800046a2:	8f 46       	st.w	r7[0x10],r6
800046a4:	91 a9       	st.w	r8[0x28],r9
800046a6:	8f 06       	st.w	r7[0x0],r6
800046a8:	8f 54       	st.w	r7[0x14],r4
800046aa:	8e 68       	ld.sh	r8,r7[0xc]
800046ac:	10 9c       	mov	r12,r8
800046ae:	e2 1c 00 08 	andl	r12,0x8,COH
800046b2:	c0 70       	breq	800046c0 <setvbuf+0xf4>
800046b4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800046b8:	30 0c       	mov	r12,0
800046ba:	f9 b4 01 00 	movne	r4,0
800046be:	8f 24       	st.w	r7[0x8],r4
800046c0:	d8 32       	popm	r0-r7,pc
800046c2:	d7 03       	nop
800046c4:	00 00       	add	r0,r0
800046c6:	01 c4       	ld.ub	r4,r0[0x4]
800046c8:	80 00       	ld.sh	r0,r0[0x0]
800046ca:	57 38       	stdsp	sp[0x1cc],r8
800046cc:	80 00       	ld.sh	r0,r0[0x0]
800046ce:	57 58       	stdsp	sp[0x1d4],r8
800046d0:	80 00       	ld.sh	r0,r0[0x0]
800046d2:	57 78       	stdsp	sp[0x1dc],r8

800046d4 <_fflush_r>:
800046d4:	d4 21       	pushm	r4-r7,lr
800046d6:	16 97       	mov	r7,r11
800046d8:	18 96       	mov	r6,r12
800046da:	76 48       	ld.w	r8,r11[0x10]
800046dc:	58 08       	cp.w	r8,0
800046de:	c7 c0       	breq	800047d6 <_fflush_r+0x102>
800046e0:	58 0c       	cp.w	r12,0
800046e2:	c0 50       	breq	800046ec <_fflush_r+0x18>
800046e4:	78 68       	ld.w	r8,r12[0x18]
800046e6:	58 08       	cp.w	r8,0
800046e8:	c0 21       	brne	800046ec <_fflush_r+0x18>
800046ea:	cd 1c       	rcall	8000488c <__sinit>
800046ec:	4b b8       	lddpc	r8,800047d8 <_fflush_r+0x104>
800046ee:	10 37       	cp.w	r7,r8
800046f0:	c0 31       	brne	800046f6 <_fflush_r+0x22>
800046f2:	6c 07       	ld.w	r7,r6[0x0]
800046f4:	c0 a8       	rjmp	80004708 <_fflush_r+0x34>
800046f6:	4b a8       	lddpc	r8,800047dc <_fflush_r+0x108>
800046f8:	10 37       	cp.w	r7,r8
800046fa:	c0 31       	brne	80004700 <_fflush_r+0x2c>
800046fc:	6c 17       	ld.w	r7,r6[0x4]
800046fe:	c0 58       	rjmp	80004708 <_fflush_r+0x34>
80004700:	4b 88       	lddpc	r8,800047e0 <_fflush_r+0x10c>
80004702:	10 37       	cp.w	r7,r8
80004704:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80004708:	8e 6a       	ld.sh	r10,r7[0xc]
8000470a:	14 98       	mov	r8,r10
8000470c:	ed ba 00 03 	bld	r10,0x3
80004710:	c4 20       	breq	80004794 <_fflush_r+0xc0>
80004712:	ab ba       	sbr	r10,0xb
80004714:	ae 6a       	st.h	r7[0xc],r10
80004716:	6e 18       	ld.w	r8,r7[0x4]
80004718:	58 08       	cp.w	r8,0
8000471a:	e0 89 00 06 	brgt	80004726 <_fflush_r+0x52>
8000471e:	6f 08       	ld.w	r8,r7[0x40]
80004720:	58 08       	cp.w	r8,0
80004722:	e0 8a 00 5a 	brle	800047d6 <_fflush_r+0x102>
80004726:	6e b8       	ld.w	r8,r7[0x2c]
80004728:	58 08       	cp.w	r8,0
8000472a:	c5 60       	breq	800047d6 <_fflush_r+0x102>
8000472c:	e2 1a 10 00 	andl	r10,0x1000,COH
80004730:	c0 30       	breq	80004736 <_fflush_r+0x62>
80004732:	6f 55       	ld.w	r5,r7[0x54]
80004734:	c0 f8       	rjmp	80004752 <_fflush_r+0x7e>
80004736:	30 19       	mov	r9,1
80004738:	6e 8b       	ld.w	r11,r7[0x20]
8000473a:	0c 9c       	mov	r12,r6
8000473c:	5d 18       	icall	r8
8000473e:	18 95       	mov	r5,r12
80004740:	5b fc       	cp.w	r12,-1
80004742:	c0 81       	brne	80004752 <_fflush_r+0x7e>
80004744:	6c 38       	ld.w	r8,r6[0xc]
80004746:	59 d8       	cp.w	r8,29
80004748:	c4 70       	breq	800047d6 <_fflush_r+0x102>
8000474a:	8e 68       	ld.sh	r8,r7[0xc]
8000474c:	a7 a8       	sbr	r8,0x6
8000474e:	ae 68       	st.h	r7[0xc],r8
80004750:	d8 22       	popm	r4-r7,pc
80004752:	8e 68       	ld.sh	r8,r7[0xc]
80004754:	ed b8 00 02 	bld	r8,0x2
80004758:	c0 91       	brne	8000476a <_fflush_r+0x96>
8000475a:	6e 18       	ld.w	r8,r7[0x4]
8000475c:	10 15       	sub	r5,r8
8000475e:	6e d8       	ld.w	r8,r7[0x34]
80004760:	58 08       	cp.w	r8,0
80004762:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80004766:	eb d8 e1 15 	subne	r5,r5,r8
8000476a:	6e b8       	ld.w	r8,r7[0x2c]
8000476c:	0c 9c       	mov	r12,r6
8000476e:	30 09       	mov	r9,0
80004770:	0a 9a       	mov	r10,r5
80004772:	6e 8b       	ld.w	r11,r7[0x20]
80004774:	5d 18       	icall	r8
80004776:	8e 68       	ld.sh	r8,r7[0xc]
80004778:	0a 3c       	cp.w	r12,r5
8000477a:	c2 61       	brne	800047c6 <_fflush_r+0xf2>
8000477c:	ab d8       	cbr	r8,0xb
8000477e:	30 0c       	mov	r12,0
80004780:	6e 49       	ld.w	r9,r7[0x10]
80004782:	ae 68       	st.h	r7[0xc],r8
80004784:	8f 1c       	st.w	r7[0x4],r12
80004786:	8f 09       	st.w	r7[0x0],r9
80004788:	ed b8 00 0c 	bld	r8,0xc
8000478c:	c2 51       	brne	800047d6 <_fflush_r+0x102>
8000478e:	ef 45 00 54 	st.w	r7[84],r5
80004792:	d8 22       	popm	r4-r7,pc
80004794:	6e 45       	ld.w	r5,r7[0x10]
80004796:	58 05       	cp.w	r5,0
80004798:	c1 f0       	breq	800047d6 <_fflush_r+0x102>
8000479a:	6e 04       	ld.w	r4,r7[0x0]
8000479c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800047a0:	8f 05       	st.w	r7[0x0],r5
800047a2:	f9 b8 01 00 	movne	r8,0
800047a6:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800047aa:	0a 14       	sub	r4,r5
800047ac:	8f 28       	st.w	r7[0x8],r8
800047ae:	c1 18       	rjmp	800047d0 <_fflush_r+0xfc>
800047b0:	08 99       	mov	r9,r4
800047b2:	0a 9a       	mov	r10,r5
800047b4:	6e a8       	ld.w	r8,r7[0x28]
800047b6:	6e 8b       	ld.w	r11,r7[0x20]
800047b8:	0c 9c       	mov	r12,r6
800047ba:	5d 18       	icall	r8
800047bc:	18 14       	sub	r4,r12
800047be:	58 0c       	cp.w	r12,0
800047c0:	e0 89 00 07 	brgt	800047ce <_fflush_r+0xfa>
800047c4:	8e 68       	ld.sh	r8,r7[0xc]
800047c6:	a7 a8       	sbr	r8,0x6
800047c8:	3f fc       	mov	r12,-1
800047ca:	ae 68       	st.h	r7[0xc],r8
800047cc:	d8 22       	popm	r4-r7,pc
800047ce:	18 05       	add	r5,r12
800047d0:	58 04       	cp.w	r4,0
800047d2:	fe 99 ff ef 	brgt	800047b0 <_fflush_r+0xdc>
800047d6:	d8 2a       	popm	r4-r7,pc,r12=0
800047d8:	80 00       	ld.sh	r0,r0[0x0]
800047da:	57 38       	stdsp	sp[0x1cc],r8
800047dc:	80 00       	ld.sh	r0,r0[0x0]
800047de:	57 58       	stdsp	sp[0x1d4],r8
800047e0:	80 00       	ld.sh	r0,r0[0x0]
800047e2:	57 78       	stdsp	sp[0x1dc],r8

800047e4 <__sfp_lock_acquire>:
800047e4:	5e fc       	retal	r12

800047e6 <__sfp_lock_release>:
800047e6:	5e fc       	retal	r12

800047e8 <_cleanup_r>:
800047e8:	d4 01       	pushm	lr
800047ea:	fe cb f5 f6 	sub	r11,pc,-2570
800047ee:	cb 3d       	rcall	80004b54 <_fwalk>
800047f0:	d8 02       	popm	pc
800047f2:	d7 03       	nop

800047f4 <__sfmoreglue>:
800047f4:	d4 21       	pushm	r4-r7,lr
800047f6:	16 95       	mov	r5,r11
800047f8:	f6 06 10 5c 	mul	r6,r11,92
800047fc:	ec cb ff f4 	sub	r11,r6,-12
80004800:	cd 6d       	rcall	80004bac <_malloc_r>
80004802:	18 97       	mov	r7,r12
80004804:	c0 90       	breq	80004816 <__sfmoreglue+0x22>
80004806:	99 15       	st.w	r12[0x4],r5
80004808:	30 0b       	mov	r11,0
8000480a:	2f 4c       	sub	r12,-12
8000480c:	0c 9a       	mov	r10,r6
8000480e:	8f 2c       	st.w	r7[0x8],r12
80004810:	8f 0b       	st.w	r7[0x0],r11
80004812:	e0 a0 03 e1 	rcall	80004fd4 <memset>
80004816:	0e 9c       	mov	r12,r7
80004818:	d8 22       	popm	r4-r7,pc
8000481a:	d7 03       	nop

8000481c <__sfp>:
8000481c:	d4 21       	pushm	r4-r7,lr
8000481e:	49 b8       	lddpc	r8,80004888 <__sfp+0x6c>
80004820:	18 96       	mov	r6,r12
80004822:	70 07       	ld.w	r7,r8[0x0]
80004824:	6e 68       	ld.w	r8,r7[0x18]
80004826:	58 08       	cp.w	r8,0
80004828:	c0 31       	brne	8000482e <__sfp+0x12>
8000482a:	0e 9c       	mov	r12,r7
8000482c:	c3 0c       	rcall	8000488c <__sinit>
8000482e:	ee c7 ff 28 	sub	r7,r7,-216
80004832:	30 05       	mov	r5,0
80004834:	6e 2c       	ld.w	r12,r7[0x8]
80004836:	6e 18       	ld.w	r8,r7[0x4]
80004838:	c0 68       	rjmp	80004844 <__sfp+0x28>
8000483a:	98 69       	ld.sh	r9,r12[0xc]
8000483c:	ea 09 19 00 	cp.h	r9,r5
80004840:	c1 10       	breq	80004862 <__sfp+0x46>
80004842:	2a 4c       	sub	r12,-92
80004844:	20 18       	sub	r8,1
80004846:	cf a7       	brpl	8000483a <__sfp+0x1e>
80004848:	6e 08       	ld.w	r8,r7[0x0]
8000484a:	58 08       	cp.w	r8,0
8000484c:	c0 61       	brne	80004858 <__sfp+0x3c>
8000484e:	30 4b       	mov	r11,4
80004850:	0c 9c       	mov	r12,r6
80004852:	cd 1f       	rcall	800047f4 <__sfmoreglue>
80004854:	8f 0c       	st.w	r7[0x0],r12
80004856:	c0 30       	breq	8000485c <__sfp+0x40>
80004858:	6e 07       	ld.w	r7,r7[0x0]
8000485a:	ce db       	rjmp	80004834 <__sfp+0x18>
8000485c:	30 c8       	mov	r8,12
8000485e:	8d 38       	st.w	r6[0xc],r8
80004860:	d8 22       	popm	r4-r7,pc
80004862:	30 08       	mov	r8,0
80004864:	f9 48 00 4c 	st.w	r12[76],r8
80004868:	99 08       	st.w	r12[0x0],r8
8000486a:	99 28       	st.w	r12[0x8],r8
8000486c:	99 18       	st.w	r12[0x4],r8
8000486e:	99 48       	st.w	r12[0x10],r8
80004870:	99 58       	st.w	r12[0x14],r8
80004872:	99 68       	st.w	r12[0x18],r8
80004874:	99 d8       	st.w	r12[0x34],r8
80004876:	99 e8       	st.w	r12[0x38],r8
80004878:	f9 48 00 48 	st.w	r12[72],r8
8000487c:	3f f8       	mov	r8,-1
8000487e:	b8 78       	st.h	r12[0xe],r8
80004880:	30 18       	mov	r8,1
80004882:	b8 68       	st.h	r12[0xc],r8
80004884:	d8 22       	popm	r4-r7,pc
80004886:	d7 03       	nop
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	57 34       	stdsp	sp[0x1cc],r4

8000488c <__sinit>:
8000488c:	d4 21       	pushm	r4-r7,lr
8000488e:	18 96       	mov	r6,r12
80004890:	78 67       	ld.w	r7,r12[0x18]
80004892:	58 07       	cp.w	r7,0
80004894:	c4 91       	brne	80004926 <__sinit+0x9a>
80004896:	fe c8 00 ae 	sub	r8,pc,174
8000489a:	30 15       	mov	r5,1
8000489c:	99 a8       	st.w	r12[0x28],r8
8000489e:	f9 47 00 d8 	st.w	r12[216],r7
800048a2:	f9 47 00 dc 	st.w	r12[220],r7
800048a6:	f9 47 00 e0 	st.w	r12[224],r7
800048aa:	99 65       	st.w	r12[0x18],r5
800048ac:	cb 8f       	rcall	8000481c <__sfp>
800048ae:	8d 0c       	st.w	r6[0x0],r12
800048b0:	0c 9c       	mov	r12,r6
800048b2:	cb 5f       	rcall	8000481c <__sfp>
800048b4:	8d 1c       	st.w	r6[0x4],r12
800048b6:	0c 9c       	mov	r12,r6
800048b8:	cb 2f       	rcall	8000481c <__sfp>
800048ba:	6c 09       	ld.w	r9,r6[0x0]
800048bc:	30 48       	mov	r8,4
800048be:	93 07       	st.w	r9[0x0],r7
800048c0:	b2 68       	st.h	r9[0xc],r8
800048c2:	93 17       	st.w	r9[0x4],r7
800048c4:	93 27       	st.w	r9[0x8],r7
800048c6:	6c 18       	ld.w	r8,r6[0x4]
800048c8:	b2 77       	st.h	r9[0xe],r7
800048ca:	93 47       	st.w	r9[0x10],r7
800048cc:	93 57       	st.w	r9[0x14],r7
800048ce:	93 67       	st.w	r9[0x18],r7
800048d0:	93 89       	st.w	r9[0x20],r9
800048d2:	91 07       	st.w	r8[0x0],r7
800048d4:	91 17       	st.w	r8[0x4],r7
800048d6:	91 27       	st.w	r8[0x8],r7
800048d8:	fe ce f8 7c 	sub	lr,pc,-1924
800048dc:	fe cb f8 ac 	sub	r11,pc,-1876
800048e0:	93 9e       	st.w	r9[0x24],lr
800048e2:	93 ab       	st.w	r9[0x28],r11
800048e4:	fe ca f8 d4 	sub	r10,pc,-1836
800048e8:	fe c4 f8 e0 	sub	r4,pc,-1824
800048ec:	93 ba       	st.w	r9[0x2c],r10
800048ee:	93 c4       	st.w	r9[0x30],r4
800048f0:	30 99       	mov	r9,9
800048f2:	b0 69       	st.h	r8[0xc],r9
800048f4:	b0 75       	st.h	r8[0xe],r5
800048f6:	91 c4       	st.w	r8[0x30],r4
800048f8:	91 47       	st.w	r8[0x10],r7
800048fa:	91 57       	st.w	r8[0x14],r7
800048fc:	91 67       	st.w	r8[0x18],r7
800048fe:	91 88       	st.w	r8[0x20],r8
80004900:	91 9e       	st.w	r8[0x24],lr
80004902:	91 ab       	st.w	r8[0x28],r11
80004904:	91 ba       	st.w	r8[0x2c],r10
80004906:	8d 2c       	st.w	r6[0x8],r12
80004908:	31 28       	mov	r8,18
8000490a:	99 07       	st.w	r12[0x0],r7
8000490c:	b8 68       	st.h	r12[0xc],r8
8000490e:	99 17       	st.w	r12[0x4],r7
80004910:	99 27       	st.w	r12[0x8],r7
80004912:	30 28       	mov	r8,2
80004914:	b8 78       	st.h	r12[0xe],r8
80004916:	99 c4       	st.w	r12[0x30],r4
80004918:	99 67       	st.w	r12[0x18],r7
8000491a:	99 9e       	st.w	r12[0x24],lr
8000491c:	99 ab       	st.w	r12[0x28],r11
8000491e:	99 ba       	st.w	r12[0x2c],r10
80004920:	99 47       	st.w	r12[0x10],r7
80004922:	99 57       	st.w	r12[0x14],r7
80004924:	99 8c       	st.w	r12[0x20],r12
80004926:	d8 22       	popm	r4-r7,pc

80004928 <_malloc_trim_r>:
80004928:	d4 21       	pushm	r4-r7,lr
8000492a:	16 95       	mov	r5,r11
8000492c:	18 97       	mov	r7,r12
8000492e:	e0 a0 03 5a 	rcall	80004fe2 <__malloc_lock>
80004932:	4a 24       	lddpc	r4,800049b8 <_malloc_trim_r+0x90>
80004934:	68 28       	ld.w	r8,r4[0x8]
80004936:	70 16       	ld.w	r6,r8[0x4]
80004938:	e0 16 ff fc 	andl	r6,0xfffc
8000493c:	ec c8 ff 91 	sub	r8,r6,-111
80004940:	f0 05 01 05 	sub	r5,r8,r5
80004944:	e0 15 ff 80 	andl	r5,0xff80
80004948:	ea c5 00 80 	sub	r5,r5,128
8000494c:	e0 45 00 7f 	cp.w	r5,127
80004950:	e0 8a 00 23 	brle	80004996 <_malloc_trim_r+0x6e>
80004954:	30 0b       	mov	r11,0
80004956:	0e 9c       	mov	r12,r7
80004958:	e0 a0 03 48 	rcall	80004fe8 <_sbrk_r>
8000495c:	68 28       	ld.w	r8,r4[0x8]
8000495e:	0c 08       	add	r8,r6
80004960:	10 3c       	cp.w	r12,r8
80004962:	c1 a1       	brne	80004996 <_malloc_trim_r+0x6e>
80004964:	ea 0b 11 00 	rsub	r11,r5,0
80004968:	0e 9c       	mov	r12,r7
8000496a:	e0 a0 03 3f 	rcall	80004fe8 <_sbrk_r>
8000496e:	5b fc       	cp.w	r12,-1
80004970:	c1 71       	brne	8000499e <_malloc_trim_r+0x76>
80004972:	30 0b       	mov	r11,0
80004974:	0e 9c       	mov	r12,r7
80004976:	e0 a0 03 39 	rcall	80004fe8 <_sbrk_r>
8000497a:	68 28       	ld.w	r8,r4[0x8]
8000497c:	f8 08 01 09 	sub	r9,r12,r8
80004980:	58 f9       	cp.w	r9,15
80004982:	e0 8a 00 0a 	brle	80004996 <_malloc_trim_r+0x6e>
80004986:	a1 a9       	sbr	r9,0x0
80004988:	91 19       	st.w	r8[0x4],r9
8000498a:	48 d8       	lddpc	r8,800049bc <_malloc_trim_r+0x94>
8000498c:	70 09       	ld.w	r9,r8[0x0]
8000498e:	48 d8       	lddpc	r8,800049c0 <_malloc_trim_r+0x98>
80004990:	f8 09 01 09 	sub	r9,r12,r9
80004994:	91 09       	st.w	r8[0x0],r9
80004996:	0e 9c       	mov	r12,r7
80004998:	e0 a0 03 26 	rcall	80004fe4 <__malloc_unlock>
8000499c:	d8 2a       	popm	r4-r7,pc,r12=0
8000499e:	68 28       	ld.w	r8,r4[0x8]
800049a0:	0a 16       	sub	r6,r5
800049a2:	a1 a6       	sbr	r6,0x0
800049a4:	91 16       	st.w	r8[0x4],r6
800049a6:	48 78       	lddpc	r8,800049c0 <_malloc_trim_r+0x98>
800049a8:	70 09       	ld.w	r9,r8[0x0]
800049aa:	0a 19       	sub	r9,r5
800049ac:	0e 9c       	mov	r12,r7
800049ae:	91 09       	st.w	r8[0x0],r9
800049b0:	e0 a0 03 1a 	rcall	80004fe4 <__malloc_unlock>
800049b4:	da 2a       	popm	r4-r7,pc,r12=1
800049b6:	d7 03       	nop
800049b8:	00 00       	add	r0,r0
800049ba:	01 c8       	ld.ub	r8,r0[0x4]
800049bc:	00 00       	add	r0,r0
800049be:	05 d4       	ld.ub	r4,r2[0x5]
800049c0:	00 00       	add	r0,r0
800049c2:	0c 6c       	and	r12,r6

800049c4 <_free_r>:
800049c4:	d4 21       	pushm	r4-r7,lr
800049c6:	16 96       	mov	r6,r11
800049c8:	18 97       	mov	r7,r12
800049ca:	58 0b       	cp.w	r11,0
800049cc:	e0 80 00 c2 	breq	80004b50 <_free_r+0x18c>
800049d0:	e0 a0 03 09 	rcall	80004fe2 <__malloc_lock>
800049d4:	20 86       	sub	r6,8
800049d6:	4c ba       	lddpc	r10,80004b00 <_free_r+0x13c>
800049d8:	6c 18       	ld.w	r8,r6[0x4]
800049da:	74 2e       	ld.w	lr,r10[0x8]
800049dc:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800049e0:	a1 c8       	cbr	r8,0x0
800049e2:	ec 08 00 09 	add	r9,r6,r8
800049e6:	72 1b       	ld.w	r11,r9[0x4]
800049e8:	e0 1b ff fc 	andl	r11,0xfffc
800049ec:	1c 39       	cp.w	r9,lr
800049ee:	c1 c1       	brne	80004a26 <_free_r+0x62>
800049f0:	f6 08 00 08 	add	r8,r11,r8
800049f4:	58 0c       	cp.w	r12,0
800049f6:	c0 81       	brne	80004a06 <_free_r+0x42>
800049f8:	6c 09       	ld.w	r9,r6[0x0]
800049fa:	12 16       	sub	r6,r9
800049fc:	12 08       	add	r8,r9
800049fe:	6c 3b       	ld.w	r11,r6[0xc]
80004a00:	6c 29       	ld.w	r9,r6[0x8]
80004a02:	97 29       	st.w	r11[0x8],r9
80004a04:	93 3b       	st.w	r9[0xc],r11
80004a06:	10 99       	mov	r9,r8
80004a08:	95 26       	st.w	r10[0x8],r6
80004a0a:	a1 a9       	sbr	r9,0x0
80004a0c:	8d 19       	st.w	r6[0x4],r9
80004a0e:	4b e9       	lddpc	r9,80004b04 <_free_r+0x140>
80004a10:	72 09       	ld.w	r9,r9[0x0]
80004a12:	12 38       	cp.w	r8,r9
80004a14:	c0 53       	brcs	80004a1e <_free_r+0x5a>
80004a16:	4b d8       	lddpc	r8,80004b08 <_free_r+0x144>
80004a18:	0e 9c       	mov	r12,r7
80004a1a:	70 0b       	ld.w	r11,r8[0x0]
80004a1c:	c8 6f       	rcall	80004928 <_malloc_trim_r>
80004a1e:	0e 9c       	mov	r12,r7
80004a20:	e0 a0 02 e2 	rcall	80004fe4 <__malloc_unlock>
80004a24:	d8 22       	popm	r4-r7,pc
80004a26:	93 1b       	st.w	r9[0x4],r11
80004a28:	58 0c       	cp.w	r12,0
80004a2a:	c0 30       	breq	80004a30 <_free_r+0x6c>
80004a2c:	30 0c       	mov	r12,0
80004a2e:	c1 08       	rjmp	80004a4e <_free_r+0x8a>
80004a30:	6c 0e       	ld.w	lr,r6[0x0]
80004a32:	f4 c5 ff f8 	sub	r5,r10,-8
80004a36:	1c 16       	sub	r6,lr
80004a38:	1c 08       	add	r8,lr
80004a3a:	6c 2e       	ld.w	lr,r6[0x8]
80004a3c:	0a 3e       	cp.w	lr,r5
80004a3e:	f9 bc 00 01 	moveq	r12,1
80004a42:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80004a46:	eb fe 1a 02 	st.wne	r5[0x8],lr
80004a4a:	fd f5 1a 03 	st.wne	lr[0xc],r5
80004a4e:	f2 0b 00 0e 	add	lr,r9,r11
80004a52:	7c 1e       	ld.w	lr,lr[0x4]
80004a54:	ed be 00 00 	bld	lr,0x0
80004a58:	c1 30       	breq	80004a7e <_free_r+0xba>
80004a5a:	16 08       	add	r8,r11
80004a5c:	58 0c       	cp.w	r12,0
80004a5e:	c0 c1       	brne	80004a76 <_free_r+0xb2>
80004a60:	4a 8e       	lddpc	lr,80004b00 <_free_r+0x13c>
80004a62:	72 2b       	ld.w	r11,r9[0x8]
80004a64:	2f 8e       	sub	lr,-8
80004a66:	1c 3b       	cp.w	r11,lr
80004a68:	c0 71       	brne	80004a76 <_free_r+0xb2>
80004a6a:	97 36       	st.w	r11[0xc],r6
80004a6c:	97 26       	st.w	r11[0x8],r6
80004a6e:	8d 2b       	st.w	r6[0x8],r11
80004a70:	8d 3b       	st.w	r6[0xc],r11
80004a72:	30 1c       	mov	r12,1
80004a74:	c0 58       	rjmp	80004a7e <_free_r+0xba>
80004a76:	72 2b       	ld.w	r11,r9[0x8]
80004a78:	72 39       	ld.w	r9,r9[0xc]
80004a7a:	93 2b       	st.w	r9[0x8],r11
80004a7c:	97 39       	st.w	r11[0xc],r9
80004a7e:	10 99       	mov	r9,r8
80004a80:	ec 08 09 08 	st.w	r6[r8],r8
80004a84:	a1 a9       	sbr	r9,0x0
80004a86:	8d 19       	st.w	r6[0x4],r9
80004a88:	58 0c       	cp.w	r12,0
80004a8a:	c6 01       	brne	80004b4a <_free_r+0x186>
80004a8c:	e0 48 01 ff 	cp.w	r8,511
80004a90:	e0 8b 00 13 	brhi	80004ab6 <_free_r+0xf2>
80004a94:	a3 98       	lsr	r8,0x3
80004a96:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004a9a:	72 2b       	ld.w	r11,r9[0x8]
80004a9c:	8d 39       	st.w	r6[0xc],r9
80004a9e:	8d 2b       	st.w	r6[0x8],r11
80004aa0:	97 36       	st.w	r11[0xc],r6
80004aa2:	93 26       	st.w	r9[0x8],r6
80004aa4:	a3 48       	asr	r8,0x2
80004aa6:	74 19       	ld.w	r9,r10[0x4]
80004aa8:	30 1b       	mov	r11,1
80004aaa:	f6 08 09 48 	lsl	r8,r11,r8
80004aae:	f3 e8 10 08 	or	r8,r9,r8
80004ab2:	95 18       	st.w	r10[0x4],r8
80004ab4:	c4 b8       	rjmp	80004b4a <_free_r+0x186>
80004ab6:	f0 0b 16 09 	lsr	r11,r8,0x9
80004aba:	58 4b       	cp.w	r11,4
80004abc:	e0 8b 00 06 	brhi	80004ac8 <_free_r+0x104>
80004ac0:	f0 0b 16 06 	lsr	r11,r8,0x6
80004ac4:	2c 8b       	sub	r11,-56
80004ac6:	c2 68       	rjmp	80004b12 <_free_r+0x14e>
80004ac8:	59 4b       	cp.w	r11,20
80004aca:	e0 8b 00 04 	brhi	80004ad2 <_free_r+0x10e>
80004ace:	2a 5b       	sub	r11,-91
80004ad0:	c2 18       	rjmp	80004b12 <_free_r+0x14e>
80004ad2:	e0 4b 00 54 	cp.w	r11,84
80004ad6:	e0 8b 00 06 	brhi	80004ae2 <_free_r+0x11e>
80004ada:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004ade:	29 2b       	sub	r11,-110
80004ae0:	c1 98       	rjmp	80004b12 <_free_r+0x14e>
80004ae2:	e0 4b 01 54 	cp.w	r11,340
80004ae6:	e0 8b 00 06 	brhi	80004af2 <_free_r+0x12e>
80004aea:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004aee:	28 9b       	sub	r11,-119
80004af0:	c1 18       	rjmp	80004b12 <_free_r+0x14e>
80004af2:	e0 4b 05 54 	cp.w	r11,1364
80004af6:	e0 88 00 0b 	brls	80004b0c <_free_r+0x148>
80004afa:	37 eb       	mov	r11,126
80004afc:	c0 b8       	rjmp	80004b12 <_free_r+0x14e>
80004afe:	d7 03       	nop
80004b00:	00 00       	add	r0,r0
80004b02:	01 c8       	ld.ub	r8,r0[0x4]
80004b04:	00 00       	add	r0,r0
80004b06:	05 d0       	ld.ub	r0,r2[0x5]
80004b08:	00 00       	add	r0,r0
80004b0a:	0c 68       	and	r8,r6
80004b0c:	f0 0b 16 12 	lsr	r11,r8,0x12
80004b10:	28 4b       	sub	r11,-124
80004b12:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80004b16:	78 29       	ld.w	r9,r12[0x8]
80004b18:	18 39       	cp.w	r9,r12
80004b1a:	c0 e1       	brne	80004b36 <_free_r+0x172>
80004b1c:	74 18       	ld.w	r8,r10[0x4]
80004b1e:	a3 4b       	asr	r11,0x2
80004b20:	30 1c       	mov	r12,1
80004b22:	f8 0b 09 4b 	lsl	r11,r12,r11
80004b26:	f1 eb 10 0b 	or	r11,r8,r11
80004b2a:	12 98       	mov	r8,r9
80004b2c:	95 1b       	st.w	r10[0x4],r11
80004b2e:	c0 a8       	rjmp	80004b42 <_free_r+0x17e>
80004b30:	72 29       	ld.w	r9,r9[0x8]
80004b32:	18 39       	cp.w	r9,r12
80004b34:	c0 60       	breq	80004b40 <_free_r+0x17c>
80004b36:	72 1a       	ld.w	r10,r9[0x4]
80004b38:	e0 1a ff fc 	andl	r10,0xfffc
80004b3c:	14 38       	cp.w	r8,r10
80004b3e:	cf 93       	brcs	80004b30 <_free_r+0x16c>
80004b40:	72 38       	ld.w	r8,r9[0xc]
80004b42:	8d 38       	st.w	r6[0xc],r8
80004b44:	8d 29       	st.w	r6[0x8],r9
80004b46:	93 36       	st.w	r9[0xc],r6
80004b48:	91 26       	st.w	r8[0x8],r6
80004b4a:	0e 9c       	mov	r12,r7
80004b4c:	e0 a0 02 4c 	rcall	80004fe4 <__malloc_unlock>
80004b50:	d8 22       	popm	r4-r7,pc
80004b52:	d7 03       	nop

80004b54 <_fwalk>:
80004b54:	d4 31       	pushm	r0-r7,lr
80004b56:	30 05       	mov	r5,0
80004b58:	16 91       	mov	r1,r11
80004b5a:	f8 c7 ff 28 	sub	r7,r12,-216
80004b5e:	0a 92       	mov	r2,r5
80004b60:	c4 2e       	rcall	800047e4 <__sfp_lock_acquire>
80004b62:	3f f3       	mov	r3,-1
80004b64:	c1 68       	rjmp	80004b90 <_fwalk+0x3c>
80004b66:	6e 26       	ld.w	r6,r7[0x8]
80004b68:	6e 14       	ld.w	r4,r7[0x4]
80004b6a:	2f 46       	sub	r6,-12
80004b6c:	c0 c8       	rjmp	80004b84 <_fwalk+0x30>
80004b6e:	8c 08       	ld.sh	r8,r6[0x0]
80004b70:	e4 08 19 00 	cp.h	r8,r2
80004b74:	c0 70       	breq	80004b82 <_fwalk+0x2e>
80004b76:	8c 18       	ld.sh	r8,r6[0x2]
80004b78:	e6 08 19 00 	cp.h	r8,r3
80004b7c:	c0 30       	breq	80004b82 <_fwalk+0x2e>
80004b7e:	5d 11       	icall	r1
80004b80:	18 45       	or	r5,r12
80004b82:	2a 46       	sub	r6,-92
80004b84:	20 14       	sub	r4,1
80004b86:	ec cc 00 0c 	sub	r12,r6,12
80004b8a:	58 04       	cp.w	r4,0
80004b8c:	cf 14       	brge	80004b6e <_fwalk+0x1a>
80004b8e:	6e 07       	ld.w	r7,r7[0x0]
80004b90:	58 07       	cp.w	r7,0
80004b92:	ce a1       	brne	80004b66 <_fwalk+0x12>
80004b94:	c2 9e       	rcall	800047e6 <__sfp_lock_release>
80004b96:	0a 9c       	mov	r12,r5
80004b98:	d8 32       	popm	r0-r7,pc
80004b9a:	d7 03       	nop

80004b9c <malloc>:
80004b9c:	d4 01       	pushm	lr
80004b9e:	48 38       	lddpc	r8,80004ba8 <malloc+0xc>
80004ba0:	18 9b       	mov	r11,r12
80004ba2:	70 0c       	ld.w	r12,r8[0x0]
80004ba4:	c0 4c       	rcall	80004bac <_malloc_r>
80004ba6:	d8 02       	popm	pc
80004ba8:	00 00       	add	r0,r0
80004baa:	01 c4       	ld.ub	r4,r0[0x4]

80004bac <_malloc_r>:
80004bac:	d4 31       	pushm	r0-r7,lr
80004bae:	f6 c8 ff f5 	sub	r8,r11,-11
80004bb2:	18 95       	mov	r5,r12
80004bb4:	10 97       	mov	r7,r8
80004bb6:	e0 17 ff f8 	andl	r7,0xfff8
80004bba:	59 68       	cp.w	r8,22
80004bbc:	f9 b7 08 10 	movls	r7,16
80004bc0:	16 37       	cp.w	r7,r11
80004bc2:	5f 38       	srlo	r8
80004bc4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004bc8:	c0 50       	breq	80004bd2 <_malloc_r+0x26>
80004bca:	30 c8       	mov	r8,12
80004bcc:	99 38       	st.w	r12[0xc],r8
80004bce:	e0 8f 01 ea 	bral	80004fa2 <_malloc_r+0x3f6>
80004bd2:	e0 a0 02 08 	rcall	80004fe2 <__malloc_lock>
80004bd6:	e0 47 01 f7 	cp.w	r7,503
80004bda:	e0 8b 00 1c 	brhi	80004c12 <_malloc_r+0x66>
80004bde:	ee 03 16 03 	lsr	r3,r7,0x3
80004be2:	4c c8       	lddpc	r8,80004d10 <_malloc_r+0x164>
80004be4:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004be8:	70 36       	ld.w	r6,r8[0xc]
80004bea:	10 36       	cp.w	r6,r8
80004bec:	c0 61       	brne	80004bf8 <_malloc_r+0x4c>
80004bee:	ec c8 ff f8 	sub	r8,r6,-8
80004bf2:	70 36       	ld.w	r6,r8[0xc]
80004bf4:	10 36       	cp.w	r6,r8
80004bf6:	c0 c0       	breq	80004c0e <_malloc_r+0x62>
80004bf8:	6c 18       	ld.w	r8,r6[0x4]
80004bfa:	e0 18 ff fc 	andl	r8,0xfffc
80004bfe:	6c 3a       	ld.w	r10,r6[0xc]
80004c00:	ec 08 00 09 	add	r9,r6,r8
80004c04:	0a 9c       	mov	r12,r5
80004c06:	6c 28       	ld.w	r8,r6[0x8]
80004c08:	95 28       	st.w	r10[0x8],r8
80004c0a:	91 3a       	st.w	r8[0xc],r10
80004c0c:	c4 68       	rjmp	80004c98 <_malloc_r+0xec>
80004c0e:	2f e3       	sub	r3,-2
80004c10:	c4 c8       	rjmp	80004ca8 <_malloc_r+0xfc>
80004c12:	ee 03 16 09 	lsr	r3,r7,0x9
80004c16:	c0 41       	brne	80004c1e <_malloc_r+0x72>
80004c18:	ee 03 16 03 	lsr	r3,r7,0x3
80004c1c:	c2 68       	rjmp	80004c68 <_malloc_r+0xbc>
80004c1e:	58 43       	cp.w	r3,4
80004c20:	e0 8b 00 06 	brhi	80004c2c <_malloc_r+0x80>
80004c24:	ee 03 16 06 	lsr	r3,r7,0x6
80004c28:	2c 83       	sub	r3,-56
80004c2a:	c1 f8       	rjmp	80004c68 <_malloc_r+0xbc>
80004c2c:	59 43       	cp.w	r3,20
80004c2e:	e0 8b 00 04 	brhi	80004c36 <_malloc_r+0x8a>
80004c32:	2a 53       	sub	r3,-91
80004c34:	c1 a8       	rjmp	80004c68 <_malloc_r+0xbc>
80004c36:	e0 43 00 54 	cp.w	r3,84
80004c3a:	e0 8b 00 06 	brhi	80004c46 <_malloc_r+0x9a>
80004c3e:	ee 03 16 0c 	lsr	r3,r7,0xc
80004c42:	29 23       	sub	r3,-110
80004c44:	c1 28       	rjmp	80004c68 <_malloc_r+0xbc>
80004c46:	e0 43 01 54 	cp.w	r3,340
80004c4a:	e0 8b 00 06 	brhi	80004c56 <_malloc_r+0xaa>
80004c4e:	ee 03 16 0f 	lsr	r3,r7,0xf
80004c52:	28 93       	sub	r3,-119
80004c54:	c0 a8       	rjmp	80004c68 <_malloc_r+0xbc>
80004c56:	e0 43 05 54 	cp.w	r3,1364
80004c5a:	e0 88 00 04 	brls	80004c62 <_malloc_r+0xb6>
80004c5e:	37 e3       	mov	r3,126
80004c60:	c0 48       	rjmp	80004c68 <_malloc_r+0xbc>
80004c62:	ee 03 16 12 	lsr	r3,r7,0x12
80004c66:	28 43       	sub	r3,-124
80004c68:	4a aa       	lddpc	r10,80004d10 <_malloc_r+0x164>
80004c6a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004c6e:	74 36       	ld.w	r6,r10[0xc]
80004c70:	c1 98       	rjmp	80004ca2 <_malloc_r+0xf6>
80004c72:	6c 19       	ld.w	r9,r6[0x4]
80004c74:	e0 19 ff fc 	andl	r9,0xfffc
80004c78:	f2 07 01 0b 	sub	r11,r9,r7
80004c7c:	58 fb       	cp.w	r11,15
80004c7e:	e0 8a 00 04 	brle	80004c86 <_malloc_r+0xda>
80004c82:	20 13       	sub	r3,1
80004c84:	c1 18       	rjmp	80004ca6 <_malloc_r+0xfa>
80004c86:	6c 38       	ld.w	r8,r6[0xc]
80004c88:	58 0b       	cp.w	r11,0
80004c8a:	c0 b5       	brlt	80004ca0 <_malloc_r+0xf4>
80004c8c:	6c 2a       	ld.w	r10,r6[0x8]
80004c8e:	ec 09 00 09 	add	r9,r6,r9
80004c92:	0a 9c       	mov	r12,r5
80004c94:	91 2a       	st.w	r8[0x8],r10
80004c96:	95 38       	st.w	r10[0xc],r8
80004c98:	72 18       	ld.w	r8,r9[0x4]
80004c9a:	a1 a8       	sbr	r8,0x0
80004c9c:	93 18       	st.w	r9[0x4],r8
80004c9e:	cb a8       	rjmp	80004e12 <_malloc_r+0x266>
80004ca0:	10 96       	mov	r6,r8
80004ca2:	14 36       	cp.w	r6,r10
80004ca4:	ce 71       	brne	80004c72 <_malloc_r+0xc6>
80004ca6:	2f f3       	sub	r3,-1
80004ca8:	49 aa       	lddpc	r10,80004d10 <_malloc_r+0x164>
80004caa:	f4 cc ff f8 	sub	r12,r10,-8
80004cae:	78 26       	ld.w	r6,r12[0x8]
80004cb0:	18 36       	cp.w	r6,r12
80004cb2:	c6 c0       	breq	80004d8a <_malloc_r+0x1de>
80004cb4:	6c 19       	ld.w	r9,r6[0x4]
80004cb6:	e0 19 ff fc 	andl	r9,0xfffc
80004cba:	f2 07 01 08 	sub	r8,r9,r7
80004cbe:	58 f8       	cp.w	r8,15
80004cc0:	e0 89 00 8e 	brgt	80004ddc <_malloc_r+0x230>
80004cc4:	99 3c       	st.w	r12[0xc],r12
80004cc6:	99 2c       	st.w	r12[0x8],r12
80004cc8:	58 08       	cp.w	r8,0
80004cca:	c0 55       	brlt	80004cd4 <_malloc_r+0x128>
80004ccc:	ec 09 00 09 	add	r9,r6,r9
80004cd0:	0a 9c       	mov	r12,r5
80004cd2:	ce 3b       	rjmp	80004c98 <_malloc_r+0xec>
80004cd4:	e0 49 01 ff 	cp.w	r9,511
80004cd8:	e0 8b 00 13 	brhi	80004cfe <_malloc_r+0x152>
80004cdc:	a3 99       	lsr	r9,0x3
80004cde:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004ce2:	70 2b       	ld.w	r11,r8[0x8]
80004ce4:	8d 38       	st.w	r6[0xc],r8
80004ce6:	8d 2b       	st.w	r6[0x8],r11
80004ce8:	97 36       	st.w	r11[0xc],r6
80004cea:	91 26       	st.w	r8[0x8],r6
80004cec:	a3 49       	asr	r9,0x2
80004cee:	74 18       	ld.w	r8,r10[0x4]
80004cf0:	30 1b       	mov	r11,1
80004cf2:	f6 09 09 49 	lsl	r9,r11,r9
80004cf6:	f1 e9 10 09 	or	r9,r8,r9
80004cfa:	95 19       	st.w	r10[0x4],r9
80004cfc:	c4 78       	rjmp	80004d8a <_malloc_r+0x1de>
80004cfe:	f2 0a 16 09 	lsr	r10,r9,0x9
80004d02:	58 4a       	cp.w	r10,4
80004d04:	e0 8b 00 08 	brhi	80004d14 <_malloc_r+0x168>
80004d08:	f2 0a 16 06 	lsr	r10,r9,0x6
80004d0c:	2c 8a       	sub	r10,-56
80004d0e:	c2 18       	rjmp	80004d50 <_malloc_r+0x1a4>
80004d10:	00 00       	add	r0,r0
80004d12:	01 c8       	ld.ub	r8,r0[0x4]
80004d14:	59 4a       	cp.w	r10,20
80004d16:	e0 8b 00 04 	brhi	80004d1e <_malloc_r+0x172>
80004d1a:	2a 5a       	sub	r10,-91
80004d1c:	c1 a8       	rjmp	80004d50 <_malloc_r+0x1a4>
80004d1e:	e0 4a 00 54 	cp.w	r10,84
80004d22:	e0 8b 00 06 	brhi	80004d2e <_malloc_r+0x182>
80004d26:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004d2a:	29 2a       	sub	r10,-110
80004d2c:	c1 28       	rjmp	80004d50 <_malloc_r+0x1a4>
80004d2e:	e0 4a 01 54 	cp.w	r10,340
80004d32:	e0 8b 00 06 	brhi	80004d3e <_malloc_r+0x192>
80004d36:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004d3a:	28 9a       	sub	r10,-119
80004d3c:	c0 a8       	rjmp	80004d50 <_malloc_r+0x1a4>
80004d3e:	e0 4a 05 54 	cp.w	r10,1364
80004d42:	e0 88 00 04 	brls	80004d4a <_malloc_r+0x19e>
80004d46:	37 ea       	mov	r10,126
80004d48:	c0 48       	rjmp	80004d50 <_malloc_r+0x1a4>
80004d4a:	f2 0a 16 12 	lsr	r10,r9,0x12
80004d4e:	28 4a       	sub	r10,-124
80004d50:	4c 7b       	lddpc	r11,80004e6c <_malloc_r+0x2c0>
80004d52:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004d56:	68 28       	ld.w	r8,r4[0x8]
80004d58:	08 38       	cp.w	r8,r4
80004d5a:	c0 e1       	brne	80004d76 <_malloc_r+0x1ca>
80004d5c:	76 19       	ld.w	r9,r11[0x4]
80004d5e:	a3 4a       	asr	r10,0x2
80004d60:	30 1e       	mov	lr,1
80004d62:	fc 0a 09 4a 	lsl	r10,lr,r10
80004d66:	f3 ea 10 0a 	or	r10,r9,r10
80004d6a:	10 99       	mov	r9,r8
80004d6c:	97 1a       	st.w	r11[0x4],r10
80004d6e:	c0 a8       	rjmp	80004d82 <_malloc_r+0x1d6>
80004d70:	70 28       	ld.w	r8,r8[0x8]
80004d72:	08 38       	cp.w	r8,r4
80004d74:	c0 60       	breq	80004d80 <_malloc_r+0x1d4>
80004d76:	70 1a       	ld.w	r10,r8[0x4]
80004d78:	e0 1a ff fc 	andl	r10,0xfffc
80004d7c:	14 39       	cp.w	r9,r10
80004d7e:	cf 93       	brcs	80004d70 <_malloc_r+0x1c4>
80004d80:	70 39       	ld.w	r9,r8[0xc]
80004d82:	8d 39       	st.w	r6[0xc],r9
80004d84:	8d 28       	st.w	r6[0x8],r8
80004d86:	91 36       	st.w	r8[0xc],r6
80004d88:	93 26       	st.w	r9[0x8],r6
80004d8a:	e6 08 14 02 	asr	r8,r3,0x2
80004d8e:	30 1b       	mov	r11,1
80004d90:	4b 74       	lddpc	r4,80004e6c <_malloc_r+0x2c0>
80004d92:	f6 08 09 4b 	lsl	r11,r11,r8
80004d96:	68 18       	ld.w	r8,r4[0x4]
80004d98:	10 3b       	cp.w	r11,r8
80004d9a:	e0 8b 00 6b 	brhi	80004e70 <_malloc_r+0x2c4>
80004d9e:	f7 e8 00 09 	and	r9,r11,r8
80004da2:	c0 b1       	brne	80004db8 <_malloc_r+0x20c>
80004da4:	e0 13 ff fc 	andl	r3,0xfffc
80004da8:	a1 7b       	lsl	r11,0x1
80004daa:	2f c3       	sub	r3,-4
80004dac:	c0 38       	rjmp	80004db2 <_malloc_r+0x206>
80004dae:	2f c3       	sub	r3,-4
80004db0:	a1 7b       	lsl	r11,0x1
80004db2:	f7 e8 00 09 	and	r9,r11,r8
80004db6:	cf c0       	breq	80004dae <_malloc_r+0x202>
80004db8:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004dbc:	06 92       	mov	r2,r3
80004dbe:	1c 91       	mov	r1,lr
80004dc0:	62 36       	ld.w	r6,r1[0xc]
80004dc2:	c2 d8       	rjmp	80004e1c <_malloc_r+0x270>
80004dc4:	6c 1a       	ld.w	r10,r6[0x4]
80004dc6:	e0 1a ff fc 	andl	r10,0xfffc
80004dca:	f4 07 01 08 	sub	r8,r10,r7
80004dce:	58 f8       	cp.w	r8,15
80004dd0:	e0 8a 00 15 	brle	80004dfa <_malloc_r+0x24e>
80004dd4:	6c 3a       	ld.w	r10,r6[0xc]
80004dd6:	6c 29       	ld.w	r9,r6[0x8]
80004dd8:	95 29       	st.w	r10[0x8],r9
80004dda:	93 3a       	st.w	r9[0xc],r10
80004ddc:	0e 99       	mov	r9,r7
80004dde:	ec 07 00 07 	add	r7,r6,r7
80004de2:	a1 a9       	sbr	r9,0x0
80004de4:	99 37       	st.w	r12[0xc],r7
80004de6:	99 27       	st.w	r12[0x8],r7
80004de8:	8d 19       	st.w	r6[0x4],r9
80004dea:	ee 08 09 08 	st.w	r7[r8],r8
80004dee:	8f 2c       	st.w	r7[0x8],r12
80004df0:	8f 3c       	st.w	r7[0xc],r12
80004df2:	a1 a8       	sbr	r8,0x0
80004df4:	0a 9c       	mov	r12,r5
80004df6:	8f 18       	st.w	r7[0x4],r8
80004df8:	c0 d8       	rjmp	80004e12 <_malloc_r+0x266>
80004dfa:	6c 39       	ld.w	r9,r6[0xc]
80004dfc:	58 08       	cp.w	r8,0
80004dfe:	c0 e5       	brlt	80004e1a <_malloc_r+0x26e>
80004e00:	ec 0a 00 0a 	add	r10,r6,r10
80004e04:	74 18       	ld.w	r8,r10[0x4]
80004e06:	a1 a8       	sbr	r8,0x0
80004e08:	0a 9c       	mov	r12,r5
80004e0a:	95 18       	st.w	r10[0x4],r8
80004e0c:	6c 28       	ld.w	r8,r6[0x8]
80004e0e:	93 28       	st.w	r9[0x8],r8
80004e10:	91 39       	st.w	r8[0xc],r9
80004e12:	ce 9c       	rcall	80004fe4 <__malloc_unlock>
80004e14:	ec cc ff f8 	sub	r12,r6,-8
80004e18:	d8 32       	popm	r0-r7,pc
80004e1a:	12 96       	mov	r6,r9
80004e1c:	02 36       	cp.w	r6,r1
80004e1e:	cd 31       	brne	80004dc4 <_malloc_r+0x218>
80004e20:	2f f2       	sub	r2,-1
80004e22:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004e26:	c0 30       	breq	80004e2c <_malloc_r+0x280>
80004e28:	2f 81       	sub	r1,-8
80004e2a:	cc bb       	rjmp	80004dc0 <_malloc_r+0x214>
80004e2c:	1c 98       	mov	r8,lr
80004e2e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004e32:	c0 81       	brne	80004e42 <_malloc_r+0x296>
80004e34:	68 19       	ld.w	r9,r4[0x4]
80004e36:	f6 08 11 ff 	rsub	r8,r11,-1
80004e3a:	f3 e8 00 08 	and	r8,r9,r8
80004e3e:	89 18       	st.w	r4[0x4],r8
80004e40:	c0 78       	rjmp	80004e4e <_malloc_r+0x2a2>
80004e42:	f0 c9 00 08 	sub	r9,r8,8
80004e46:	20 13       	sub	r3,1
80004e48:	70 08       	ld.w	r8,r8[0x0]
80004e4a:	12 38       	cp.w	r8,r9
80004e4c:	cf 10       	breq	80004e2e <_malloc_r+0x282>
80004e4e:	a1 7b       	lsl	r11,0x1
80004e50:	68 18       	ld.w	r8,r4[0x4]
80004e52:	10 3b       	cp.w	r11,r8
80004e54:	e0 8b 00 0e 	brhi	80004e70 <_malloc_r+0x2c4>
80004e58:	58 0b       	cp.w	r11,0
80004e5a:	c0 b0       	breq	80004e70 <_malloc_r+0x2c4>
80004e5c:	04 93       	mov	r3,r2
80004e5e:	c0 38       	rjmp	80004e64 <_malloc_r+0x2b8>
80004e60:	2f c3       	sub	r3,-4
80004e62:	a1 7b       	lsl	r11,0x1
80004e64:	f7 e8 00 09 	and	r9,r11,r8
80004e68:	ca 81       	brne	80004db8 <_malloc_r+0x20c>
80004e6a:	cf bb       	rjmp	80004e60 <_malloc_r+0x2b4>
80004e6c:	00 00       	add	r0,r0
80004e6e:	01 c8       	ld.ub	r8,r0[0x4]
80004e70:	68 23       	ld.w	r3,r4[0x8]
80004e72:	66 12       	ld.w	r2,r3[0x4]
80004e74:	e0 12 ff fc 	andl	r2,0xfffc
80004e78:	0e 32       	cp.w	r2,r7
80004e7a:	5f 39       	srlo	r9
80004e7c:	e4 07 01 08 	sub	r8,r2,r7
80004e80:	58 f8       	cp.w	r8,15
80004e82:	5f aa       	srle	r10
80004e84:	f5 e9 10 09 	or	r9,r10,r9
80004e88:	e0 80 00 98 	breq	80004fb8 <_malloc_r+0x40c>
80004e8c:	4c 68       	lddpc	r8,80004fa4 <_malloc_r+0x3f8>
80004e8e:	70 01       	ld.w	r1,r8[0x0]
80004e90:	4c 68       	lddpc	r8,80004fa8 <_malloc_r+0x3fc>
80004e92:	2f 01       	sub	r1,-16
80004e94:	70 08       	ld.w	r8,r8[0x0]
80004e96:	0e 01       	add	r1,r7
80004e98:	5b f8       	cp.w	r8,-1
80004e9a:	c0 40       	breq	80004ea2 <_malloc_r+0x2f6>
80004e9c:	28 11       	sub	r1,-127
80004e9e:	e0 11 ff 80 	andl	r1,0xff80
80004ea2:	02 9b       	mov	r11,r1
80004ea4:	0a 9c       	mov	r12,r5
80004ea6:	ca 1c       	rcall	80004fe8 <_sbrk_r>
80004ea8:	18 96       	mov	r6,r12
80004eaa:	5b fc       	cp.w	r12,-1
80004eac:	c6 d0       	breq	80004f86 <_malloc_r+0x3da>
80004eae:	e6 02 00 08 	add	r8,r3,r2
80004eb2:	10 3c       	cp.w	r12,r8
80004eb4:	c0 32       	brcc	80004eba <_malloc_r+0x30e>
80004eb6:	08 33       	cp.w	r3,r4
80004eb8:	c6 71       	brne	80004f86 <_malloc_r+0x3da>
80004eba:	4b da       	lddpc	r10,80004fac <_malloc_r+0x400>
80004ebc:	74 09       	ld.w	r9,r10[0x0]
80004ebe:	e2 09 00 09 	add	r9,r1,r9
80004ec2:	95 09       	st.w	r10[0x0],r9
80004ec4:	10 36       	cp.w	r6,r8
80004ec6:	c0 a1       	brne	80004eda <_malloc_r+0x32e>
80004ec8:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004ecc:	c0 71       	brne	80004eda <_malloc_r+0x32e>
80004ece:	e2 02 00 02 	add	r2,r1,r2
80004ed2:	68 28       	ld.w	r8,r4[0x8]
80004ed4:	a1 a2       	sbr	r2,0x0
80004ed6:	91 12       	st.w	r8[0x4],r2
80004ed8:	c4 b8       	rjmp	80004f6e <_malloc_r+0x3c2>
80004eda:	4b 4a       	lddpc	r10,80004fa8 <_malloc_r+0x3fc>
80004edc:	74 0b       	ld.w	r11,r10[0x0]
80004ede:	5b fb       	cp.w	r11,-1
80004ee0:	c0 31       	brne	80004ee6 <_malloc_r+0x33a>
80004ee2:	95 06       	st.w	r10[0x0],r6
80004ee4:	c0 68       	rjmp	80004ef0 <_malloc_r+0x344>
80004ee6:	ec 09 00 09 	add	r9,r6,r9
80004eea:	4b 1a       	lddpc	r10,80004fac <_malloc_r+0x400>
80004eec:	10 19       	sub	r9,r8
80004eee:	95 09       	st.w	r10[0x0],r9
80004ef0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004ef4:	f0 09 11 08 	rsub	r9,r8,8
80004ef8:	58 08       	cp.w	r8,0
80004efa:	f2 08 17 10 	movne	r8,r9
80004efe:	ed d8 e1 06 	addne	r6,r6,r8
80004f02:	28 08       	sub	r8,-128
80004f04:	ec 01 00 01 	add	r1,r6,r1
80004f08:	0a 9c       	mov	r12,r5
80004f0a:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004f0e:	f0 01 01 01 	sub	r1,r8,r1
80004f12:	02 9b       	mov	r11,r1
80004f14:	c6 ac       	rcall	80004fe8 <_sbrk_r>
80004f16:	4a 68       	lddpc	r8,80004fac <_malloc_r+0x400>
80004f18:	5b fc       	cp.w	r12,-1
80004f1a:	ec 0c 17 00 	moveq	r12,r6
80004f1e:	f9 b1 00 00 	moveq	r1,0
80004f22:	70 09       	ld.w	r9,r8[0x0]
80004f24:	0c 1c       	sub	r12,r6
80004f26:	89 26       	st.w	r4[0x8],r6
80004f28:	02 0c       	add	r12,r1
80004f2a:	12 01       	add	r1,r9
80004f2c:	a1 ac       	sbr	r12,0x0
80004f2e:	91 01       	st.w	r8[0x0],r1
80004f30:	8d 1c       	st.w	r6[0x4],r12
80004f32:	08 33       	cp.w	r3,r4
80004f34:	c1 d0       	breq	80004f6e <_malloc_r+0x3c2>
80004f36:	58 f2       	cp.w	r2,15
80004f38:	e0 8b 00 05 	brhi	80004f42 <_malloc_r+0x396>
80004f3c:	30 18       	mov	r8,1
80004f3e:	8d 18       	st.w	r6[0x4],r8
80004f40:	c2 38       	rjmp	80004f86 <_malloc_r+0x3da>
80004f42:	30 59       	mov	r9,5
80004f44:	20 c2       	sub	r2,12
80004f46:	e0 12 ff f8 	andl	r2,0xfff8
80004f4a:	e6 02 00 08 	add	r8,r3,r2
80004f4e:	91 29       	st.w	r8[0x8],r9
80004f50:	91 19       	st.w	r8[0x4],r9
80004f52:	66 18       	ld.w	r8,r3[0x4]
80004f54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f58:	e5 e8 10 08 	or	r8,r2,r8
80004f5c:	87 18       	st.w	r3[0x4],r8
80004f5e:	58 f2       	cp.w	r2,15
80004f60:	e0 88 00 07 	brls	80004f6e <_malloc_r+0x3c2>
80004f64:	e6 cb ff f8 	sub	r11,r3,-8
80004f68:	0a 9c       	mov	r12,r5
80004f6a:	fe b0 fd 2d 	rcall	800049c4 <_free_r>
80004f6e:	49 19       	lddpc	r9,80004fb0 <_malloc_r+0x404>
80004f70:	72 0a       	ld.w	r10,r9[0x0]
80004f72:	48 f8       	lddpc	r8,80004fac <_malloc_r+0x400>
80004f74:	70 08       	ld.w	r8,r8[0x0]
80004f76:	14 38       	cp.w	r8,r10
80004f78:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f7c:	48 e9       	lddpc	r9,80004fb4 <_malloc_r+0x408>
80004f7e:	72 0a       	ld.w	r10,r9[0x0]
80004f80:	14 38       	cp.w	r8,r10
80004f82:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f86:	68 28       	ld.w	r8,r4[0x8]
80004f88:	70 18       	ld.w	r8,r8[0x4]
80004f8a:	e0 18 ff fc 	andl	r8,0xfffc
80004f8e:	0e 38       	cp.w	r8,r7
80004f90:	5f 39       	srlo	r9
80004f92:	0e 18       	sub	r8,r7
80004f94:	58 f8       	cp.w	r8,15
80004f96:	5f aa       	srle	r10
80004f98:	f5 e9 10 09 	or	r9,r10,r9
80004f9c:	c0 e0       	breq	80004fb8 <_malloc_r+0x40c>
80004f9e:	0a 9c       	mov	r12,r5
80004fa0:	c2 2c       	rcall	80004fe4 <__malloc_unlock>
80004fa2:	d8 3a       	popm	r0-r7,pc,r12=0
80004fa4:	00 00       	add	r0,r0
80004fa6:	0c 68       	and	r8,r6
80004fa8:	00 00       	add	r0,r0
80004faa:	05 d4       	ld.ub	r4,r2[0x5]
80004fac:	00 00       	add	r0,r0
80004fae:	0c 6c       	and	r12,r6
80004fb0:	00 00       	add	r0,r0
80004fb2:	0c 64       	and	r4,r6
80004fb4:	00 00       	add	r0,r0
80004fb6:	0c 60       	and	r0,r6
80004fb8:	68 26       	ld.w	r6,r4[0x8]
80004fba:	a1 a8       	sbr	r8,0x0
80004fbc:	0e 99       	mov	r9,r7
80004fbe:	a1 a9       	sbr	r9,0x0
80004fc0:	8d 19       	st.w	r6[0x4],r9
80004fc2:	ec 07 00 07 	add	r7,r6,r7
80004fc6:	0a 9c       	mov	r12,r5
80004fc8:	89 27       	st.w	r4[0x8],r7
80004fca:	8f 18       	st.w	r7[0x4],r8
80004fcc:	c0 cc       	rcall	80004fe4 <__malloc_unlock>
80004fce:	ec cc ff f8 	sub	r12,r6,-8
80004fd2:	d8 32       	popm	r0-r7,pc

80004fd4 <memset>:
80004fd4:	18 98       	mov	r8,r12
80004fd6:	c0 38       	rjmp	80004fdc <memset+0x8>
80004fd8:	10 cb       	st.b	r8++,r11
80004fda:	20 1a       	sub	r10,1
80004fdc:	58 0a       	cp.w	r10,0
80004fde:	cf d1       	brne	80004fd8 <memset+0x4>
80004fe0:	5e fc       	retal	r12

80004fe2 <__malloc_lock>:
80004fe2:	5e fc       	retal	r12

80004fe4 <__malloc_unlock>:
80004fe4:	5e fc       	retal	r12
80004fe6:	d7 03       	nop

80004fe8 <_sbrk_r>:
80004fe8:	d4 21       	pushm	r4-r7,lr
80004fea:	30 08       	mov	r8,0
80004fec:	18 97       	mov	r7,r12
80004fee:	48 66       	lddpc	r6,80005004 <_sbrk_r+0x1c>
80004ff0:	16 9c       	mov	r12,r11
80004ff2:	8d 08       	st.w	r6[0x0],r8
80004ff4:	c5 ac       	rcall	800050a8 <_sbrk>
80004ff6:	5b fc       	cp.w	r12,-1
80004ff8:	c0 51       	brne	80005002 <_sbrk_r+0x1a>
80004ffa:	6c 08       	ld.w	r8,r6[0x0]
80004ffc:	58 08       	cp.w	r8,0
80004ffe:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005002:	d8 22       	popm	r4-r7,pc
80005004:	00 00       	add	r0,r0
80005006:	0c c8       	st.b	r6++,r8

80005008 <__sclose>:
80005008:	d4 01       	pushm	lr
8000500a:	96 7b       	ld.sh	r11,r11[0xe]
8000500c:	c8 0c       	rcall	8000510c <_close_r>
8000500e:	d8 02       	popm	pc

80005010 <__sseek>:
80005010:	d4 21       	pushm	r4-r7,lr
80005012:	16 97       	mov	r7,r11
80005014:	96 7b       	ld.sh	r11,r11[0xe]
80005016:	cf 7c       	rcall	80005204 <_lseek_r>
80005018:	8e 68       	ld.sh	r8,r7[0xc]
8000501a:	10 99       	mov	r9,r8
8000501c:	ad c8       	cbr	r8,0xc
8000501e:	ad a9       	sbr	r9,0xc
80005020:	5b fc       	cp.w	r12,-1
80005022:	ef f8 0c 06 	st.heq	r7[0xc],r8
80005026:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000502a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000502e:	d8 22       	popm	r4-r7,pc

80005030 <__swrite>:
80005030:	d4 21       	pushm	r4-r7,lr
80005032:	96 68       	ld.sh	r8,r11[0xc]
80005034:	16 97       	mov	r7,r11
80005036:	14 95       	mov	r5,r10
80005038:	12 94       	mov	r4,r9
8000503a:	e2 18 01 00 	andl	r8,0x100,COH
8000503e:	18 96       	mov	r6,r12
80005040:	c0 50       	breq	8000504a <__swrite+0x1a>
80005042:	30 29       	mov	r9,2
80005044:	30 0a       	mov	r10,0
80005046:	96 7b       	ld.sh	r11,r11[0xe]
80005048:	cd ec       	rcall	80005204 <_lseek_r>
8000504a:	8e 68       	ld.sh	r8,r7[0xc]
8000504c:	ad c8       	cbr	r8,0xc
8000504e:	08 99       	mov	r9,r4
80005050:	0a 9a       	mov	r10,r5
80005052:	8e 7b       	ld.sh	r11,r7[0xe]
80005054:	0c 9c       	mov	r12,r6
80005056:	ae 68       	st.h	r7[0xc],r8
80005058:	c4 6c       	rcall	800050e4 <_write_r>
8000505a:	d8 22       	popm	r4-r7,pc

8000505c <__sread>:
8000505c:	d4 21       	pushm	r4-r7,lr
8000505e:	16 97       	mov	r7,r11
80005060:	96 7b       	ld.sh	r11,r11[0xe]
80005062:	ce 5c       	rcall	8000522c <_read_r>
80005064:	c0 65       	brlt	80005070 <__sread+0x14>
80005066:	6f 58       	ld.w	r8,r7[0x54]
80005068:	18 08       	add	r8,r12
8000506a:	ef 48 00 54 	st.w	r7[84],r8
8000506e:	d8 22       	popm	r4-r7,pc
80005070:	8e 68       	ld.sh	r8,r7[0xc]
80005072:	ad c8       	cbr	r8,0xc
80005074:	ae 68       	st.h	r7[0xc],r8
80005076:	d8 22       	popm	r4-r7,pc

80005078 <_close>:
80005078:	30 28       	mov	r8,2
8000507a:	d6 73       	breakpoint
8000507c:	3f fc       	mov	r12,-1
8000507e:	35 8b       	mov	r11,88
80005080:	58 0c       	cp.w	r12,0
80005082:	5e 4c       	retge	r12
80005084:	48 2a       	lddpc	r10,8000508c <_close+0x14>
80005086:	95 0b       	st.w	r10[0x0],r11
80005088:	5e fc       	retal	r12
8000508a:	d7 03       	nop
8000508c:	00 00       	add	r0,r0
8000508e:	0c c8       	st.b	r6++,r8

80005090 <_lseek>:
80005090:	30 58       	mov	r8,5
80005092:	d6 73       	breakpoint
80005094:	3f fc       	mov	r12,-1
80005096:	35 8b       	mov	r11,88
80005098:	58 0c       	cp.w	r12,0
8000509a:	5e 4c       	retge	r12
8000509c:	48 2a       	lddpc	r10,800050a4 <_lseek+0x14>
8000509e:	95 0b       	st.w	r10[0x0],r11
800050a0:	5e fc       	retal	r12
800050a2:	d7 03       	nop
800050a4:	00 00       	add	r0,r0
800050a6:	0c c8       	st.b	r6++,r8

800050a8 <_sbrk>:
800050a8:	d4 01       	pushm	lr
800050aa:	48 c8       	lddpc	r8,800050d8 <_sbrk+0x30>
800050ac:	70 09       	ld.w	r9,r8[0x0]
800050ae:	58 09       	cp.w	r9,0
800050b0:	c0 31       	brne	800050b6 <_sbrk+0xe>
800050b2:	48 b9       	lddpc	r9,800050dc <_sbrk+0x34>
800050b4:	91 09       	st.w	r8[0x0],r9
800050b6:	48 99       	lddpc	r9,800050d8 <_sbrk+0x30>
800050b8:	48 aa       	lddpc	r10,800050e0 <_sbrk+0x38>
800050ba:	72 08       	ld.w	r8,r9[0x0]
800050bc:	f0 0c 00 0c 	add	r12,r8,r12
800050c0:	14 3c       	cp.w	r12,r10
800050c2:	e0 8b 00 04 	brhi	800050ca <_sbrk+0x22>
800050c6:	93 0c       	st.w	r9[0x0],r12
800050c8:	c0 58       	rjmp	800050d2 <_sbrk+0x2a>
800050ca:	c3 1c       	rcall	8000512c <__errno>
800050cc:	30 c8       	mov	r8,12
800050ce:	99 08       	st.w	r12[0x0],r8
800050d0:	3f f8       	mov	r8,-1
800050d2:	10 9c       	mov	r12,r8
800050d4:	d8 02       	popm	pc
800050d6:	d7 03       	nop
800050d8:	00 00       	add	r0,r0
800050da:	0c 94       	mov	r4,r6
800050dc:	00 00       	add	r0,r0
800050de:	0c d0       	st.w	--r6,r0
800050e0:	00 00       	add	r0,r0
800050e2:	f0 00       	*unknown*

800050e4 <_write_r>:
800050e4:	d4 21       	pushm	r4-r7,lr
800050e6:	16 98       	mov	r8,r11
800050e8:	18 97       	mov	r7,r12
800050ea:	10 9c       	mov	r12,r8
800050ec:	30 08       	mov	r8,0
800050ee:	14 9b       	mov	r11,r10
800050f0:	48 66       	lddpc	r6,80005108 <_write_r+0x24>
800050f2:	12 9a       	mov	r10,r9
800050f4:	8d 08       	st.w	r6[0x0],r8
800050f6:	fe b0 f8 0d 	rcall	80004110 <_write>
800050fa:	5b fc       	cp.w	r12,-1
800050fc:	c0 51       	brne	80005106 <_write_r+0x22>
800050fe:	6c 08       	ld.w	r8,r6[0x0]
80005100:	58 08       	cp.w	r8,0
80005102:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005106:	d8 22       	popm	r4-r7,pc
80005108:	00 00       	add	r0,r0
8000510a:	0c c8       	st.b	r6++,r8

8000510c <_close_r>:
8000510c:	d4 21       	pushm	r4-r7,lr
8000510e:	30 08       	mov	r8,0
80005110:	18 97       	mov	r7,r12
80005112:	48 66       	lddpc	r6,80005128 <_close_r+0x1c>
80005114:	16 9c       	mov	r12,r11
80005116:	8d 08       	st.w	r6[0x0],r8
80005118:	cb 0f       	rcall	80005078 <_close>
8000511a:	5b fc       	cp.w	r12,-1
8000511c:	c0 51       	brne	80005126 <_close_r+0x1a>
8000511e:	6c 08       	ld.w	r8,r6[0x0]
80005120:	58 08       	cp.w	r8,0
80005122:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005126:	d8 22       	popm	r4-r7,pc
80005128:	00 00       	add	r0,r0
8000512a:	0c c8       	st.b	r6++,r8

8000512c <__errno>:
8000512c:	48 28       	lddpc	r8,80005134 <__errno+0x8>
8000512e:	70 0c       	ld.w	r12,r8[0x0]
80005130:	2f 4c       	sub	r12,-12
80005132:	5e fc       	retal	r12
80005134:	00 00       	add	r0,r0
80005136:	01 c4       	ld.ub	r4,r0[0x4]

80005138 <_fclose_r>:
80005138:	d4 21       	pushm	r4-r7,lr
8000513a:	18 96       	mov	r6,r12
8000513c:	16 97       	mov	r7,r11
8000513e:	58 0b       	cp.w	r11,0
80005140:	c0 31       	brne	80005146 <_fclose_r+0xe>
80005142:	16 95       	mov	r5,r11
80005144:	c5 08       	rjmp	800051e4 <_fclose_r+0xac>
80005146:	fe b0 fb 4f 	rcall	800047e4 <__sfp_lock_acquire>
8000514a:	58 06       	cp.w	r6,0
8000514c:	c0 70       	breq	8000515a <_fclose_r+0x22>
8000514e:	6c 68       	ld.w	r8,r6[0x18]
80005150:	58 08       	cp.w	r8,0
80005152:	c0 41       	brne	8000515a <_fclose_r+0x22>
80005154:	0c 9c       	mov	r12,r6
80005156:	fe b0 fb 9b 	rcall	8000488c <__sinit>
8000515a:	4a 48       	lddpc	r8,800051e8 <_fclose_r+0xb0>
8000515c:	10 37       	cp.w	r7,r8
8000515e:	c0 31       	brne	80005164 <_fclose_r+0x2c>
80005160:	6c 07       	ld.w	r7,r6[0x0]
80005162:	c0 a8       	rjmp	80005176 <_fclose_r+0x3e>
80005164:	4a 28       	lddpc	r8,800051ec <_fclose_r+0xb4>
80005166:	10 37       	cp.w	r7,r8
80005168:	c0 31       	brne	8000516e <_fclose_r+0x36>
8000516a:	6c 17       	ld.w	r7,r6[0x4]
8000516c:	c0 58       	rjmp	80005176 <_fclose_r+0x3e>
8000516e:	4a 18       	lddpc	r8,800051f0 <_fclose_r+0xb8>
80005170:	10 37       	cp.w	r7,r8
80005172:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80005176:	8e 69       	ld.sh	r9,r7[0xc]
80005178:	30 08       	mov	r8,0
8000517a:	f0 09 19 00 	cp.h	r9,r8
8000517e:	c0 51       	brne	80005188 <_fclose_r+0x50>
80005180:	fe b0 fb 33 	rcall	800047e6 <__sfp_lock_release>
80005184:	30 05       	mov	r5,0
80005186:	c2 f8       	rjmp	800051e4 <_fclose_r+0xac>
80005188:	0e 9b       	mov	r11,r7
8000518a:	0c 9c       	mov	r12,r6
8000518c:	fe b0 fa a4 	rcall	800046d4 <_fflush_r>
80005190:	6e c8       	ld.w	r8,r7[0x30]
80005192:	18 95       	mov	r5,r12
80005194:	58 08       	cp.w	r8,0
80005196:	c0 60       	breq	800051a2 <_fclose_r+0x6a>
80005198:	6e 8b       	ld.w	r11,r7[0x20]
8000519a:	0c 9c       	mov	r12,r6
8000519c:	5d 18       	icall	r8
8000519e:	f9 b5 05 ff 	movlt	r5,-1
800051a2:	8e 68       	ld.sh	r8,r7[0xc]
800051a4:	ed b8 00 07 	bld	r8,0x7
800051a8:	c0 51       	brne	800051b2 <_fclose_r+0x7a>
800051aa:	6e 4b       	ld.w	r11,r7[0x10]
800051ac:	0c 9c       	mov	r12,r6
800051ae:	fe b0 fc 0b 	rcall	800049c4 <_free_r>
800051b2:	6e db       	ld.w	r11,r7[0x34]
800051b4:	58 0b       	cp.w	r11,0
800051b6:	c0 a0       	breq	800051ca <_fclose_r+0x92>
800051b8:	ee c8 ff bc 	sub	r8,r7,-68
800051bc:	10 3b       	cp.w	r11,r8
800051be:	c0 40       	breq	800051c6 <_fclose_r+0x8e>
800051c0:	0c 9c       	mov	r12,r6
800051c2:	fe b0 fc 01 	rcall	800049c4 <_free_r>
800051c6:	30 08       	mov	r8,0
800051c8:	8f d8       	st.w	r7[0x34],r8
800051ca:	6f 2b       	ld.w	r11,r7[0x48]
800051cc:	58 0b       	cp.w	r11,0
800051ce:	c0 70       	breq	800051dc <_fclose_r+0xa4>
800051d0:	0c 9c       	mov	r12,r6
800051d2:	fe b0 fb f9 	rcall	800049c4 <_free_r>
800051d6:	30 08       	mov	r8,0
800051d8:	ef 48 00 48 	st.w	r7[72],r8
800051dc:	30 08       	mov	r8,0
800051de:	ae 68       	st.h	r7[0xc],r8
800051e0:	fe b0 fb 03 	rcall	800047e6 <__sfp_lock_release>
800051e4:	0a 9c       	mov	r12,r5
800051e6:	d8 22       	popm	r4-r7,pc
800051e8:	80 00       	ld.sh	r0,r0[0x0]
800051ea:	57 38       	stdsp	sp[0x1cc],r8
800051ec:	80 00       	ld.sh	r0,r0[0x0]
800051ee:	57 58       	stdsp	sp[0x1d4],r8
800051f0:	80 00       	ld.sh	r0,r0[0x0]
800051f2:	57 78       	stdsp	sp[0x1dc],r8

800051f4 <fclose>:
800051f4:	d4 01       	pushm	lr
800051f6:	48 38       	lddpc	r8,80005200 <fclose+0xc>
800051f8:	18 9b       	mov	r11,r12
800051fa:	70 0c       	ld.w	r12,r8[0x0]
800051fc:	c9 ef       	rcall	80005138 <_fclose_r>
800051fe:	d8 02       	popm	pc
80005200:	00 00       	add	r0,r0
80005202:	01 c4       	ld.ub	r4,r0[0x4]

80005204 <_lseek_r>:
80005204:	d4 21       	pushm	r4-r7,lr
80005206:	16 98       	mov	r8,r11
80005208:	18 97       	mov	r7,r12
8000520a:	10 9c       	mov	r12,r8
8000520c:	30 08       	mov	r8,0
8000520e:	14 9b       	mov	r11,r10
80005210:	48 66       	lddpc	r6,80005228 <_lseek_r+0x24>
80005212:	12 9a       	mov	r10,r9
80005214:	8d 08       	st.w	r6[0x0],r8
80005216:	c3 df       	rcall	80005090 <_lseek>
80005218:	5b fc       	cp.w	r12,-1
8000521a:	c0 51       	brne	80005224 <_lseek_r+0x20>
8000521c:	6c 08       	ld.w	r8,r6[0x0]
8000521e:	58 08       	cp.w	r8,0
80005220:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005224:	d8 22       	popm	r4-r7,pc
80005226:	d7 03       	nop
80005228:	00 00       	add	r0,r0
8000522a:	0c c8       	st.b	r6++,r8

8000522c <_read_r>:
8000522c:	d4 21       	pushm	r4-r7,lr
8000522e:	16 98       	mov	r8,r11
80005230:	18 97       	mov	r7,r12
80005232:	10 9c       	mov	r12,r8
80005234:	30 08       	mov	r8,0
80005236:	14 9b       	mov	r11,r10
80005238:	48 66       	lddpc	r6,80005250 <_read_r+0x24>
8000523a:	12 9a       	mov	r10,r9
8000523c:	8d 08       	st.w	r6[0x0],r8
8000523e:	fe b0 f6 db 	rcall	80003ff4 <_read>
80005242:	5b fc       	cp.w	r12,-1
80005244:	c0 51       	brne	8000524e <_read_r+0x22>
80005246:	6c 08       	ld.w	r8,r6[0x0]
80005248:	58 08       	cp.w	r8,0
8000524a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000524e:	d8 22       	popm	r4-r7,pc
80005250:	00 00       	add	r0,r0
80005252:	0c c8       	st.b	r6++,r8

Disassembly of section .exception:

80005400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80005400:	c0 08       	rjmp	80005400 <_evba>
	...

80005404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80005404:	c0 08       	rjmp	80005404 <_handle_TLB_Multiple_Hit>
	...

80005408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80005408:	c0 08       	rjmp	80005408 <_handle_Bus_Error_Data_Fetch>
	...

8000540c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000540c:	c0 08       	rjmp	8000540c <_handle_Bus_Error_Instruction_Fetch>
	...

80005410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80005410:	c0 08       	rjmp	80005410 <_handle_NMI>
	...

80005414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80005414:	c0 08       	rjmp	80005414 <_handle_Instruction_Address>
	...

80005418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80005418:	c0 08       	rjmp	80005418 <_handle_ITLB_Protection>
	...

8000541c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000541c:	c0 08       	rjmp	8000541c <_handle_Breakpoint>
	...

80005420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80005420:	c0 08       	rjmp	80005420 <_handle_Illegal_Opcode>
	...

80005424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80005424:	c0 08       	rjmp	80005424 <_handle_Unimplemented_Instruction>
	...

80005428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80005428:	c0 08       	rjmp	80005428 <_handle_Privilege_Violation>
	...

8000542c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000542c:	c0 08       	rjmp	8000542c <_handle_Floating_Point>
	...

80005430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80005430:	c0 08       	rjmp	80005430 <_handle_Coprocessor_Absent>
	...

80005434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80005434:	c0 08       	rjmp	80005434 <_handle_Data_Address_Read>
	...

80005438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80005438:	c0 08       	rjmp	80005438 <_handle_Data_Address_Write>
	...

8000543c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000543c:	c0 08       	rjmp	8000543c <_handle_DTLB_Protection_Read>
	...

80005440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80005440:	c0 08       	rjmp	80005440 <_handle_DTLB_Protection_Write>
	...

80005444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80005444:	c0 08       	rjmp	80005444 <_handle_DTLB_Modified>
	...

80005450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80005450:	c0 08       	rjmp	80005450 <_handle_ITLB_Miss>
	...

80005460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80005460:	c0 08       	rjmp	80005460 <_handle_DTLB_Miss_Read>
	...

80005470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80005470:	c0 08       	rjmp	80005470 <_handle_DTLB_Miss_Write>
	...

80005500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80005500:	c0 08       	rjmp	80005500 <_handle_Supervisor_Call>
80005502:	d7 03       	nop

80005504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005504:	30 0c       	mov	r12,0
80005506:	fe b0 e7 2d 	rcall	80002360 <_get_interrupt_handler>
8000550a:	58 0c       	cp.w	r12,0
8000550c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80005510:	d6 03       	rete

80005512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005512:	30 1c       	mov	r12,1
80005514:	fe b0 e7 26 	rcall	80002360 <_get_interrupt_handler>
80005518:	58 0c       	cp.w	r12,0
8000551a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000551e:	d6 03       	rete

80005520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005520:	30 2c       	mov	r12,2
80005522:	fe b0 e7 1f 	rcall	80002360 <_get_interrupt_handler>
80005526:	58 0c       	cp.w	r12,0
80005528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000552c:	d6 03       	rete

8000552e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000552e:	30 3c       	mov	r12,3
80005530:	fe b0 e7 18 	rcall	80002360 <_get_interrupt_handler>
80005534:	58 0c       	cp.w	r12,0
80005536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000553a:	d6 03       	rete
8000553c:	d7 03       	nop
8000553e:	d7 03       	nop
80005540:	d7 03       	nop
80005542:	d7 03       	nop
80005544:	d7 03       	nop
80005546:	d7 03       	nop
80005548:	d7 03       	nop
8000554a:	d7 03       	nop
8000554c:	d7 03       	nop
8000554e:	d7 03       	nop
80005550:	d7 03       	nop
80005552:	d7 03       	nop
80005554:	d7 03       	nop
80005556:	d7 03       	nop
80005558:	d7 03       	nop
8000555a:	d7 03       	nop
8000555c:	d7 03       	nop
8000555e:	d7 03       	nop
80005560:	d7 03       	nop
80005562:	d7 03       	nop
80005564:	d7 03       	nop
80005566:	d7 03       	nop
80005568:	d7 03       	nop
8000556a:	d7 03       	nop
8000556c:	d7 03       	nop
8000556e:	d7 03       	nop
80005570:	d7 03       	nop
80005572:	d7 03       	nop
80005574:	d7 03       	nop
80005576:	d7 03       	nop
80005578:	d7 03       	nop
8000557a:	d7 03       	nop
8000557c:	d7 03       	nop
8000557e:	d7 03       	nop
80005580:	d7 03       	nop
80005582:	d7 03       	nop
80005584:	d7 03       	nop
80005586:	d7 03       	nop
80005588:	d7 03       	nop
8000558a:	d7 03       	nop
8000558c:	d7 03       	nop
8000558e:	d7 03       	nop
80005590:	d7 03       	nop
80005592:	d7 03       	nop
80005594:	d7 03       	nop
80005596:	d7 03       	nop
80005598:	d7 03       	nop
8000559a:	d7 03       	nop
8000559c:	d7 03       	nop
8000559e:	d7 03       	nop
800055a0:	d7 03       	nop
800055a2:	d7 03       	nop
800055a4:	d7 03       	nop
800055a6:	d7 03       	nop
800055a8:	d7 03       	nop
800055aa:	d7 03       	nop
800055ac:	d7 03       	nop
800055ae:	d7 03       	nop
800055b0:	d7 03       	nop
800055b2:	d7 03       	nop
800055b4:	d7 03       	nop
800055b6:	d7 03       	nop
800055b8:	d7 03       	nop
800055ba:	d7 03       	nop
800055bc:	d7 03       	nop
800055be:	d7 03       	nop
800055c0:	d7 03       	nop
800055c2:	d7 03       	nop
800055c4:	d7 03       	nop
800055c6:	d7 03       	nop
800055c8:	d7 03       	nop
800055ca:	d7 03       	nop
800055cc:	d7 03       	nop
800055ce:	d7 03       	nop
800055d0:	d7 03       	nop
800055d2:	d7 03       	nop
800055d4:	d7 03       	nop
800055d6:	d7 03       	nop
800055d8:	d7 03       	nop
800055da:	d7 03       	nop
800055dc:	d7 03       	nop
800055de:	d7 03       	nop
800055e0:	d7 03       	nop
800055e2:	d7 03       	nop
800055e4:	d7 03       	nop
800055e6:	d7 03       	nop
800055e8:	d7 03       	nop
800055ea:	d7 03       	nop
800055ec:	d7 03       	nop
800055ee:	d7 03       	nop
800055f0:	d7 03       	nop
800055f2:	d7 03       	nop
800055f4:	d7 03       	nop
800055f6:	d7 03       	nop
800055f8:	d7 03       	nop
800055fa:	d7 03       	nop
800055fc:	d7 03       	nop
800055fe:	d7 03       	nop
