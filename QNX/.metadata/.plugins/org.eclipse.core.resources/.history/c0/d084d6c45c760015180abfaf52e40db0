#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/dispatch.h>
#include <sys/mman.h>

struct pid_data{
	pthread_mutex_t pid_mutex;
	pid_t pid;
};


struct pid_data *my_pid_addr;

char buffer[50];
char reply[9] = "Thank you";

void program_one(void)
{
	pthread_mutexattr_t myattr;

	int f_desc = shm_open("/sharedpid", O_RDWR | O_CREAT, S_IRWXU);
	ftruncate(f_desc, sizeof(struct pid_data));
	my_pid_addr = (struct pid_data*)mmap(0, sizeof(struct pid_data), PROT_READ | PROT_WRITE, MAP_SHARED, f_desc, 0);


	pthread_mutexattr_init(&myattr);
	pthread_mutexattr_setpshared(&myattr, PTHREAD_PROCESS_SHARED);
	pthread_mutex_init(&(my_pid_addr->pid_mutex), &myattr);
	my_pid_addr->pid = getpid();
}

void msg_server()
{
	int chan_id = ChannelCreate(0);
	int msg_id = MsgReceive(chan_id, &buffer, sizeof(buffer), 0 );
	printf("SERVER: received msg: %s\n", buffer);
	MsgReply(msg_id,0, &reply,sizeof(reply));

}


int main(int argc, char *argv[])
{
	program_one();
	printf("Program One: PID: %d\n", my_pid_addr->pid);

	return EXIT_SUCCESS;
}
